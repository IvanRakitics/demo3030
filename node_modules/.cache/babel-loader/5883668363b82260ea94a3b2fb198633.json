{"ast":null,"code":"import _defineProperty from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useRef } from 'react';\nimport classNames from 'classnames';\nimport { useSpring, animated } from '@react-spring/web';\nimport { withNativeProps } from '../../utils/native-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { bound } from '../../utils/bound';\nimport { useThrottleFn, useIsomorphicLayoutEffect } from 'ahooks';\nimport { useMutationEffect } from '../../utils/use-mutation-effect';\nimport { useResizeEffect } from '../../utils/use-resize-effect';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { useIsomorphicUpdateLayoutEffect } from '../../utils/use-isomorphic-update-layout-effect';\nimport { ShouldRender } from '../../utils/should-render';\nvar classPrefix = \"adm-tabs\";\nexport var Tab = function Tab() {\n  return null;\n};\nvar defaultProps = {\n  activeLineMode: 'auto',\n  stretch: true\n};\nexport var Tabs = function Tabs(p) {\n  var _a;\n\n  var props = mergeProps(defaultProps, p);\n  var tabListContainerRef = useRef(null);\n  var activeLineRef = useRef(null);\n  var keyToIndexRecord = {};\n  var firstActiveKey = null;\n  var panes = [];\n  React.Children.forEach(props.children, function (child, index) {\n    if (!React.isValidElement(child)) return;\n    var key = child.key;\n    if (typeof key !== 'string') return;\n\n    if (index === 0) {\n      firstActiveKey = key;\n    }\n\n    var length = panes.push(child);\n    keyToIndexRecord[key] = length - 1;\n  });\n\n  var _usePropsValue = usePropsValue({\n    value: props.activeKey,\n    defaultValue: (_a = props.defaultActiveKey) !== null && _a !== void 0 ? _a : firstActiveKey,\n    onChange: function onChange(v) {\n      var _a;\n\n      if (v === null) return;\n      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, v);\n    }\n  }),\n      _usePropsValue2 = _slicedToArray(_usePropsValue, 2),\n      activeKey = _usePropsValue2[0],\n      setActiveKey = _usePropsValue2[1];\n\n  var _useSpring = useSpring(function () {\n    return {\n      x: 0,\n      width: 0,\n      config: {\n        tension: 300,\n        clamp: true\n      }\n    };\n  }),\n      _useSpring2 = _slicedToArray(_useSpring, 2),\n      _useSpring2$ = _useSpring2[0],\n      x = _useSpring2$.x,\n      width = _useSpring2$.width,\n      api = _useSpring2[1];\n\n  var _useSpring3 = useSpring(function () {\n    return {\n      scrollLeft: 0,\n      config: {\n        tension: 300,\n        clamp: true\n      }\n    };\n  }),\n      _useSpring4 = _slicedToArray(_useSpring3, 2),\n      scrollLeft = _useSpring4[0].scrollLeft,\n      scrollApi = _useSpring4[1];\n\n  var _useSpring5 = useSpring(function () {\n    return {\n      leftMaskOpacity: 0,\n      rightMaskOpacity: 0,\n      config: {\n        clamp: true\n      }\n    };\n  }),\n      _useSpring6 = _slicedToArray(_useSpring5, 2),\n      _useSpring6$ = _useSpring6[0],\n      leftMaskOpacity = _useSpring6$.leftMaskOpacity,\n      rightMaskOpacity = _useSpring6$.rightMaskOpacity,\n      maskApi = _useSpring6[1];\n\n  function animate() {\n    var immediate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var container = tabListContainerRef.current;\n    if (!container) return;\n    var activeIndex = keyToIndexRecord[activeKey];\n\n    if (activeIndex === undefined) {\n      api.start({\n        x: 0,\n        width: 0,\n        immediate: true\n      });\n      return;\n    }\n\n    var activeLine = activeLineRef.current;\n    if (!activeLine) return;\n    var activeTabWrapper = container.children.item(activeIndex + 1);\n    var activeTab = activeTabWrapper.children.item(0);\n    var activeTabLeft = activeTab.offsetLeft;\n    var activeTabWidth = activeTab.offsetWidth;\n    var activeTabWrapperLeft = activeTabWrapper.offsetLeft;\n    var activeTabWrapperWidth = activeTabWrapper.offsetWidth;\n    var containerWidth = container.offsetWidth;\n    var containerScrollWidth = container.scrollWidth;\n    var containerScrollLeft = container.scrollLeft;\n    var activeLineWidth = activeLine.offsetWidth;\n    var x = 0;\n    var width = 0;\n\n    if (props.activeLineMode === 'auto') {\n      x = activeTabLeft;\n      width = activeTabWidth;\n    } else if (props.activeLineMode === 'full') {\n      x = activeTabWrapperLeft;\n      width = activeTabWrapperWidth;\n    } else {\n      x = activeTabLeft + (activeTabWidth - activeLineWidth) / 2;\n    }\n\n    api.start({\n      x: x,\n      width: width,\n      immediate: immediate\n    });\n    var maxScrollDistance = containerScrollWidth - containerWidth;\n    if (maxScrollDistance <= 0) return;\n    var nextScrollLeft = bound(activeTabLeft - (containerWidth - activeTabWidth) / 2, 0, containerScrollWidth - containerWidth);\n    scrollApi.start({\n      scrollLeft: nextScrollLeft,\n      from: {\n        scrollLeft: containerScrollLeft\n      },\n      immediate: immediate\n    });\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    animate(!x.isAnimating);\n  }, []);\n  useIsomorphicUpdateLayoutEffect(function () {\n    animate();\n  }, [activeKey]);\n  useResizeEffect(function () {\n    animate(!x.isAnimating);\n  }, tabListContainerRef);\n  useMutationEffect(function () {\n    animate(!x.isAnimating);\n  }, tabListContainerRef, {\n    subtree: true,\n    childList: true,\n    characterData: true\n  });\n\n  var _useThrottleFn = useThrottleFn(function () {\n    var immediate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var container = tabListContainerRef.current;\n    if (!container) return;\n    var scrollLeft = container.scrollLeft;\n    var showLeftMask = scrollLeft > 0;\n    var showRightMask = scrollLeft + container.offsetWidth < container.scrollWidth;\n    maskApi.start({\n      leftMaskOpacity: showLeftMask ? 1 : 0,\n      rightMaskOpacity: showRightMask ? 1 : 0,\n      immediate: immediate\n    });\n  }, {\n    wait: 100,\n    trailing: true,\n    leading: true\n  }),\n      updateMask = _useThrottleFn.run;\n\n  useIsomorphicLayoutEffect(function () {\n    updateMask(true);\n  }, []);\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-header\")\n  }, React.createElement(animated.div, {\n    className: classNames(\"\".concat(classPrefix, \"-header-mask\"), \"\".concat(classPrefix, \"-header-mask-left\")),\n    style: {\n      opacity: leftMaskOpacity\n    }\n  }), React.createElement(animated.div, {\n    className: classNames(\"\".concat(classPrefix, \"-header-mask\"), \"\".concat(classPrefix, \"-header-mask-right\")),\n    style: {\n      opacity: rightMaskOpacity\n    }\n  }), React.createElement(animated.div, {\n    className: \"\".concat(classPrefix, \"-tab-list\"),\n    ref: tabListContainerRef,\n    scrollLeft: scrollLeft,\n    onScroll: updateMask\n  }, React.createElement(animated.div, {\n    ref: activeLineRef,\n    className: \"\".concat(classPrefix, \"-tab-line\"),\n    style: {\n      width: props.activeLineMode === 'fixed' ? 'var(--fixed-active-line-width, 30px)' : width,\n      x: x\n    }\n  }), panes.map(function (pane) {\n    var _classNames2;\n\n    return withNativeProps(pane.props, React.createElement(\"div\", {\n      key: pane.key,\n      className: classNames(\"\".concat(classPrefix, \"-tab-wrapper\"), _defineProperty({}, \"\".concat(classPrefix, \"-tab-wrapper-stretch\"), props.stretch))\n    }, React.createElement(\"div\", {\n      onClick: function onClick() {\n        var key = pane.key;\n        if (pane.props.disabled) return;\n\n        if (key === undefined || key === null) {\n          return;\n        }\n\n        setActiveKey(key.toString());\n      },\n      className: classNames(\"\".concat(classPrefix, \"-tab\"), (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(classPrefix, \"-tab-active\"), pane.key === activeKey), _defineProperty(_classNames2, \"\".concat(classPrefix, \"-tab-disabled\"), pane.props.disabled), _classNames2))\n    }, pane.props.title)));\n  }))), panes.map(function (pane) {\n    if (pane.props.children === undefined) {\n      return null;\n    }\n\n    var active = pane.key === activeKey;\n    return React.createElement(ShouldRender, {\n      key: pane.key,\n      active: active,\n      forceRender: pane.props.forceRender,\n      destroyOnClose: pane.props.destroyOnClose\n    }, React.createElement(\"div\", {\n      className: \"\".concat(classPrefix, \"-content\"),\n      style: {\n        display: active ? 'block' : 'none'\n      }\n    }, pane.props.children));\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}