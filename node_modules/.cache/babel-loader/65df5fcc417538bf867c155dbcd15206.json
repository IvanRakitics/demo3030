{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { __awaiter } from \"tslib\";\nimport { mergeProps } from '../../utils/with-default-props';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useLockFn, useMemoizedFn } from 'ahooks';\nimport { withNativeProps } from '../../utils/native-props';\nimport { getScrollParent } from '../../utils/get-scroll-parent';\nimport DotLoading from '../dot-loading';\n\nfunction isWindow(element) {\n  return element === window;\n}\n\nvar classPrefix = \"adm-infinite-scroll\";\n\nvar InfiniteScrollContent = function InfiniteScrollContent(_ref) {\n  var hasMore = _ref.hasMore;\n  return React.createElement(React.Fragment, null, hasMore ? React.createElement(React.Fragment, null, React.createElement(\"span\", null, \"\\u52A0\\u8F7D\\u4E2D\"), React.createElement(DotLoading, null)) : React.createElement(\"span\", null, \"\\u6CA1\\u6709\\u66F4\\u591A\\u4E86\"));\n};\n\nexport var InfiniteScroll = function InfiniteScroll(p) {\n  var props = mergeProps({\n    threshold: 250\n  }, p);\n  var doLoadMore = useLockFn(function () {\n    return props.loadMore();\n  });\n  var elementRef = useRef(null);\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      flag = _useState2[0],\n      setFlag = _useState2[1];\n\n  var nextFlagRef = useRef(flag);\n  var check = useMemoizedFn(function () {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var element, parent, rect, elementTop, current, nextFlag;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(nextFlagRef.current !== flag)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              if (props.hasMore) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 4:\n              element = elementRef.current;\n\n              if (element) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 7:\n              if (element.offsetParent) {\n                _context.next = 9;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 9:\n              parent = getScrollParent(element);\n\n              if (parent) {\n                _context.next = 12;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 12:\n              rect = element.getBoundingClientRect();\n              elementTop = rect.top;\n              current = isWindow(parent) ? window.innerHeight : parent.getBoundingClientRect().bottom;\n\n              if (!(current >= elementTop - props.threshold)) {\n                _context.next = 21;\n                break;\n              }\n\n              nextFlag = {};\n              nextFlagRef.current = nextFlag;\n              _context.next = 20;\n              return doLoadMore();\n\n            case 20:\n              setFlag(nextFlag);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  }); // 确保在内容不足时会自动触发加载事件\n\n  useEffect(function () {\n    check();\n  });\n  useEffect(function () {\n    var element = elementRef.current;\n    if (!element) return;\n    var parent = getScrollParent(element);\n    if (!parent) return;\n\n    function onScroll() {\n      check();\n    }\n\n    parent.addEventListener('scroll', onScroll);\n    return function () {\n      parent.removeEventListener('scroll', onScroll);\n    };\n  }, []);\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix,\n    ref: elementRef\n  }, props.children && props.children, !props.children && React.createElement(InfiniteScrollContent, {\n    hasMore: props.hasMore\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}