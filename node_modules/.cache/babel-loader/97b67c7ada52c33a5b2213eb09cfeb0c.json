{"ast":null,"code":"import _defineProperty from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport React, { useEffect, useMemo } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { getTreeDeep } from '../../utils/tree';\nimport { mergeProps } from '../../utils/with-default-props';\nimport Checkbox from '../checkbox';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { devWarning } from '../../utils/dev-log';\nvar classPrefix = \"adm-tree-select-multiple\";\nexport var Multiple = function Multiple(p) {\n  var props = mergeProps({\n    options: [],\n    fieldNames: {},\n    allSelectText: [],\n    defaultExpandKeys: [],\n    defaultValue: []\n  }, p);\n  useEffect(function () {\n    devWarning('TreeSelect', 'TreeSelect.Multiple has been deprecated.');\n  }, []);\n  var labelName = props.fieldNames.label || 'label';\n  var valueName = props.fieldNames.value || 'value';\n  var childrenName = props.fieldNames.children || 'children'; // 打开的 keys\n\n  var _usePropsValue = usePropsValue({\n    value: props.expandKeys,\n    defaultValue: props.defaultExpandKeys\n  }),\n      _usePropsValue2 = _slicedToArray(_usePropsValue, 2),\n      expandKeys = _usePropsValue2[0],\n      setExpandKeys = _usePropsValue2[1]; // 选中的 value（聚合后）\n\n\n  var _usePropsValue3 = usePropsValue({\n    value: props.value,\n    defaultValue: props.defaultValue\n  }),\n      _usePropsValue4 = _slicedToArray(_usePropsValue3, 2),\n      value = _usePropsValue4[0],\n      setValue = _usePropsValue4[1]; // 获取目标所有叶子节点 key 集合\n\n\n  var getLeafKeys = function getLeafKeys(option) {\n    var keys = [];\n\n    var walker = function walker(op) {\n      var _a;\n\n      if (!op) {\n        return;\n      }\n\n      if ((_a = op[childrenName]) === null || _a === void 0 ? void 0 : _a.length) {\n        op[childrenName].forEach(function (i) {\n          return walker(i);\n        });\n      } else {\n        keys.push(op[valueName]);\n      }\n    };\n\n    walker(option);\n    return keys;\n  };\n\n  var _useMemo = useMemo(function () {\n    var deep = getTreeDeep(props.options, childrenName);\n    var optionsMap = new Map();\n    var optionsParentMap = new Map();\n\n    function traverse(current, children) {\n      children.forEach(function (item) {\n        optionsParentMap.set(item[valueName], current);\n        optionsMap.set(item[valueName], item);\n\n        if (item[childrenName]) {\n          traverse(item, item[childrenName]);\n        }\n      });\n    }\n\n    traverse(undefined, props.options);\n    return [deep, optionsMap, optionsParentMap];\n  }, [props.options]),\n      _useMemo2 = _slicedToArray(_useMemo, 3),\n      deep = _useMemo2[0],\n      optionsMap = _useMemo2[1],\n      optionsParentMap = _useMemo2[2]; // 将聚合的 value 拆分开，获得叶子节点的 value 集合\n\n\n  var allSelectedLeafKeys = useMemo(function () {\n    var leafKeys = [];\n    value.forEach(function (v) {\n      var option = optionsMap.get(v);\n      leafKeys = leafKeys.concat(getLeafKeys(option));\n    });\n    return leafKeys;\n  }, [value, optionsMap]); // 子级有被选中的节点集合\n\n  var dotMap = useMemo(function () {\n    var map = new Map(); // 遍历 allChildrenValues, 向上递归\n\n    var walker = function walker(key) {\n      var parentOption = optionsParentMap.get(key);\n\n      if (!parentOption) {\n        return;\n      }\n\n      map.set(parentOption[valueName], true);\n      walker(parentOption[valueName]);\n    };\n\n    allSelectedLeafKeys.forEach(function (key) {\n      map.set(key, true);\n      walker(key);\n    });\n    return map;\n  }, [optionsParentMap, value]);\n\n  var onChange = function onChange(targetKeys) {\n    var _a;\n\n    var groupKeys = _toConsumableArray(targetKeys);\n\n    var unusedKeys = [];\n\n    var walker = function walker(keys) {\n      keys.forEach(function (key) {\n        var _a;\n\n        if (unusedKeys.includes(key)) {\n          return;\n        }\n\n        var parent = optionsParentMap.get(key);\n\n        if (!parent) {\n          return;\n        }\n\n        var childrenKeys = ((_a = parent[childrenName]) === null || _a === void 0 ? void 0 : _a.map(function (i) {\n          return i[valueName];\n        })) || [];\n\n        if (childrenKeys.every(function (i) {\n          return groupKeys.includes(i);\n        })) {\n          groupKeys.push(parent[valueName]);\n          unusedKeys = unusedKeys.concat(childrenKeys);\n        }\n      });\n    }; // 遍历 deep 次 groupKeys，每次往上聚合一层\n\n\n    for (var i = 0; i < deep; i++) {\n      walker(groupKeys);\n    }\n\n    groupKeys = groupKeys.filter(function (i) {\n      return !unusedKeys.includes(i);\n    });\n    var groupOptions = groupKeys.map(function (i) {\n      return optionsMap.get(i);\n    });\n    setValue(groupKeys);\n    (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, groupKeys, groupOptions);\n  };\n\n  var onItemSelect = function onItemSelect(option) {\n    var _a;\n\n    var parentNodes = [];\n    var current = option;\n\n    while (current) {\n      parentNodes.unshift(current);\n      var next = optionsParentMap.get(current[valueName]);\n      current = next;\n    }\n\n    var keys = parentNodes.map(function (i) {\n      return i[valueName];\n    });\n    setExpandKeys(keys);\n    (_a = props.onExpand) === null || _a === void 0 ? void 0 : _a.call(props, keys, parentNodes);\n  }; // 渲染全选节点\n\n\n  var renderSelectAllItem = function renderSelectAllItem(columnOptions, index) {\n    var _a;\n\n    var text = (_a = props.selectAllText) === null || _a === void 0 ? void 0 : _a[index];\n\n    if (!text) {\n      return;\n    }\n\n    var currentLeafKeys = [];\n    columnOptions.forEach(function (option) {\n      currentLeafKeys = currentLeafKeys.concat(getLeafKeys(option));\n    });\n    var allSelected = currentLeafKeys.every(function (i) {\n      return allSelectedLeafKeys.includes(i);\n    });\n    return React.createElement(\"div\", {\n      onClick: function onClick() {\n        if (allSelected) {\n          onChange(allSelectedLeafKeys.filter(function (i) {\n            return !currentLeafKeys.includes(i);\n          }));\n        } else {\n          onChange(allSelectedLeafKeys.concat(currentLeafKeys));\n        }\n      },\n      className: \"\".concat(classPrefix, \"-item\")\n    }, text);\n  }; // 渲染\n\n\n  var renderSelectAllLeafItem = function renderSelectAllLeafItem(columnOptions, index) {\n    var _a;\n\n    var text = (_a = props.selectAllText) === null || _a === void 0 ? void 0 : _a[index];\n\n    if (!text) {\n      return;\n    }\n\n    var currentLeafKeys = columnOptions.map(function (i) {\n      return i[valueName];\n    });\n    var allSelected = currentLeafKeys.every(function (i) {\n      return allSelectedLeafKeys.includes(i);\n    });\n    var halfSelected = allSelected ? false : currentLeafKeys.some(function (i) {\n      return allSelectedLeafKeys.includes(i);\n    });\n    return React.createElement(\"div\", {\n      onClick: function onClick() {\n        if (allSelected) {\n          onChange(allSelectedLeafKeys.filter(function (i) {\n            return !currentLeafKeys.includes(i);\n          }));\n        } else {\n          onChange(allSelectedLeafKeys.concat(currentLeafKeys));\n        }\n      },\n      className: classNames(\"\".concat(classPrefix, \"-item\"), \"\".concat(classPrefix, \"-item-leaf\"))\n    }, React.createElement(Checkbox, {\n      className: \"\".concat(classPrefix, \"-item-checkbox\"),\n      checked: allSelected,\n      indeterminate: halfSelected\n    }), text);\n  }; // 渲染节点\n\n\n  var renderItem = function renderItem(option) {\n    var isExpand = expandKeys.includes(option[valueName]);\n    return React.createElement(\"div\", {\n      key: option[valueName],\n      onClick: function onClick() {\n        if (!isExpand) {\n          onItemSelect(option);\n        }\n      },\n      className: classNames(\"\".concat(classPrefix, \"-item\"), _defineProperty({}, \"\".concat(classPrefix, \"-item-expand\"), isExpand))\n    }, option[labelName], !!dotMap.get(option[valueName]) && React.createElement(\"div\", {\n      className: \"\".concat(classPrefix, \"-dot\")\n    }));\n  }; // 渲染叶子节点\n\n\n  var renderLeafItem = function renderLeafItem(option) {\n    var isSelected = allSelectedLeafKeys.includes(option[valueName]);\n    return React.createElement(\"div\", {\n      key: option[valueName],\n      onClick: function onClick() {\n        if (isSelected) {\n          onChange(allSelectedLeafKeys.filter(function (val) {\n            return val !== option[valueName];\n          }));\n        } else {\n          onChange([].concat(_toConsumableArray(allSelectedLeafKeys), [option[valueName]]));\n        }\n      },\n      className: classNames(\"\".concat(classPrefix, \"-item\"), \"\".concat(classPrefix, \"-item-leaf\"))\n    }, React.createElement(Checkbox, {\n      className: \"\".concat(classPrefix, \"-item-checkbox\"),\n      checked: isSelected\n    }), option[labelName]);\n  };\n\n  var renderItems = function renderItems() {\n    var columnOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var index = arguments.length > 1 ? arguments[1] : undefined;\n\n    if (columnOptions.length === 0) {\n      return;\n    }\n\n    var isLeaf = deep === index + 1;\n\n    if (isLeaf) {\n      return React.createElement(React.Fragment, null, renderSelectAllLeafItem(columnOptions, index), columnOptions.map(function (option) {\n        return renderLeafItem(option);\n      }));\n    }\n\n    return React.createElement(React.Fragment, null, renderSelectAllItem(columnOptions, index), columnOptions.map(function (option) {\n      return renderItem(option);\n    }));\n  };\n\n  var renderColumns = function renderColumns() {\n    var _a;\n\n    var columns = [];\n\n    for (var i = 0; i < deep; i++) {\n      var width = \"\".concat(100 / deep, \"%\"); // 两列的第一列宽度为 33.33，两列的第二列为 66.67%\n\n      if (deep === 2 && i === 0) {\n        width = \"33.33%\";\n      }\n\n      if (deep === 2 && i === 1) {\n        width = \"66.67%\";\n      }\n\n      var column = React.createElement(\"div\", {\n        key: i,\n        className: classNames(\"\".concat(classPrefix, \"-column\")),\n        style: {\n          width: width\n        }\n      }, renderItems(i === 0 ? props.options : (_a = optionsMap.get(expandKeys[i - 1])) === null || _a === void 0 ? void 0 : _a[childrenName], i));\n      columns.push(column);\n    }\n\n    return columns;\n  };\n\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, renderColumns()));\n};","map":null,"metadata":{},"sourceType":"module"}