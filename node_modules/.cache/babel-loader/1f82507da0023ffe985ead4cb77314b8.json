{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useEffect, useState } from 'react';\nimport useThrottleFn from '../useThrottleFn';\nimport useUnmount from '../useUnmount';\nimport useUpdateEffect from '../useUpdateEffect';\n\nfunction useThrottleEffect(effect, deps, options) {\n  var _a = __read(useState({}), 2),\n      flag = _a[0],\n      setFlag = _a[1];\n\n  var _b = useThrottleFn(function () {\n    setFlag({});\n  }, options),\n      run = _b.run,\n      cancel = _b.cancel;\n\n  useEffect(function () {\n    return run();\n  }, deps);\n  useUnmount(cancel);\n  useUpdateEffect(effect, [flag]);\n}\n\nexport default useThrottleEffect;","map":null,"metadata":{},"sourceType":"module"}