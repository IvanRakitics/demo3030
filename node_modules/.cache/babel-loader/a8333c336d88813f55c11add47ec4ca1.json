{"ast":null,"code":"import _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { createRef, forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { resolveContainer } from '../../utils/get-container';\nimport ReactDOM from 'react-dom';\nimport { InternalToast } from './toast';\nimport { mergeProps } from '../../utils/with-default-props';\nvar containers = [];\n\nfunction unmount(container) {\n  var unmountResult = ReactDOM.unmountComponentAtNode(container);\n\n  if (unmountResult && container.parentNode) {\n    container.parentNode.removeChild(container);\n  }\n}\n\nvar defaultProps = {\n  duration: 2000,\n  position: 'center',\n  maskClickable: true\n};\nexport function show(p) {\n  var props = mergeProps(defaultProps, typeof p === 'string' ? {\n    content: p\n  } : p);\n  var timer = 0;\n  var _props$getContainer = props.getContainer,\n      getContainer = _props$getContainer === void 0 ? function () {\n    return document.body;\n  } : _props$getContainer;\n  var container = document.createElement('div');\n  var bodyContainer = resolveContainer(getContainer);\n  bodyContainer.appendChild(container);\n  clear();\n  containers.push(container);\n  var TempToast = forwardRef(function (_, ref) {\n    var _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        visible = _useState2[0],\n        setVisible = _useState2[1];\n\n    useEffect(function () {\n      return function () {\n        var _a;\n\n        (_a = props.afterClose) === null || _a === void 0 ? void 0 : _a.call(props);\n      };\n    }, []);\n    useEffect(function () {\n      if (props.duration === 0) {\n        return;\n      }\n\n      timer = window.setTimeout(function () {\n        setVisible(false);\n      }, props.duration);\n      return function () {\n        window.clearTimeout(timer);\n      };\n    }, []);\n    useImperativeHandle(ref, function () {\n      return {\n        close: function close() {\n          return setVisible(false);\n        }\n      };\n    });\n    return React.createElement(InternalToast, Object.assign({}, props, {\n      getContainer: function getContainer() {\n        return container;\n      },\n      visible: visible,\n      afterClose: function afterClose() {\n        unmount(container);\n      }\n    }));\n  });\n  var ref = createRef();\n  ReactDOM.render(React.createElement(TempToast, {\n    ref: ref\n  }), container);\n  return {\n    close: function close() {\n      var _a;\n\n      (_a = ref.current) === null || _a === void 0 ? void 0 : _a.close();\n    }\n  };\n}\nexport function clear() {\n  while (true) {\n    var container = containers.pop();\n    if (!container) break;\n    unmount(container);\n  }\n}\nexport function config(val) {\n  if (val.duration !== undefined) {\n    defaultProps.duration = val.duration;\n  }\n\n  if (val.position !== undefined) {\n    defaultProps.position = val.position;\n  }\n\n  if (val.maskClickable !== undefined) {\n    defaultProps.maskClickable = val.maskClickable;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}