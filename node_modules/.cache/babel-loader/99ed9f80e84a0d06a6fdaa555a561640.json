{"ast":null,"code":"import _defineProperty from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport React, { forwardRef, useState, useImperativeHandle } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport dayjs from 'dayjs';\nimport classNames from 'classnames';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { ArrowLeft } from './arrow-left';\nimport { ArrowLeftDouble } from './arrow-left-double';\nimport { useConfig } from '../config-provider';\nimport isoWeek from 'dayjs/plugin/isoWeek';\nimport { useUpdateEffect } from 'ahooks';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { convertValueToRange } from './convert';\ndayjs.extend(isoWeek);\nvar classPrefix = 'adm-calendar';\nvar defaultProps = {\n  weekStartsOn: 'Sunday',\n  defaultValue: null,\n  allowClear: true\n};\nexport var Calendar = forwardRef(function (p, ref) {\n  var today = dayjs();\n  var props = mergeProps(defaultProps, p);\n\n  var _useConfig = useConfig(),\n      locale = _useConfig.locale;\n\n  var markItems = _toConsumableArray(locale.Calendar.markItems);\n\n  if (props.weekStartsOn === 'Sunday') {\n    var item = markItems.pop();\n    if (item) markItems.unshift(item);\n  }\n\n  var _usePropsValue = usePropsValue({\n    value: props.value === undefined ? undefined : convertValueToRange(props.selectionMode, props.value),\n    defaultValue: convertValueToRange(props.selectionMode, props.defaultValue),\n    onChange: function onChange(v) {\n      var _a, _b;\n\n      if (props.selectionMode === 'single') {\n        (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, v ? v[0] : null);\n      } else if (props.selectionMode === 'range') {\n        (_b = props.onChange) === null || _b === void 0 ? void 0 : _b.call(props, v);\n      }\n    }\n  }),\n      _usePropsValue2 = _slicedToArray(_usePropsValue, 2),\n      dateRange = _usePropsValue2[0],\n      setDateRange = _usePropsValue2[1];\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      intermediate = _useState2[0],\n      setIntermediate = _useState2[1];\n\n  var _useState3 = useState(function () {\n    return dayjs(dateRange ? dateRange[0] : today).date(1);\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      current = _useState4[0],\n      setCurrent = _useState4[1];\n\n  useUpdateEffect(function () {\n    var _a;\n\n    (_a = props.onPageChange) === null || _a === void 0 ? void 0 : _a.call(props, current.year(), current.month() + 1);\n  }, [current]);\n  useImperativeHandle(ref, function () {\n    return {\n      jumpTo: function jumpTo(pageOrPageGenerator) {\n        var page;\n\n        if (typeof pageOrPageGenerator === 'function') {\n          page = pageOrPageGenerator({\n            year: current.year(),\n            month: current.month() + 1\n          });\n        } else {\n          page = pageOrPageGenerator;\n        }\n\n        setCurrent(dayjs().year(page.year).month(page.month - 1));\n      },\n      jumpToToday: function jumpToToday() {\n        setCurrent(dayjs().date(1));\n      }\n    };\n  });\n  var header = React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-header\")\n  }, React.createElement(\"a\", {\n    className: \"\".concat(classPrefix, \"-arrow-button\"),\n    onClick: function onClick() {\n      setCurrent(current.subtract(1, 'year'));\n    }\n  }, React.createElement(ArrowLeftDouble, null)), React.createElement(\"a\", {\n    className: \"\".concat(classPrefix, \"-arrow-button\"),\n    onClick: function onClick() {\n      setCurrent(current.subtract(1, 'month'));\n    }\n  }, React.createElement(ArrowLeft, null)), React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-title\")\n  }, locale.Calendar.renderYearAndMonth(current.year(), current.month() + 1)), React.createElement(\"a\", {\n    className: \"\".concat(classPrefix, \"-arrow-button \").concat(classPrefix, \"-arrow-button-right\"),\n    onClick: function onClick() {\n      setCurrent(current.add(1, 'month'));\n    }\n  }, React.createElement(ArrowLeft, null)), React.createElement(\"a\", {\n    className: \"\".concat(classPrefix, \"-arrow-button \").concat(classPrefix, \"-arrow-button-right\"),\n    onClick: function onClick() {\n      setCurrent(current.add(1, 'year'));\n    }\n  }, React.createElement(ArrowLeftDouble, null)));\n\n  function renderCells() {\n    var _a;\n\n    var cells = [];\n    var iterator = current.subtract(current.isoWeekday(), 'day');\n\n    if (props.weekStartsOn === 'Monday') {\n      iterator = iterator.add(1, 'day');\n    }\n\n    var _loop = function _loop() {\n      var _ref;\n\n      var d = iterator;\n      var isSelect = false;\n      var isBegin = false;\n      var isEnd = false;\n\n      if (dateRange) {\n        var _dateRange = _slicedToArray(dateRange, 2),\n            begin = _dateRange[0],\n            end = _dateRange[1];\n\n        isBegin = d.isSame(begin, 'day');\n        isEnd = d.isSame(end, 'day');\n        isSelect = isBegin || isEnd || d.isAfter(begin, 'day') && d.isBefore(end, 'day');\n      }\n\n      var inThisMonth = d.month() === current.month();\n      cells.push(React.createElement(\"div\", {\n        key: d.valueOf(),\n        className: classNames(\"\".concat(classPrefix, \"-cell\"), inThisMonth ? \"\".concat(classPrefix, \"-cell-in\") : \"\".concat(classPrefix, \"-cell-out\"), inThisMonth && (_ref = {}, _defineProperty(_ref, \"\".concat(classPrefix, \"-cell-today\"), d.isSame(today, 'day')), _defineProperty(_ref, \"\".concat(classPrefix, \"-cell-selected\"), isSelect), _defineProperty(_ref, \"\".concat(classPrefix, \"-cell-selected-begin\"), isBegin), _defineProperty(_ref, \"\".concat(classPrefix, \"-cell-selected-end\"), isEnd), _ref)),\n        onClick: function onClick() {\n          if (!props.selectionMode) return;\n          var date = d.toDate();\n\n          if (!inThisMonth) {\n            setCurrent(d.clone().date(1));\n          }\n\n          function shouldClear() {\n            if (!props.allowClear) return false;\n            if (!dateRange) return false;\n\n            var _dateRange2 = _slicedToArray(dateRange, 2),\n                begin = _dateRange2[0],\n                end = _dateRange2[1];\n\n            return d.isSame(begin, 'date') && d.isSame(end, 'day');\n          }\n\n          if (props.selectionMode === 'single') {\n            if (props.allowClear && shouldClear()) {\n              setDateRange(null);\n              return;\n            }\n\n            setDateRange([date, date]);\n          } else if (props.selectionMode === 'range') {\n            if (!dateRange) {\n              setDateRange([date, date]);\n              setIntermediate(true);\n              return;\n            }\n\n            if (shouldClear()) {\n              setDateRange(null);\n              setIntermediate(false);\n              return;\n            }\n\n            if (intermediate) {\n              var another = dateRange[0];\n              setDateRange(another > date ? [date, another] : [another, date]);\n              setIntermediate(false);\n            } else {\n              setDateRange([date, date]);\n              setIntermediate(true);\n            }\n          }\n        }\n      }, React.createElement(\"div\", {\n        className: \"\".concat(classPrefix, \"-cell-top\")\n      }, d.date()), React.createElement(\"div\", {\n        className: \"\".concat(classPrefix, \"-cell-bottom\")\n      }, (_a = props.renderLabel) === null || _a === void 0 ? void 0 : _a.call(props, d.toDate()))));\n      iterator = iterator.add(1, 'day');\n    };\n\n    while (cells.length < 6 * 7) {\n      _loop();\n    }\n\n    return cells;\n  }\n\n  var body = React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-cells\")\n  }, renderCells());\n  var mark = React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-mark\")\n  }, markItems.map(function (item) {\n    return React.createElement(\"div\", {\n      key: item,\n      className: \"\".concat(classPrefix, \"-mark-cell\")\n    }, item);\n  }));\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, header, mark, body));\n});","map":null,"metadata":{},"sourceType":"module"}