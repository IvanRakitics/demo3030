{"ast":null,"code":"import React from 'react';\nimport classNames from 'classnames';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { withNativeProps } from '../../utils/native-props';\nconst classPrefix = `adm-steps`;\nconst stepClassPrefix = `adm-step`;\nconst defaultIcon = React.createElement(\"span\", {\n  className: `${stepClassPrefix}-icon-dot`\n});\nconst defaultProps = {\n  current: 0,\n  direction: 'horizontal'\n};\nexport const Steps = p => {\n  const props = mergeProps(defaultProps, p);\n  const {\n    direction,\n    current\n  } = props;\n  const classString = classNames(classPrefix, `${classPrefix}-${direction}`);\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classString\n  }, React.Children.map(props.children, (child, index) => {\n    var _a;\n\n    if (!React.isValidElement(child)) {\n      return child;\n    }\n\n    const props = child.props;\n    let status = props.status || 'wait';\n\n    if (index < current) {\n      status = props.status || 'finish';\n    } else if (index === current) {\n      status = props.status || 'process';\n    }\n\n    const icon = (_a = props.icon) !== null && _a !== void 0 ? _a : defaultIcon;\n    return React.cloneElement(child, {\n      status,\n      icon\n    });\n  })));\n};","map":{"version":3,"sources":["D:/react/project0330/node_modules/antd-mobile/es/components/steps/steps.js"],"names":["React","classNames","mergeProps","withNativeProps","classPrefix","stepClassPrefix","defaultIcon","createElement","className","defaultProps","current","direction","Steps","p","props","classString","Children","map","children","child","index","_a","isValidElement","status","icon","cloneElement"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,gCAA3B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,MAAMC,WAAW,GAAI,WAArB;AACA,MAAMC,eAAe,GAAI,UAAzB;AACA,MAAMC,WAAW,GAAGN,KAAK,CAACO,aAAN,CAAoB,MAApB,EAA4B;AAC9CC,EAAAA,SAAS,EAAG,GAAEH,eAAgB;AADgB,CAA5B,CAApB;AAGA,MAAMI,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,CADU;AAEnBC,EAAAA,SAAS,EAAE;AAFQ,CAArB;AAIA,OAAO,MAAMC,KAAK,GAAGC,CAAC,IAAI;AACxB,QAAMC,KAAK,GAAGZ,UAAU,CAACO,YAAD,EAAeI,CAAf,CAAxB;AACA,QAAM;AACJF,IAAAA,SADI;AAEJD,IAAAA;AAFI,MAGFI,KAHJ;AAIA,QAAMC,WAAW,GAAGd,UAAU,CAACG,WAAD,EAAe,GAAEA,WAAY,IAAGO,SAAU,EAA1C,CAA9B;AACA,SAAOR,eAAe,CAACW,KAAD,EAAQd,KAAK,CAACO,aAAN,CAAoB,KAApB,EAA2B;AACvDC,IAAAA,SAAS,EAAEO;AAD4C,GAA3B,EAE3Bf,KAAK,CAACgB,QAAN,CAAeC,GAAf,CAAmBH,KAAK,CAACI,QAAzB,EAAmC,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACtD,QAAIC,EAAJ;;AAEA,QAAI,CAACrB,KAAK,CAACsB,cAAN,CAAqBH,KAArB,CAAL,EAAkC;AAChC,aAAOA,KAAP;AACD;;AAED,UAAML,KAAK,GAAGK,KAAK,CAACL,KAApB;AACA,QAAIS,MAAM,GAAGT,KAAK,CAACS,MAAN,IAAgB,MAA7B;;AAEA,QAAIH,KAAK,GAAGV,OAAZ,EAAqB;AACnBa,MAAAA,MAAM,GAAGT,KAAK,CAACS,MAAN,IAAgB,QAAzB;AACD,KAFD,MAEO,IAAIH,KAAK,KAAKV,OAAd,EAAuB;AAC5Ba,MAAAA,MAAM,GAAGT,KAAK,CAACS,MAAN,IAAgB,SAAzB;AACD;;AAED,UAAMC,IAAI,GAAG,CAACH,EAAE,GAAGP,KAAK,CAACU,IAAZ,MAAsB,IAAtB,IAA8BH,EAAE,KAAK,KAAK,CAA1C,GAA8CA,EAA9C,GAAmDf,WAAhE;AACA,WAAON,KAAK,CAACyB,YAAN,CAAmBN,KAAnB,EAA0B;AAC/BI,MAAAA,MAD+B;AAE/BC,MAAAA;AAF+B,KAA1B,CAAP;AAID,GArBE,CAF2B,CAAR,CAAtB;AAwBD,CA/BM","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { withNativeProps } from '../../utils/native-props';\nconst classPrefix = `adm-steps`;\nconst stepClassPrefix = `adm-step`;\nconst defaultIcon = React.createElement(\"span\", {\n  className: `${stepClassPrefix}-icon-dot`\n});\nconst defaultProps = {\n  current: 0,\n  direction: 'horizontal'\n};\nexport const Steps = p => {\n  const props = mergeProps(defaultProps, p);\n  const {\n    direction,\n    current\n  } = props;\n  const classString = classNames(classPrefix, `${classPrefix}-${direction}`);\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classString\n  }, React.Children.map(props.children, (child, index) => {\n    var _a;\n\n    if (!React.isValidElement(child)) {\n      return child;\n    }\n\n    const props = child.props;\n    let status = props.status || 'wait';\n\n    if (index < current) {\n      status = props.status || 'finish';\n    } else if (index === current) {\n      status = props.status || 'process';\n    }\n\n    const icon = (_a = props.icon) !== null && _a !== void 0 ? _a : defaultIcon;\n    return React.cloneElement(child, {\n      status,\n      icon\n    });\n  })));\n};"]},"metadata":{},"sourceType":"module"}