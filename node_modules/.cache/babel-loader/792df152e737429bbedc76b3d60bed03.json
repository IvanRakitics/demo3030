{"ast":null,"code":"import _defineProperty from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { forwardRef, useRef, useState, useImperativeHandle } from 'react';\nimport classNames from 'classnames';\nimport { withNativeProps } from '../../utils/native-props';\nimport { useThrottleFn } from 'ahooks';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { Sidebar } from './sidebar';\nimport { convertPx } from '../../utils/convert-px';\nimport { Panel } from './panel';\nimport { devWarning } from '../../utils/dev-log';\nvar classPrefix = \"adm-index-bar\";\nvar defaultProps = {\n  sticky: true\n};\nexport var IndexBar = forwardRef(function (p, ref) {\n  var props = mergeProps(defaultProps, p);\n  var titleHeight = convertPx(35);\n  var bodyRef = useRef(null);\n  var indexItems = [];\n  var panels = [];\n  React.Children.forEach(props.children, function (child) {\n    var _a;\n\n    if (!React.isValidElement(child)) return;\n\n    if (child.type !== Panel) {\n      devWarning('IndexBar', 'The children of `IndexBar` must be `IndexBar.Panel` components.');\n      return;\n    }\n\n    indexItems.push({\n      index: child.props.index,\n      brief: (_a = child.props.brief) !== null && _a !== void 0 ? _a : child.props.index.charAt(0)\n    });\n    panels.push(withNativeProps(child.props, React.createElement(\"div\", {\n      key: child.props.index,\n      \"data-index\": child.props.index,\n      className: \"\".concat(classPrefix, \"-anchor\")\n    }, React.createElement(\"div\", {\n      className: \"\".concat(classPrefix, \"-anchor-title\")\n    }, child.props.title || child.props.index), child.props.children)));\n  });\n\n  var _useState = useState(function () {\n    var firstItem = indexItems[0];\n    return firstItem ? firstItem.index : null;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeIndex = _useState2[0],\n      setActiveIndex = _useState2[1];\n\n  useImperativeHandle(ref, function () {\n    return {\n      scrollTo: scrollTo\n    };\n  });\n\n  function scrollTo(index) {\n    var body = bodyRef.current;\n    if (!body) return;\n    var children = body.children;\n\n    for (var i = 0; i < children.length; i++) {\n      var panel = children.item(i);\n      if (!panel) continue;\n      var panelIndex = panel.dataset['index'];\n\n      if (panelIndex === index) {\n        body.scrollTop = panel.offsetTop;\n        setActiveIndex(index);\n        return;\n      }\n    }\n  }\n\n  var _useThrottleFn = useThrottleFn(function () {\n    var body = bodyRef.current;\n    if (!body) return;\n    var scrollTop = body.scrollTop;\n    var elements = body.getElementsByClassName(\"\".concat(classPrefix, \"-anchor\"));\n\n    for (var i = 0; i < elements.length; i++) {\n      var panel = elements.item(i);\n      if (!panel) continue;\n      var panelIndex = panel.dataset['index'];\n      if (!panelIndex) continue;\n\n      if (panel.offsetTop + panel.clientHeight - titleHeight > scrollTop) {\n        setActiveIndex(panelIndex);\n        return;\n      }\n    }\n  }, {\n    wait: 50,\n    trailing: true,\n    leading: true\n  }),\n      checkActiveIndex = _useThrottleFn.run;\n\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classNames(\"\".concat(classPrefix), _defineProperty({}, \"\".concat(classPrefix, \"-sticky\"), props.sticky))\n  }, React.createElement(Sidebar, {\n    indexItems: indexItems,\n    activeIndex: activeIndex,\n    onActive: function onActive(index) {\n      scrollTo(index);\n    }\n  }), React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-body\"),\n    ref: bodyRef,\n    onScroll: checkActiveIndex\n  }, panels)));\n});","map":null,"metadata":{},"sourceType":"module"}