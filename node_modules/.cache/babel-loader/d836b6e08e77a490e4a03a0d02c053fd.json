{"ast":null,"code":"import { useRef } from 'react';\nimport useUpdateEffect from '../../../useUpdateEffect';\nimport isDocumentVisible from '../utils/isDocumentVisible';\nimport subscribeReVisible from '../utils/subscribeReVisible';\n\nvar usePollingPlugin = function usePollingPlugin(fetchInstance, _a) {\n  var pollingInterval = _a.pollingInterval,\n      _b = _a.pollingWhenHidden,\n      pollingWhenHidden = _b === void 0 ? true : _b;\n  var timerRef = useRef();\n  var unsubscribeRef = useRef();\n\n  var stopPolling = function stopPolling() {\n    var _a;\n\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n    }\n\n    (_a = unsubscribeRef.current) === null || _a === void 0 ? void 0 : _a.call(unsubscribeRef);\n  };\n\n  useUpdateEffect(function () {\n    if (!pollingInterval) {\n      stopPolling();\n    }\n  }, [pollingInterval]);\n\n  if (!pollingInterval) {\n    return {};\n  }\n\n  return {\n    onBefore: function onBefore() {\n      stopPolling();\n    },\n    onFinally: function onFinally() {\n      // if pollingWhenHidden = false && document is hidden, then stop polling and subscribe revisible\n      if (!pollingWhenHidden && !isDocumentVisible()) {\n        unsubscribeRef.current = subscribeReVisible(function () {\n          fetchInstance.refresh();\n        });\n        return;\n      }\n\n      timerRef.current = setTimeout(function () {\n        fetchInstance.refresh();\n      }, pollingInterval);\n    },\n    onCancel: function onCancel() {\n      stopPolling();\n    }\n  };\n};\n\nexport default usePollingPlugin;","map":{"version":3,"sources":["D:/react/project0330/node_modules/ahooks/es/useRequest/src/plugins/usePollingPlugin.js"],"names":["useRef","useUpdateEffect","isDocumentVisible","subscribeReVisible","usePollingPlugin","fetchInstance","_a","pollingInterval","_b","pollingWhenHidden","timerRef","unsubscribeRef","stopPolling","current","clearTimeout","call","onBefore","onFinally","refresh","setTimeout","onCancel"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;;AAEA,IAAIC,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,aAA1B,EAAyCC,EAAzC,EAA6C;AAClE,MAAIC,eAAe,GAAGD,EAAE,CAACC,eAAzB;AAAA,MACIC,EAAE,GAAGF,EAAE,CAACG,iBADZ;AAAA,MAEIA,iBAAiB,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAF/C;AAGA,MAAIE,QAAQ,GAAGV,MAAM,EAArB;AACA,MAAIW,cAAc,GAAGX,MAAM,EAA3B;;AAEA,MAAIY,WAAW,GAAG,SAASA,WAAT,GAAuB;AACvC,QAAIN,EAAJ;;AAEA,QAAII,QAAQ,CAACG,OAAb,EAAsB;AACpBC,MAAAA,YAAY,CAACJ,QAAQ,CAACG,OAAV,CAAZ;AACD;;AAED,KAACP,EAAE,GAAGK,cAAc,CAACE,OAArB,MAAkC,IAAlC,IAA0CP,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAACS,IAAH,CAAQJ,cAAR,CAAnE;AACD,GARD;;AAUAV,EAAAA,eAAe,CAAC,YAAY;AAC1B,QAAI,CAACM,eAAL,EAAsB;AACpBK,MAAAA,WAAW;AACZ;AACF,GAJc,EAIZ,CAACL,eAAD,CAJY,CAAf;;AAMA,MAAI,CAACA,eAAL,EAAsB;AACpB,WAAO,EAAP;AACD;;AAED,SAAO;AACLS,IAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5BJ,MAAAA,WAAW;AACZ,KAHI;AAILK,IAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;AAC9B;AACA,UAAI,CAACR,iBAAD,IAAsB,CAACP,iBAAiB,EAA5C,EAAgD;AAC9CS,QAAAA,cAAc,CAACE,OAAf,GAAyBV,kBAAkB,CAAC,YAAY;AACtDE,UAAAA,aAAa,CAACa,OAAd;AACD,SAF0C,CAA3C;AAGA;AACD;;AAEDR,MAAAA,QAAQ,CAACG,OAAT,GAAmBM,UAAU,CAAC,YAAY;AACxCd,QAAAA,aAAa,CAACa,OAAd;AACD,OAF4B,EAE1BX,eAF0B,CAA7B;AAGD,KAhBI;AAiBLa,IAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5BR,MAAAA,WAAW;AACZ;AAnBI,GAAP;AAqBD,CAhDD;;AAkDA,eAAeR,gBAAf","sourcesContent":["import { useRef } from 'react';\nimport useUpdateEffect from '../../../useUpdateEffect';\nimport isDocumentVisible from '../utils/isDocumentVisible';\nimport subscribeReVisible from '../utils/subscribeReVisible';\n\nvar usePollingPlugin = function usePollingPlugin(fetchInstance, _a) {\n  var pollingInterval = _a.pollingInterval,\n      _b = _a.pollingWhenHidden,\n      pollingWhenHidden = _b === void 0 ? true : _b;\n  var timerRef = useRef();\n  var unsubscribeRef = useRef();\n\n  var stopPolling = function stopPolling() {\n    var _a;\n\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n    }\n\n    (_a = unsubscribeRef.current) === null || _a === void 0 ? void 0 : _a.call(unsubscribeRef);\n  };\n\n  useUpdateEffect(function () {\n    if (!pollingInterval) {\n      stopPolling();\n    }\n  }, [pollingInterval]);\n\n  if (!pollingInterval) {\n    return {};\n  }\n\n  return {\n    onBefore: function onBefore() {\n      stopPolling();\n    },\n    onFinally: function onFinally() {\n      // if pollingWhenHidden = false && document is hidden, then stop polling and subscribe revisible\n      if (!pollingWhenHidden && !isDocumentVisible()) {\n        unsubscribeRef.current = subscribeReVisible(function () {\n          fetchInstance.refresh();\n        });\n        return;\n      }\n\n      timerRef.current = setTimeout(function () {\n        fetchInstance.refresh();\n      }, pollingInterval);\n    },\n    onCancel: function onCancel() {\n      stopPolling();\n    }\n  };\n};\n\nexport default usePollingPlugin;"]},"metadata":{},"sourceType":"module"}