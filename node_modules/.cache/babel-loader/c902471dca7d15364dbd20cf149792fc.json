{"ast":null,"code":"import { useEffect } from 'react';\nimport useLatest from '../useLatest';\n\nvar setRafTimeout = function setRafTimeout(callback, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n\n  if (typeof requestAnimationFrame === typeof undefined) {\n    return {\n      id: setTimeout(callback, delay)\n    };\n  }\n\n  var handle = {\n    id: 0\n  };\n  var startTime = new Date().getTime();\n\n  var loop = function loop() {\n    var current = new Date().getTime();\n\n    if (current - startTime >= delay) {\n      callback();\n    } else {\n      handle.id = requestAnimationFrame(loop);\n    }\n  };\n\n  handle.id = requestAnimationFrame(loop);\n  return handle;\n};\n\nfunction cancelAnimationFrameIsNotDefined(t) {\n  return typeof cancelAnimationFrame === typeof undefined;\n}\n\nvar clearRafTimeout = function clearRafTimeout(handle) {\n  if (cancelAnimationFrameIsNotDefined(handle.id)) {\n    return clearTimeout(handle.id);\n  }\n\n  cancelAnimationFrame(handle.id);\n};\n\nfunction useRafTimeout(fn, delay) {\n  var fnRef = useLatest(fn);\n  useEffect(function () {\n    if (typeof delay !== 'number' || delay < 0) return;\n    var timer = setRafTimeout(function () {\n      fnRef.current();\n    }, delay);\n    return function () {\n      clearRafTimeout(timer);\n    };\n  }, [delay]);\n}\n\nexport default useRafTimeout;","map":null,"metadata":{},"sourceType":"module"}