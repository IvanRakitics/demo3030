{"ast":null,"code":"import _toConsumableArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { mergeProps } from '../../utils/with-default-props';\nimport Space from '../space';\nimport Grid from '../grid';\nimport { convertPx } from '../../utils/convert-px';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { CheckMark } from './check-mark';\nvar classPrefix = \"adm-selector\";\nvar defaultProps = {\n  multiple: false,\n  defaultValue: [],\n  showCheckMark: true\n};\nexport var Selector = function Selector(p) {\n  var props = mergeProps(defaultProps, p);\n\n  var _usePropsValue = usePropsValue({\n    value: props.value,\n    defaultValue: props.defaultValue,\n    onChange: function onChange(val) {\n      var _a;\n\n      var extend = {\n        get items() {\n          return props.options.filter(function (option) {\n            return val.includes(option.value);\n          });\n        }\n\n      };\n      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, val, extend);\n    }\n  }),\n      _usePropsValue2 = _slicedToArray(_usePropsValue, 2),\n      value = _usePropsValue2[0],\n      setValue = _usePropsValue2[1];\n\n  var items = props.options.map(function (option) {\n    var _classNames;\n\n    var active = (value || []).includes(option.value);\n    var disabled = option.disabled || props.disabled;\n    var itemCls = classNames(\"\".concat(classPrefix, \"-item\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(classPrefix, \"-item-active\"), active && !props.multiple), _defineProperty(_classNames, \"\".concat(classPrefix, \"-item-multiple-active\"), active && props.multiple), _defineProperty(_classNames, \"\".concat(classPrefix, \"-item-disabled\"), disabled), _classNames));\n    return React.createElement(\"div\", {\n      key: option.value,\n      className: itemCls,\n      onClick: function onClick() {\n        if (disabled) {\n          return;\n        }\n\n        if (props.multiple) {\n          var val = active ? value.filter(function (v) {\n            return v !== option.value;\n          }) : [].concat(_toConsumableArray(value), [option.value]);\n          setValue(val);\n        } else {\n          var _val = active ? [] : [option.value];\n\n          setValue(_val);\n        }\n      }\n    }, option.label, option.description && React.createElement(\"div\", {\n      className: \"\".concat(classPrefix, \"-item-description\")\n    }, option.description), active && props.showCheckMark && React.createElement(\"div\", {\n      className: \"\".concat(classPrefix, \"-check-mark-wrapper\")\n    }, React.createElement(CheckMark, null)));\n  });\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, !props.columns && React.createElement(Space, {\n    wrap: true\n  }, items), props.columns && React.createElement(Grid, {\n    columns: props.columns,\n    gap: convertPx(8)\n  }, items)));\n};","map":null,"metadata":{},"sourceType":"module"}