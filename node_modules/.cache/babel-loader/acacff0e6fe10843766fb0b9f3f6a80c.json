{"ast":null,"code":"import _defineProperty from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useContext } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport classNames from 'classnames';\nimport { CheckboxGroupContext } from './group-context';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { devWarning } from '../../utils/dev-log';\nimport { CheckIcon } from './check-icon';\nimport { IndeterminateIcon } from './indeterminate-icon';\nimport { isDev } from '../../utils/is-dev';\nimport { NativeInput } from './native-input';\nvar classPrefix = \"adm-checkbox\";\nvar defaultProps = {\n  defaultChecked: false,\n  indeterminate: false\n};\nexport var Checkbox = function Checkbox(p) {\n  var _classNames;\n\n  var groupContext = useContext(CheckboxGroupContext);\n  var props = mergeProps(defaultProps, p);\n\n  var _usePropsValue = usePropsValue({\n    value: props.checked,\n    defaultValue: props.defaultChecked,\n    onChange: props.onChange\n  }),\n      _usePropsValue2 = _slicedToArray(_usePropsValue, 2),\n      checked = _usePropsValue2[0],\n      setChecked = _usePropsValue2[1];\n\n  var disabled = props.disabled;\n  var value = props.value;\n\n  if (groupContext && value !== undefined) {\n    if (isDev) {\n      if (p.checked !== undefined) {\n        devWarning('Checkbox', 'When used within `Checkbox.Group`, the `checked` prop of `Checkbox` will not work.');\n      }\n\n      if (p.defaultChecked !== undefined) {\n        devWarning('Checkbox', 'When used within `Checkbox.Group`, the `defaultChecked` prop of `Checkbox` will not work.');\n      }\n    }\n\n    checked = groupContext.value.includes(value);\n\n    setChecked = function setChecked(checked) {\n      var _a;\n\n      if (checked) {\n        groupContext.check(value);\n      } else {\n        groupContext.uncheck(value);\n      }\n\n      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, checked);\n    };\n\n    disabled = disabled || groupContext.disabled;\n  }\n\n  var renderIcon = function renderIcon() {\n    if (props.icon) {\n      return React.createElement(\"div\", {\n        className: \"\".concat(classPrefix, \"-custom-icon\")\n      }, props.icon(checked, props.indeterminate));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"\".concat(classPrefix, \"-icon\")\n    }, props.indeterminate ? React.createElement(IndeterminateIcon, null) : checked && React.createElement(CheckIcon, null));\n  };\n\n  return withNativeProps(props, React.createElement(\"label\", {\n    className: classNames(classPrefix, (_classNames = {}, _defineProperty(_classNames, \"\".concat(classPrefix, \"-checked\"), checked && !props.indeterminate), _defineProperty(_classNames, \"\".concat(classPrefix, \"-indeterminate\"), props.indeterminate), _defineProperty(_classNames, \"\".concat(classPrefix, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(classPrefix, \"-block\"), props.block), _classNames))\n  }, React.createElement(NativeInput, {\n    type: 'checkbox',\n    checked: checked,\n    onChange: setChecked,\n    disabled: disabled,\n    id: props.id\n  }), renderIcon(), props.children && React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-content\")\n  }, props.children)));\n};","map":null,"metadata":{},"sourceType":"module"}