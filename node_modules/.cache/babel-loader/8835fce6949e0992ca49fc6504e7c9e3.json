{"ast":null,"code":"import React, { useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { renderToBody } from './render-to-body';\nexport function renderImperatively(element) {\n  const Wrapper = React.forwardRef((_, ref) => {\n    const [visible, setVisible] = useState(false);\n    const closedRef = useRef(false);\n    useEffect(() => {\n      if (!closedRef.current) {\n        setVisible(true);\n      } else {\n        afterClose();\n      }\n    }, []);\n\n    function onClose() {\n      var _a, _b;\n\n      closedRef.current = true;\n      setVisible(false);\n      (_b = (_a = element.props).onClose) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n\n    function afterClose() {\n      var _a, _b;\n\n      unmount();\n      (_b = (_a = element.props).afterClose) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n\n    useImperativeHandle(ref, () => ({\n      close: onClose\n    }));\n    return React.cloneElement(element, Object.assign(Object.assign({}, element.props), {\n      visible,\n      onClose,\n      afterClose\n    }));\n  });\n  const wrapperRef = React.createRef();\n  const unmount = renderToBody(React.createElement(Wrapper, {\n    ref: wrapperRef\n  }));\n\n  function close() {\n    var _a;\n\n    (_a = wrapperRef.current) === null || _a === void 0 ? void 0 : _a.close();\n  }\n\n  return {\n    close\n  };\n}","map":{"version":3,"sources":["D:/react/project0330/node_modules/antd-mobile/es/utils/render-imperatively.js"],"names":["React","useEffect","useImperativeHandle","useRef","useState","renderToBody","renderImperatively","element","Wrapper","forwardRef","_","ref","visible","setVisible","closedRef","current","afterClose","onClose","_a","_b","props","call","unmount","close","cloneElement","Object","assign","wrapperRef","createRef","createElement"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,mBAA3B,EAAgDC,MAAhD,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAO,SAASC,kBAAT,CAA4BC,OAA5B,EAAqC;AAC1C,QAAMC,OAAO,GAAGR,KAAK,CAACS,UAAN,CAAiB,CAACC,CAAD,EAAIC,GAAJ,KAAY;AAC3C,UAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AACA,UAAMU,SAAS,GAAGX,MAAM,CAAC,KAAD,CAAxB;AACAF,IAAAA,SAAS,CAAC,MAAM;AACd,UAAI,CAACa,SAAS,CAACC,OAAf,EAAwB;AACtBF,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD,OAFD,MAEO;AACLG,QAAAA,UAAU;AACX;AACF,KANQ,EAMN,EANM,CAAT;;AAQA,aAASC,OAAT,GAAmB;AACjB,UAAIC,EAAJ,EAAQC,EAAR;;AAEAL,MAAAA,SAAS,CAACC,OAAV,GAAoB,IAApB;AACAF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,OAACM,EAAE,GAAG,CAACD,EAAE,GAAGX,OAAO,CAACa,KAAd,EAAqBH,OAA3B,MAAwC,IAAxC,IAAgDE,EAAE,KAAK,KAAK,CAA5D,GAAgE,KAAK,CAArE,GAAyEA,EAAE,CAACE,IAAH,CAAQH,EAAR,CAAzE;AACD;;AAED,aAASF,UAAT,GAAsB;AACpB,UAAIE,EAAJ,EAAQC,EAAR;;AAEAG,MAAAA,OAAO;AACP,OAACH,EAAE,GAAG,CAACD,EAAE,GAAGX,OAAO,CAACa,KAAd,EAAqBJ,UAA3B,MAA2C,IAA3C,IAAmDG,EAAE,KAAK,KAAK,CAA/D,GAAmE,KAAK,CAAxE,GAA4EA,EAAE,CAACE,IAAH,CAAQH,EAAR,CAA5E;AACD;;AAEDhB,IAAAA,mBAAmB,CAACS,GAAD,EAAM,OAAO;AAC9BY,MAAAA,KAAK,EAAEN;AADuB,KAAP,CAAN,CAAnB;AAGA,WAAOjB,KAAK,CAACwB,YAAN,CAAmBjB,OAAnB,EAA4BkB,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnB,OAAO,CAACa,KAA1B,CAAd,EAAgD;AACjFR,MAAAA,OADiF;AAEjFK,MAAAA,OAFiF;AAGjFD,MAAAA;AAHiF,KAAhD,CAA5B,CAAP;AAKD,GAlCe,CAAhB;AAmCA,QAAMW,UAAU,GAAG3B,KAAK,CAAC4B,SAAN,EAAnB;AACA,QAAMN,OAAO,GAAGjB,YAAY,CAACL,KAAK,CAAC6B,aAAN,CAAoBrB,OAApB,EAA6B;AACxDG,IAAAA,GAAG,EAAEgB;AADmD,GAA7B,CAAD,CAA5B;;AAIA,WAASJ,KAAT,GAAiB;AACf,QAAIL,EAAJ;;AAEA,KAACA,EAAE,GAAGS,UAAU,CAACZ,OAAjB,MAA8B,IAA9B,IAAsCG,EAAE,KAAK,KAAK,CAAlD,GAAsD,KAAK,CAA3D,GAA+DA,EAAE,CAACK,KAAH,EAA/D;AACD;;AAED,SAAO;AACLA,IAAAA;AADK,GAAP;AAGD","sourcesContent":["import React, { useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { renderToBody } from './render-to-body';\nexport function renderImperatively(element) {\n  const Wrapper = React.forwardRef((_, ref) => {\n    const [visible, setVisible] = useState(false);\n    const closedRef = useRef(false);\n    useEffect(() => {\n      if (!closedRef.current) {\n        setVisible(true);\n      } else {\n        afterClose();\n      }\n    }, []);\n\n    function onClose() {\n      var _a, _b;\n\n      closedRef.current = true;\n      setVisible(false);\n      (_b = (_a = element.props).onClose) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n\n    function afterClose() {\n      var _a, _b;\n\n      unmount();\n      (_b = (_a = element.props).afterClose) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n\n    useImperativeHandle(ref, () => ({\n      close: onClose\n    }));\n    return React.cloneElement(element, Object.assign(Object.assign({}, element.props), {\n      visible,\n      onClose,\n      afterClose\n    }));\n  });\n  const wrapperRef = React.createRef();\n  const unmount = renderToBody(React.createElement(Wrapper, {\n    ref: wrapperRef\n  }));\n\n  function close() {\n    var _a;\n\n    (_a = wrapperRef.current) === null || _a === void 0 ? void 0 : _a.close();\n  }\n\n  return {\n    close\n  };\n}"]},"metadata":{},"sourceType":"module"}