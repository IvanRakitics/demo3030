{"ast":null,"code":"import { useMemo } from 'react';\nexport function useCascadePickerOptions(options) {\n  return useMemo(() => {\n    let depth = 1;\n    const subOptionsRecord = {};\n\n    function traverse(option, currentDepth) {\n      if (!option.children) {\n        return;\n      }\n\n      subOptionsRecord[option.value] = option.children;\n      const nextDepth = currentDepth + 1;\n\n      if (nextDepth > depth) {\n        depth = nextDepth;\n      }\n\n      option.children.forEach(option => {\n        traverse(option, nextDepth);\n      });\n    }\n\n    options.forEach(option => {\n      traverse(option, 1);\n    });\n    return {\n      depth,\n      subOptionsRecord\n    };\n  }, [options]);\n}","map":{"version":3,"sources":["D:/react/project0330/node_modules/antd-mobile/es/components/cascade-picker/use-cascade-picker-options.js"],"names":["useMemo","useCascadePickerOptions","options","depth","subOptionsRecord","traverse","option","currentDepth","children","value","nextDepth","forEach"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAO,SAASC,uBAAT,CAAiCC,OAAjC,EAA0C;AAC/C,SAAOF,OAAO,CAAC,MAAM;AACnB,QAAIG,KAAK,GAAG,CAAZ;AACA,UAAMC,gBAAgB,GAAG,EAAzB;;AAEA,aAASC,QAAT,CAAkBC,MAAlB,EAA0BC,YAA1B,EAAwC;AACtC,UAAI,CAACD,MAAM,CAACE,QAAZ,EAAsB;AACpB;AACD;;AAEDJ,MAAAA,gBAAgB,CAACE,MAAM,CAACG,KAAR,CAAhB,GAAiCH,MAAM,CAACE,QAAxC;AACA,YAAME,SAAS,GAAGH,YAAY,GAAG,CAAjC;;AAEA,UAAIG,SAAS,GAAGP,KAAhB,EAAuB;AACrBA,QAAAA,KAAK,GAAGO,SAAR;AACD;;AAEDJ,MAAAA,MAAM,CAACE,QAAP,CAAgBG,OAAhB,CAAwBL,MAAM,IAAI;AAChCD,QAAAA,QAAQ,CAACC,MAAD,EAASI,SAAT,CAAR;AACD,OAFD;AAGD;;AAEDR,IAAAA,OAAO,CAACS,OAAR,CAAgBL,MAAM,IAAI;AACxBD,MAAAA,QAAQ,CAACC,MAAD,EAAS,CAAT,CAAR;AACD,KAFD;AAGA,WAAO;AACLH,MAAAA,KADK;AAELC,MAAAA;AAFK,KAAP;AAID,GA5Ba,EA4BX,CAACF,OAAD,CA5BW,CAAd;AA6BD","sourcesContent":["import { useMemo } from 'react';\nexport function useCascadePickerOptions(options) {\n  return useMemo(() => {\n    let depth = 1;\n    const subOptionsRecord = {};\n\n    function traverse(option, currentDepth) {\n      if (!option.children) {\n        return;\n      }\n\n      subOptionsRecord[option.value] = option.children;\n      const nextDepth = currentDepth + 1;\n\n      if (nextDepth > depth) {\n        depth = nextDepth;\n      }\n\n      option.children.forEach(option => {\n        traverse(option, nextDepth);\n      });\n    }\n\n    options.forEach(option => {\n      traverse(option, 1);\n    });\n    return {\n      depth,\n      subOptionsRecord\n    };\n  }, [options]);\n}"]},"metadata":{},"sourceType":"module"}