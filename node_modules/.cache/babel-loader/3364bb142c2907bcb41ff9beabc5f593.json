{"ast":null,"code":"import classNames from 'classnames';\nimport React, { useEffect, useMemo } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { getTreeDeep } from '../../utils/tree';\nimport { mergeProps } from '../../utils/with-default-props';\nimport Checkbox from '../checkbox';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { devWarning } from '../../utils/dev-log';\nconst classPrefix = `adm-tree-select-multiple`;\nexport const Multiple = p => {\n  const props = mergeProps({\n    options: [],\n    fieldNames: {},\n    allSelectText: [],\n    defaultExpandKeys: [],\n    defaultValue: []\n  }, p);\n  useEffect(() => {\n    devWarning('TreeSelect', 'TreeSelect.Multiple has been deprecated.');\n  }, []);\n  const labelName = props.fieldNames.label || 'label';\n  const valueName = props.fieldNames.value || 'value';\n  const childrenName = props.fieldNames.children || 'children'; // 打开的 keys\n\n  const [expandKeys, setExpandKeys] = usePropsValue({\n    value: props.expandKeys,\n    defaultValue: props.defaultExpandKeys\n  }); // 选中的 value（聚合后）\n\n  const [value, setValue] = usePropsValue({\n    value: props.value,\n    defaultValue: props.defaultValue\n  }); // 获取目标所有叶子节点 key 集合\n\n  const getLeafKeys = option => {\n    const keys = [];\n\n    const walker = op => {\n      var _a;\n\n      if (!op) {\n        return;\n      }\n\n      if ((_a = op[childrenName]) === null || _a === void 0 ? void 0 : _a.length) {\n        op[childrenName].forEach(i => walker(i));\n      } else {\n        keys.push(op[valueName]);\n      }\n    };\n\n    walker(option);\n    return keys;\n  };\n\n  const [deep, optionsMap, optionsParentMap] = useMemo(() => {\n    const deep = getTreeDeep(props.options, childrenName);\n    const optionsMap = new Map();\n    const optionsParentMap = new Map();\n\n    function traverse(current, children) {\n      children.forEach(item => {\n        optionsParentMap.set(item[valueName], current);\n        optionsMap.set(item[valueName], item);\n\n        if (item[childrenName]) {\n          traverse(item, item[childrenName]);\n        }\n      });\n    }\n\n    traverse(undefined, props.options);\n    return [deep, optionsMap, optionsParentMap];\n  }, [props.options]); // 将聚合的 value 拆分开，获得叶子节点的 value 集合\n\n  const allSelectedLeafKeys = useMemo(() => {\n    let leafKeys = [];\n    value.forEach(v => {\n      const option = optionsMap.get(v);\n      leafKeys = leafKeys.concat(getLeafKeys(option));\n    });\n    return leafKeys;\n  }, [value, optionsMap]); // 子级有被选中的节点集合\n\n  const dotMap = useMemo(() => {\n    const map = new Map(); // 遍历 allChildrenValues, 向上递归\n\n    const walker = key => {\n      const parentOption = optionsParentMap.get(key);\n\n      if (!parentOption) {\n        return;\n      }\n\n      map.set(parentOption[valueName], true);\n      walker(parentOption[valueName]);\n    };\n\n    allSelectedLeafKeys.forEach(key => {\n      map.set(key, true);\n      walker(key);\n    });\n    return map;\n  }, [optionsParentMap, value]);\n\n  const onChange = targetKeys => {\n    var _a;\n\n    let groupKeys = [...targetKeys];\n    let unusedKeys = [];\n\n    const walker = keys => {\n      keys.forEach(key => {\n        var _a;\n\n        if (unusedKeys.includes(key)) {\n          return;\n        }\n\n        const parent = optionsParentMap.get(key);\n\n        if (!parent) {\n          return;\n        }\n\n        const childrenKeys = ((_a = parent[childrenName]) === null || _a === void 0 ? void 0 : _a.map(i => i[valueName])) || [];\n\n        if (childrenKeys.every(i => groupKeys.includes(i))) {\n          groupKeys.push(parent[valueName]);\n          unusedKeys = unusedKeys.concat(childrenKeys);\n        }\n      });\n    }; // 遍历 deep 次 groupKeys，每次往上聚合一层\n\n\n    for (let i = 0; i < deep; i++) {\n      walker(groupKeys);\n    }\n\n    groupKeys = groupKeys.filter(i => !unusedKeys.includes(i));\n    const groupOptions = groupKeys.map(i => optionsMap.get(i));\n    setValue(groupKeys);\n    (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, groupKeys, groupOptions);\n  };\n\n  const onItemSelect = option => {\n    var _a;\n\n    const parentNodes = [];\n    let current = option;\n\n    while (current) {\n      parentNodes.unshift(current);\n      const next = optionsParentMap.get(current[valueName]);\n      current = next;\n    }\n\n    const keys = parentNodes.map(i => i[valueName]);\n    setExpandKeys(keys);\n    (_a = props.onExpand) === null || _a === void 0 ? void 0 : _a.call(props, keys, parentNodes);\n  }; // 渲染全选节点\n\n\n  const renderSelectAllItem = (columnOptions, index) => {\n    var _a;\n\n    const text = (_a = props.selectAllText) === null || _a === void 0 ? void 0 : _a[index];\n\n    if (!text) {\n      return;\n    }\n\n    let currentLeafKeys = [];\n    columnOptions.forEach(option => {\n      currentLeafKeys = currentLeafKeys.concat(getLeafKeys(option));\n    });\n    const allSelected = currentLeafKeys.every(i => allSelectedLeafKeys.includes(i));\n    return React.createElement(\"div\", {\n      onClick: () => {\n        if (allSelected) {\n          onChange(allSelectedLeafKeys.filter(i => !currentLeafKeys.includes(i)));\n        } else {\n          onChange(allSelectedLeafKeys.concat(currentLeafKeys));\n        }\n      },\n      className: `${classPrefix}-item`\n    }, text);\n  }; // 渲染\n\n\n  const renderSelectAllLeafItem = (columnOptions, index) => {\n    var _a;\n\n    const text = (_a = props.selectAllText) === null || _a === void 0 ? void 0 : _a[index];\n\n    if (!text) {\n      return;\n    }\n\n    const currentLeafKeys = columnOptions.map(i => i[valueName]);\n    const allSelected = currentLeafKeys.every(i => allSelectedLeafKeys.includes(i));\n    const halfSelected = allSelected ? false : currentLeafKeys.some(i => allSelectedLeafKeys.includes(i));\n    return React.createElement(\"div\", {\n      onClick: () => {\n        if (allSelected) {\n          onChange(allSelectedLeafKeys.filter(i => !currentLeafKeys.includes(i)));\n        } else {\n          onChange(allSelectedLeafKeys.concat(currentLeafKeys));\n        }\n      },\n      className: classNames(`${classPrefix}-item`, `${classPrefix}-item-leaf`)\n    }, React.createElement(Checkbox, {\n      className: `${classPrefix}-item-checkbox`,\n      checked: allSelected,\n      indeterminate: halfSelected\n    }), text);\n  }; // 渲染节点\n\n\n  const renderItem = option => {\n    const isExpand = expandKeys.includes(option[valueName]);\n    return React.createElement(\"div\", {\n      key: option[valueName],\n      onClick: () => {\n        if (!isExpand) {\n          onItemSelect(option);\n        }\n      },\n      className: classNames(`${classPrefix}-item`, {\n        [`${classPrefix}-item-expand`]: isExpand\n      })\n    }, option[labelName], !!dotMap.get(option[valueName]) && React.createElement(\"div\", {\n      className: `${classPrefix}-dot`\n    }));\n  }; // 渲染叶子节点\n\n\n  const renderLeafItem = option => {\n    const isSelected = allSelectedLeafKeys.includes(option[valueName]);\n    return React.createElement(\"div\", {\n      key: option[valueName],\n      onClick: () => {\n        if (isSelected) {\n          onChange(allSelectedLeafKeys.filter(val => val !== option[valueName]));\n        } else {\n          onChange([...allSelectedLeafKeys, option[valueName]]);\n        }\n      },\n      className: classNames(`${classPrefix}-item`, `${classPrefix}-item-leaf`)\n    }, React.createElement(Checkbox, {\n      className: `${classPrefix}-item-checkbox`,\n      checked: isSelected\n    }), option[labelName]);\n  };\n\n  const renderItems = function () {\n    let columnOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let index = arguments.length > 1 ? arguments[1] : undefined;\n\n    if (columnOptions.length === 0) {\n      return;\n    }\n\n    const isLeaf = deep === index + 1;\n\n    if (isLeaf) {\n      return React.createElement(React.Fragment, null, renderSelectAllLeafItem(columnOptions, index), columnOptions.map(option => {\n        return renderLeafItem(option);\n      }));\n    }\n\n    return React.createElement(React.Fragment, null, renderSelectAllItem(columnOptions, index), columnOptions.map(option => {\n      return renderItem(option);\n    }));\n  };\n\n  const renderColumns = () => {\n    var _a;\n\n    const columns = [];\n\n    for (let i = 0; i < deep; i++) {\n      let width = `${100 / deep}%`; // 两列的第一列宽度为 33.33，两列的第二列为 66.67%\n\n      if (deep === 2 && i === 0) {\n        width = `33.33%`;\n      }\n\n      if (deep === 2 && i === 1) {\n        width = `66.67%`;\n      }\n\n      const column = React.createElement(\"div\", {\n        key: i,\n        className: classNames(`${classPrefix}-column`),\n        style: {\n          width\n        }\n      }, renderItems(i === 0 ? props.options : (_a = optionsMap.get(expandKeys[i - 1])) === null || _a === void 0 ? void 0 : _a[childrenName], i));\n      columns.push(column);\n    }\n\n    return columns;\n  };\n\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, renderColumns()));\n};","map":{"version":3,"sources":["D:/react/project0330/node_modules/antd-mobile/es/components/tree-select/multiple.js"],"names":["classNames","React","useEffect","useMemo","withNativeProps","getTreeDeep","mergeProps","Checkbox","usePropsValue","devWarning","classPrefix","Multiple","p","props","options","fieldNames","allSelectText","defaultExpandKeys","defaultValue","labelName","label","valueName","value","childrenName","children","expandKeys","setExpandKeys","setValue","getLeafKeys","option","keys","walker","op","_a","length","forEach","i","push","deep","optionsMap","optionsParentMap","Map","traverse","current","item","set","undefined","allSelectedLeafKeys","leafKeys","v","get","concat","dotMap","map","key","parentOption","onChange","targetKeys","groupKeys","unusedKeys","includes","parent","childrenKeys","every","filter","groupOptions","call","onItemSelect","parentNodes","unshift","next","onExpand","renderSelectAllItem","columnOptions","index","text","selectAllText","currentLeafKeys","allSelected","createElement","onClick","className","renderSelectAllLeafItem","halfSelected","some","checked","indeterminate","renderItem","isExpand","renderLeafItem","isSelected","val","renderItems","isLeaf","Fragment","renderColumns","columns","width","column","style"],"mappings":"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","sourcesContent":["import classNames from 'classnames';\nimport React, { useEffect, useMemo } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { getTreeDeep } from '../../utils/tree';\nimport { mergeProps } from '../../utils/with-default-props';\nimport Checkbox from '../checkbox';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { devWarning } from '../../utils/dev-log';\nconst classPrefix = `adm-tree-select-multiple`;\nexport const Multiple = p => {\n  const props = mergeProps({\n    options: [],\n    fieldNames: {},\n    allSelectText: [],\n    defaultExpandKeys: [],\n    defaultValue: []\n  }, p);\n  useEffect(() => {\n    devWarning('TreeSelect', 'TreeSelect.Multiple has been deprecated.');\n  }, []);\n  const labelName = props.fieldNames.label || 'label';\n  const valueName = props.fieldNames.value || 'value';\n  const childrenName = props.fieldNames.children || 'children'; // 打开的 keys\n\n  const [expandKeys, setExpandKeys] = usePropsValue({\n    value: props.expandKeys,\n    defaultValue: props.defaultExpandKeys\n  }); // 选中的 value（聚合后）\n\n  const [value, setValue] = usePropsValue({\n    value: props.value,\n    defaultValue: props.defaultValue\n  }); // 获取目标所有叶子节点 key 集合\n\n  const getLeafKeys = option => {\n    const keys = [];\n\n    const walker = op => {\n      var _a;\n\n      if (!op) {\n        return;\n      }\n\n      if ((_a = op[childrenName]) === null || _a === void 0 ? void 0 : _a.length) {\n        op[childrenName].forEach(i => walker(i));\n      } else {\n        keys.push(op[valueName]);\n      }\n    };\n\n    walker(option);\n    return keys;\n  };\n\n  const [deep, optionsMap, optionsParentMap] = useMemo(() => {\n    const deep = getTreeDeep(props.options, childrenName);\n    const optionsMap = new Map();\n    const optionsParentMap = new Map();\n\n    function traverse(current, children) {\n      children.forEach(item => {\n        optionsParentMap.set(item[valueName], current);\n        optionsMap.set(item[valueName], item);\n\n        if (item[childrenName]) {\n          traverse(item, item[childrenName]);\n        }\n      });\n    }\n\n    traverse(undefined, props.options);\n    return [deep, optionsMap, optionsParentMap];\n  }, [props.options]); // 将聚合的 value 拆分开，获得叶子节点的 value 集合\n\n  const allSelectedLeafKeys = useMemo(() => {\n    let leafKeys = [];\n    value.forEach(v => {\n      const option = optionsMap.get(v);\n      leafKeys = leafKeys.concat(getLeafKeys(option));\n    });\n    return leafKeys;\n  }, [value, optionsMap]); // 子级有被选中的节点集合\n\n  const dotMap = useMemo(() => {\n    const map = new Map(); // 遍历 allChildrenValues, 向上递归\n\n    const walker = key => {\n      const parentOption = optionsParentMap.get(key);\n\n      if (!parentOption) {\n        return;\n      }\n\n      map.set(parentOption[valueName], true);\n      walker(parentOption[valueName]);\n    };\n\n    allSelectedLeafKeys.forEach(key => {\n      map.set(key, true);\n      walker(key);\n    });\n    return map;\n  }, [optionsParentMap, value]);\n\n  const onChange = targetKeys => {\n    var _a;\n\n    let groupKeys = [...targetKeys];\n    let unusedKeys = [];\n\n    const walker = keys => {\n      keys.forEach(key => {\n        var _a;\n\n        if (unusedKeys.includes(key)) {\n          return;\n        }\n\n        const parent = optionsParentMap.get(key);\n\n        if (!parent) {\n          return;\n        }\n\n        const childrenKeys = ((_a = parent[childrenName]) === null || _a === void 0 ? void 0 : _a.map(i => i[valueName])) || [];\n\n        if (childrenKeys.every(i => groupKeys.includes(i))) {\n          groupKeys.push(parent[valueName]);\n          unusedKeys = unusedKeys.concat(childrenKeys);\n        }\n      });\n    }; // 遍历 deep 次 groupKeys，每次往上聚合一层\n\n\n    for (let i = 0; i < deep; i++) {\n      walker(groupKeys);\n    }\n\n    groupKeys = groupKeys.filter(i => !unusedKeys.includes(i));\n    const groupOptions = groupKeys.map(i => optionsMap.get(i));\n    setValue(groupKeys);\n    (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, groupKeys, groupOptions);\n  };\n\n  const onItemSelect = option => {\n    var _a;\n\n    const parentNodes = [];\n    let current = option;\n\n    while (current) {\n      parentNodes.unshift(current);\n      const next = optionsParentMap.get(current[valueName]);\n      current = next;\n    }\n\n    const keys = parentNodes.map(i => i[valueName]);\n    setExpandKeys(keys);\n    (_a = props.onExpand) === null || _a === void 0 ? void 0 : _a.call(props, keys, parentNodes);\n  }; // 渲染全选节点\n\n\n  const renderSelectAllItem = (columnOptions, index) => {\n    var _a;\n\n    const text = (_a = props.selectAllText) === null || _a === void 0 ? void 0 : _a[index];\n\n    if (!text) {\n      return;\n    }\n\n    let currentLeafKeys = [];\n    columnOptions.forEach(option => {\n      currentLeafKeys = currentLeafKeys.concat(getLeafKeys(option));\n    });\n    const allSelected = currentLeafKeys.every(i => allSelectedLeafKeys.includes(i));\n    return React.createElement(\"div\", {\n      onClick: () => {\n        if (allSelected) {\n          onChange(allSelectedLeafKeys.filter(i => !currentLeafKeys.includes(i)));\n        } else {\n          onChange(allSelectedLeafKeys.concat(currentLeafKeys));\n        }\n      },\n      className: `${classPrefix}-item`\n    }, text);\n  }; // 渲染\n\n\n  const renderSelectAllLeafItem = (columnOptions, index) => {\n    var _a;\n\n    const text = (_a = props.selectAllText) === null || _a === void 0 ? void 0 : _a[index];\n\n    if (!text) {\n      return;\n    }\n\n    const currentLeafKeys = columnOptions.map(i => i[valueName]);\n    const allSelected = currentLeafKeys.every(i => allSelectedLeafKeys.includes(i));\n    const halfSelected = allSelected ? false : currentLeafKeys.some(i => allSelectedLeafKeys.includes(i));\n    return React.createElement(\"div\", {\n      onClick: () => {\n        if (allSelected) {\n          onChange(allSelectedLeafKeys.filter(i => !currentLeafKeys.includes(i)));\n        } else {\n          onChange(allSelectedLeafKeys.concat(currentLeafKeys));\n        }\n      },\n      className: classNames(`${classPrefix}-item`, `${classPrefix}-item-leaf`)\n    }, React.createElement(Checkbox, {\n      className: `${classPrefix}-item-checkbox`,\n      checked: allSelected,\n      indeterminate: halfSelected\n    }), text);\n  }; // 渲染节点\n\n\n  const renderItem = option => {\n    const isExpand = expandKeys.includes(option[valueName]);\n    return React.createElement(\"div\", {\n      key: option[valueName],\n      onClick: () => {\n        if (!isExpand) {\n          onItemSelect(option);\n        }\n      },\n      className: classNames(`${classPrefix}-item`, {\n        [`${classPrefix}-item-expand`]: isExpand\n      })\n    }, option[labelName], !!dotMap.get(option[valueName]) && React.createElement(\"div\", {\n      className: `${classPrefix}-dot`\n    }));\n  }; // 渲染叶子节点\n\n\n  const renderLeafItem = option => {\n    const isSelected = allSelectedLeafKeys.includes(option[valueName]);\n    return React.createElement(\"div\", {\n      key: option[valueName],\n      onClick: () => {\n        if (isSelected) {\n          onChange(allSelectedLeafKeys.filter(val => val !== option[valueName]));\n        } else {\n          onChange([...allSelectedLeafKeys, option[valueName]]);\n        }\n      },\n      className: classNames(`${classPrefix}-item`, `${classPrefix}-item-leaf`)\n    }, React.createElement(Checkbox, {\n      className: `${classPrefix}-item-checkbox`,\n      checked: isSelected\n    }), option[labelName]);\n  };\n\n  const renderItems = (columnOptions = [], index) => {\n    if (columnOptions.length === 0) {\n      return;\n    }\n\n    const isLeaf = deep === index + 1;\n\n    if (isLeaf) {\n      return React.createElement(React.Fragment, null, renderSelectAllLeafItem(columnOptions, index), columnOptions.map(option => {\n        return renderLeafItem(option);\n      }));\n    }\n\n    return React.createElement(React.Fragment, null, renderSelectAllItem(columnOptions, index), columnOptions.map(option => {\n      return renderItem(option);\n    }));\n  };\n\n  const renderColumns = () => {\n    var _a;\n\n    const columns = [];\n\n    for (let i = 0; i < deep; i++) {\n      let width = `${100 / deep}%`; // 两列的第一列宽度为 33.33，两列的第二列为 66.67%\n\n      if (deep === 2 && i === 0) {\n        width = `33.33%`;\n      }\n\n      if (deep === 2 && i === 1) {\n        width = `66.67%`;\n      }\n\n      const column = React.createElement(\"div\", {\n        key: i,\n        className: classNames(`${classPrefix}-column`),\n        style: {\n          width\n        }\n      }, renderItems(i === 0 ? props.options : (_a = optionsMap.get(expandKeys[i - 1])) === null || _a === void 0 ? void 0 : _a[childrenName], i));\n      columns.push(column);\n    }\n\n    return columns;\n  };\n\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, renderColumns()));\n};"]},"metadata":{},"sourceType":"module"}