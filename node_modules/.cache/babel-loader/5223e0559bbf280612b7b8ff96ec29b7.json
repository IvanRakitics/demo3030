{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useState } from 'react';\nimport screenfull from 'screenfull';\nimport useLatest from '../useLatest';\nimport useMemoizedFn from '../useMemoizedFn';\nimport useUnmount from '../useUnmount';\nimport { getTargetElement } from '../utils/domTarget';\n\nvar useFullscreen = function useFullscreen(target, options) {\n  var _a = options || {},\n      onExit = _a.onExit,\n      onEnter = _a.onEnter;\n\n  var onExitRef = useLatest(onExit);\n  var onEnterRef = useLatest(onEnter);\n\n  var _b = __read(useState(false), 2),\n      state = _b[0],\n      setState = _b[1];\n\n  var onChange = function onChange() {\n    var _a, _b;\n\n    if (screenfull.isEnabled) {\n      var isFullscreen = screenfull.isFullscreen;\n\n      if (isFullscreen) {\n        (_a = onEnterRef.current) === null || _a === void 0 ? void 0 : _a.call(onEnterRef);\n      } else {\n        screenfull.off('change', onChange);\n        (_b = onExitRef.current) === null || _b === void 0 ? void 0 : _b.call(onExitRef);\n      }\n\n      setState(isFullscreen);\n    }\n  };\n\n  var enterFullscreen = function enterFullscreen() {\n    var el = getTargetElement(target);\n\n    if (!el) {\n      return;\n    }\n\n    if (screenfull.isEnabled) {\n      try {\n        screenfull.request(el);\n        screenfull.on('change', onChange);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  var exitFullscreen = function exitFullscreen() {\n    if (!state) {\n      return;\n    }\n\n    if (screenfull.isEnabled) {\n      screenfull.exit();\n    }\n  };\n\n  var toggleFullscreen = function toggleFullscreen() {\n    if (state) {\n      exitFullscreen();\n    } else {\n      enterFullscreen();\n    }\n  };\n\n  useUnmount(function () {\n    if (screenfull.isEnabled) {\n      screenfull.off('change', onChange);\n    }\n  });\n  return [state, {\n    enterFullscreen: useMemoizedFn(enterFullscreen),\n    exitFullscreen: useMemoizedFn(exitFullscreen),\n    toggleFullscreen: useMemoizedFn(toggleFullscreen),\n    isEnabled: screenfull.isEnabled\n  }];\n};\n\nexport default useFullscreen;","map":{"version":3,"sources":["D:/react/project0330/node_modules/ahooks/es/useFullscreen/index.js"],"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","useState","screenfull","useLatest","useMemoizedFn","useUnmount","getTargetElement","useFullscreen","target","options","_a","onExit","onEnter","onExitRef","onEnterRef","_b","state","setState","onChange","isEnabled","isFullscreen","current","off","enterFullscreen","el","request","on","console","exitFullscreen","exit","toggleFullscreen"],"mappings":"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","sourcesContent":["var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useState } from 'react';\nimport screenfull from 'screenfull';\nimport useLatest from '../useLatest';\nimport useMemoizedFn from '../useMemoizedFn';\nimport useUnmount from '../useUnmount';\nimport { getTargetElement } from '../utils/domTarget';\n\nvar useFullscreen = function useFullscreen(target, options) {\n  var _a = options || {},\n      onExit = _a.onExit,\n      onEnter = _a.onEnter;\n\n  var onExitRef = useLatest(onExit);\n  var onEnterRef = useLatest(onEnter);\n\n  var _b = __read(useState(false), 2),\n      state = _b[0],\n      setState = _b[1];\n\n  var onChange = function onChange() {\n    var _a, _b;\n\n    if (screenfull.isEnabled) {\n      var isFullscreen = screenfull.isFullscreen;\n\n      if (isFullscreen) {\n        (_a = onEnterRef.current) === null || _a === void 0 ? void 0 : _a.call(onEnterRef);\n      } else {\n        screenfull.off('change', onChange);\n        (_b = onExitRef.current) === null || _b === void 0 ? void 0 : _b.call(onExitRef);\n      }\n\n      setState(isFullscreen);\n    }\n  };\n\n  var enterFullscreen = function enterFullscreen() {\n    var el = getTargetElement(target);\n\n    if (!el) {\n      return;\n    }\n\n    if (screenfull.isEnabled) {\n      try {\n        screenfull.request(el);\n        screenfull.on('change', onChange);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  var exitFullscreen = function exitFullscreen() {\n    if (!state) {\n      return;\n    }\n\n    if (screenfull.isEnabled) {\n      screenfull.exit();\n    }\n  };\n\n  var toggleFullscreen = function toggleFullscreen() {\n    if (state) {\n      exitFullscreen();\n    } else {\n      enterFullscreen();\n    }\n  };\n\n  useUnmount(function () {\n    if (screenfull.isEnabled) {\n      screenfull.off('change', onChange);\n    }\n  });\n  return [state, {\n    enterFullscreen: useMemoizedFn(enterFullscreen),\n    exitFullscreen: useMemoizedFn(exitFullscreen),\n    toggleFullscreen: useMemoizedFn(toggleFullscreen),\n    isEnabled: screenfull.isEnabled\n  }];\n};\n\nexport default useFullscreen;"]},"metadata":{},"sourceType":"module"}