{"ast":null,"code":"import isEqual from 'lodash/isEqual';\nimport { useRef } from 'react';\nimport useEffectWithTarget from './useEffectWithTarget';\n\nvar depsEqual = function depsEqual(aDeps, bDeps) {\n  if (bDeps === void 0) {\n    bDeps = [];\n  }\n\n  return isEqual(aDeps, bDeps);\n};\n\nvar useDeepCompareEffectWithTarget = function useDeepCompareEffectWithTarget(effect, deps, target) {\n  var ref = useRef();\n  var signalRef = useRef(0);\n\n  if (!depsEqual(deps, ref.current)) {\n    ref.current = deps;\n    signalRef.current += 1;\n  }\n\n  useEffectWithTarget(effect, [signalRef.current], target);\n};\n\nexport default useDeepCompareEffectWithTarget;","map":{"version":3,"sources":["D:/react/project0330/node_modules/ahooks/es/utils/useDeepCompareWithTarget.js"],"names":["isEqual","useRef","useEffectWithTarget","depsEqual","aDeps","bDeps","useDeepCompareEffectWithTarget","effect","deps","target","ref","signalRef","current"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;AACA,SAASC,MAAT,QAAuB,OAAvB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;;AAEA,IAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,KAA1B,EAAiC;AAC/C,MAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;AACpBA,IAAAA,KAAK,GAAG,EAAR;AACD;;AAED,SAAOL,OAAO,CAACI,KAAD,EAAQC,KAAR,CAAd;AACD,CAND;;AAQA,IAAIC,8BAA8B,GAAG,SAASA,8BAAT,CAAwCC,MAAxC,EAAgDC,IAAhD,EAAsDC,MAAtD,EAA8D;AACjG,MAAIC,GAAG,GAAGT,MAAM,EAAhB;AACA,MAAIU,SAAS,GAAGV,MAAM,CAAC,CAAD,CAAtB;;AAEA,MAAI,CAACE,SAAS,CAACK,IAAD,EAAOE,GAAG,CAACE,OAAX,CAAd,EAAmC;AACjCF,IAAAA,GAAG,CAACE,OAAJ,GAAcJ,IAAd;AACAG,IAAAA,SAAS,CAACC,OAAV,IAAqB,CAArB;AACD;;AAEDV,EAAAA,mBAAmB,CAACK,MAAD,EAAS,CAACI,SAAS,CAACC,OAAX,CAAT,EAA8BH,MAA9B,CAAnB;AACD,CAVD;;AAYA,eAAeH,8BAAf","sourcesContent":["import isEqual from 'lodash/isEqual';\nimport { useRef } from 'react';\nimport useEffectWithTarget from './useEffectWithTarget';\n\nvar depsEqual = function depsEqual(aDeps, bDeps) {\n  if (bDeps === void 0) {\n    bDeps = [];\n  }\n\n  return isEqual(aDeps, bDeps);\n};\n\nvar useDeepCompareEffectWithTarget = function useDeepCompareEffectWithTarget(effect, deps, target) {\n  var ref = useRef();\n  var signalRef = useRef(0);\n\n  if (!depsEqual(deps, ref.current)) {\n    ref.current = deps;\n    signalRef.current += 1;\n  }\n\n  useEffectWithTarget(effect, [signalRef.current], target);\n};\n\nexport default useDeepCompareEffectWithTarget;"]},"metadata":{},"sourceType":"module"}