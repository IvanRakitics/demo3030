{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeImplementation = typeImplementation;\n\nvar _utils = require(\"../utils\");\n\nvar _click = require(\"../click\");\n\nvar _keyboard = require(\"../keyboard\");\n\nfunction typeImplementation(_x, _x2, _x3) {\n  return _typeImplementation.apply(this, arguments);\n}\n\nfunction _typeImplementation() {\n  _typeImplementation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(element, text, _ref) {\n    var delay, _ref$skipClick, skipClick, _ref$skipAutoClose, skipAutoClose, _ref$initialSelection, initialSelectionStart, _ref$initialSelection2, initialSelectionEnd, currentElement, value, _ref2, selectionStart, selectionEnd, _ref3, promise, releaseAllKeys;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            delay = _ref.delay, _ref$skipClick = _ref.skipClick, skipClick = _ref$skipClick === void 0 ? false : _ref$skipClick, _ref$skipAutoClose = _ref.skipAutoClose, skipAutoClose = _ref$skipAutoClose === void 0 ? false : _ref$skipAutoClose, _ref$initialSelection = _ref.initialSelectionStart, initialSelectionStart = _ref$initialSelection === void 0 ? undefined : _ref$initialSelection, _ref$initialSelection2 = _ref.initialSelectionEnd, initialSelectionEnd = _ref$initialSelection2 === void 0 ? undefined : _ref$initialSelection2;\n\n            if (!element.disabled) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 3:\n            if (!skipClick) (0, _click.click)(element); // The focused element could change between each event, so get the currently active element each time\n\n            currentElement = function currentElement() {\n              return (0, _utils.getActiveElement)(element.ownerDocument);\n            }; // by default, a new element has its selection start and end at 0\n            // but most of the time when people call \"type\", they expect it to type\n            // at the end of the current input value. So, if the selection start\n            // and end are both the default of 0, then we'll go ahead and change\n            // them to the length of the current value.\n            // the only time it would make sense to pass the initialSelectionStart or\n            // initialSelectionEnd is if you have an input with a value and want to\n            // explicitly start typing with the cursor at 0. Not super common.\n\n\n            value = (0, _utils.getValue)(currentElement());\n            _ref2 = (0, _utils.getSelectionRange)(element), selectionStart = _ref2.selectionStart, selectionEnd = _ref2.selectionEnd;\n\n            if (value != null && (selectionStart === null || selectionStart === 0) && (selectionEnd === null || selectionEnd === 0)) {\n              (0, _utils.setSelectionRange)(currentElement(), initialSelectionStart != null ? initialSelectionStart : value.length, initialSelectionEnd != null ? initialSelectionEnd : value.length);\n            }\n\n            _ref3 = (0, _keyboard.keyboardImplementationWrapper)(text, {\n              delay: delay,\n              document: element.ownerDocument\n            }), promise = _ref3.promise, releaseAllKeys = _ref3.releaseAllKeys;\n\n            if (!(delay > 0)) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 12;\n            return promise;\n\n          case 12:\n            if (!skipAutoClose) {\n              releaseAllKeys();\n            } // eslint-disable-next-line consistent-return -- we need to return the internal Promise so that it is catchable if we don't await\n\n\n            return _context.abrupt(\"return\", promise);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _typeImplementation.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}