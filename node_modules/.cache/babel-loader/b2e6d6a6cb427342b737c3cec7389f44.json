{"ast":null,"code":"import _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useRef, memo } from 'react';\nimport classNames from 'classnames';\nimport { CloseOutline, SoundOutline } from 'antd-mobile-icons';\nimport { useTimeout } from 'ahooks';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { withNativeProps } from '../../utils/native-props';\nimport { useResizeEffect } from '../../utils/use-resize-effect';\nimport { useMutationEffect } from '../../utils/use-mutation-effect';\nvar classPrefix = \"adm-notice-bar\";\nvar defaultProps = {\n  color: 'default',\n  delay: 2000,\n  speed: 50,\n  icon: React.createElement(SoundOutline, null)\n};\nexport var NoticeBar = memo(function (p) {\n  var props = mergeProps(defaultProps, p);\n  var containerRef = useRef(null);\n  var textRef = useRef(null);\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      visible = _useState2[0],\n      setVisible = _useState2[1];\n\n  var speed = props.speed;\n  var delayLockRef = useRef(true);\n  var animatingRef = useRef(false);\n\n  function start() {\n    if (delayLockRef.current) return;\n    var container = containerRef.current;\n    var text = textRef.current;\n    if (!container || !text) return;\n\n    if (container.offsetWidth >= text.offsetWidth) {\n      animatingRef.current = false;\n      text.style.removeProperty('transition-duration');\n      text.style.removeProperty('transform');\n      return;\n    }\n\n    if (animatingRef.current) return;\n    var initial = !text.style.transform;\n    text.style.transitionDuration = '0s';\n\n    if (initial) {\n      text.style.transform = 'translateX(0)';\n    } else {\n      text.style.transform = \"translateX(\".concat(container.offsetWidth, \"px)\");\n    }\n\n    var distance = initial ? text.offsetWidth : container.offsetWidth + text.offsetWidth;\n    animatingRef.current = true;\n    text.style.transitionDuration = \"\".concat(Math.round(distance / speed), \"s\");\n    text.style.transform = \"translateX(-\".concat(text.offsetWidth, \"px)\");\n  }\n\n  useTimeout(function () {\n    delayLockRef.current = false;\n    start();\n  }, props.delay);\n  useResizeEffect(function () {\n    start();\n  }, containerRef);\n  useMutationEffect(function () {\n    start();\n  }, textRef, {\n    subtree: true,\n    childList: true,\n    characterData: true\n  });\n  if (!visible) return null;\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classNames(classPrefix, \"\".concat(classPrefix, \"-\").concat(props.color))\n  }, props.icon && React.createElement(\"span\", {\n    className: \"\".concat(classPrefix, \"-left\")\n  }, props.icon), React.createElement(\"span\", {\n    ref: containerRef,\n    className: \"\".concat(classPrefix, \"-content\")\n  }, React.createElement(\"span\", {\n    onTransitionEnd: function onTransitionEnd() {\n      animatingRef.current = false;\n      start();\n    },\n    ref: textRef,\n    className: \"\".concat(classPrefix, \"-content-inner\")\n  }, props.content)), (props.closeable || props.extra) && React.createElement(\"span\", {\n    className: \"\".concat(classPrefix, \"-right\")\n  }, props.extra, props.closeable && React.createElement(CloseOutline, {\n    className: \"\".concat(classPrefix, \"-close-icon\"),\n    onClick: function onClick() {\n      var _a;\n\n      setVisible(false);\n      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);\n    }\n  }))));\n});","map":null,"metadata":{},"sourceType":"module"}