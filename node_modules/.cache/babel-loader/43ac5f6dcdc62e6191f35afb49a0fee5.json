{"ast":null,"code":"import { useMemo } from 'react';\nimport memoize from 'lodash/memoize';\nexport function useCascaderValueExtend(options) {\n  const generateItems = useMemo(() => {\n    return memoize(val => {\n      const ret = [];\n      let currentOptions = options;\n\n      for (const v of val) {\n        const target = currentOptions.find(option => option.value === v);\n\n        if (!target) {\n          break;\n        }\n\n        ret.push(target);\n        if (!target.children) break;\n        currentOptions = target.children;\n      }\n\n      return ret;\n    }, val => JSON.stringify(val));\n  }, [options]);\n  const generateIsLeaf = useMemo(() => {\n    return memoize(val => {\n      var _a;\n\n      let isLeaf = false;\n\n      for (const v of val) {\n        const target = options.find(option => option.value === v);\n\n        if (!target) {\n          break;\n        }\n\n        isLeaf = ((_a = target.children) === null || _a === void 0 ? void 0 : _a.length) === val.length;\n      }\n\n      return isLeaf;\n    }, val => JSON.stringify(val));\n  }, [options]);\n\n  function generateValueExtend(val) {\n    return {\n      get items() {\n        return generateItems(val);\n      },\n\n      get isLeaf() {\n        return generateIsLeaf(val);\n      }\n\n    };\n  }\n\n  return generateValueExtend;\n}","map":{"version":3,"sources":["D:/react/project0330/node_modules/antd-mobile/es/components/cascader-view/use-cascader-value-extend.js"],"names":["useMemo","memoize","useCascaderValueExtend","options","generateItems","val","ret","currentOptions","v","target","find","option","value","push","children","JSON","stringify","generateIsLeaf","_a","isLeaf","length","generateValueExtend","items"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAO,SAASC,sBAAT,CAAgCC,OAAhC,EAAyC;AAC9C,QAAMC,aAAa,GAAGJ,OAAO,CAAC,MAAM;AAClC,WAAOC,OAAO,CAACI,GAAG,IAAI;AACpB,YAAMC,GAAG,GAAG,EAAZ;AACA,UAAIC,cAAc,GAAGJ,OAArB;;AAEA,WAAK,MAAMK,CAAX,IAAgBH,GAAhB,EAAqB;AACnB,cAAMI,MAAM,GAAGF,cAAc,CAACG,IAAf,CAAoBC,MAAM,IAAIA,MAAM,CAACC,KAAP,KAAiBJ,CAA/C,CAAf;;AAEA,YAAI,CAACC,MAAL,EAAa;AACX;AACD;;AAEDH,QAAAA,GAAG,CAACO,IAAJ,CAASJ,MAAT;AACA,YAAI,CAACA,MAAM,CAACK,QAAZ,EAAsB;AACtBP,QAAAA,cAAc,GAAGE,MAAM,CAACK,QAAxB;AACD;;AAED,aAAOR,GAAP;AACD,KAjBa,EAiBXD,GAAG,IAAIU,IAAI,CAACC,SAAL,CAAeX,GAAf,CAjBI,CAAd;AAkBD,GAnB4B,EAmB1B,CAACF,OAAD,CAnB0B,CAA7B;AAoBA,QAAMc,cAAc,GAAGjB,OAAO,CAAC,MAAM;AACnC,WAAOC,OAAO,CAACI,GAAG,IAAI;AACpB,UAAIa,EAAJ;;AAEA,UAAIC,MAAM,GAAG,KAAb;;AAEA,WAAK,MAAMX,CAAX,IAAgBH,GAAhB,EAAqB;AACnB,cAAMI,MAAM,GAAGN,OAAO,CAACO,IAAR,CAAaC,MAAM,IAAIA,MAAM,CAACC,KAAP,KAAiBJ,CAAxC,CAAf;;AAEA,YAAI,CAACC,MAAL,EAAa;AACX;AACD;;AAEDU,QAAAA,MAAM,GAAG,CAAC,CAACD,EAAE,GAAGT,MAAM,CAACK,QAAb,MAA2B,IAA3B,IAAmCI,EAAE,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,EAAE,CAACE,MAAhE,MAA4Ef,GAAG,CAACe,MAAzF;AACD;;AAED,aAAOD,MAAP;AACD,KAhBa,EAgBXd,GAAG,IAAIU,IAAI,CAACC,SAAL,CAAeX,GAAf,CAhBI,CAAd;AAiBD,GAlB6B,EAkB3B,CAACF,OAAD,CAlB2B,CAA9B;;AAoBA,WAASkB,mBAAT,CAA6BhB,GAA7B,EAAkC;AAChC,WAAO;AACL,UAAIiB,KAAJ,GAAY;AACV,eAAOlB,aAAa,CAACC,GAAD,CAApB;AACD,OAHI;;AAKL,UAAIc,MAAJ,GAAa;AACX,eAAOF,cAAc,CAACZ,GAAD,CAArB;AACD;;AAPI,KAAP;AAUD;;AAED,SAAOgB,mBAAP;AACD","sourcesContent":["import { useMemo } from 'react';\nimport memoize from 'lodash/memoize';\nexport function useCascaderValueExtend(options) {\n  const generateItems = useMemo(() => {\n    return memoize(val => {\n      const ret = [];\n      let currentOptions = options;\n\n      for (const v of val) {\n        const target = currentOptions.find(option => option.value === v);\n\n        if (!target) {\n          break;\n        }\n\n        ret.push(target);\n        if (!target.children) break;\n        currentOptions = target.children;\n      }\n\n      return ret;\n    }, val => JSON.stringify(val));\n  }, [options]);\n  const generateIsLeaf = useMemo(() => {\n    return memoize(val => {\n      var _a;\n\n      let isLeaf = false;\n\n      for (const v of val) {\n        const target = options.find(option => option.value === v);\n\n        if (!target) {\n          break;\n        }\n\n        isLeaf = ((_a = target.children) === null || _a === void 0 ? void 0 : _a.length) === val.length;\n      }\n\n      return isLeaf;\n    }, val => JSON.stringify(val));\n  }, [options]);\n\n  function generateValueExtend(val) {\n    return {\n      get items() {\n        return generateItems(val);\n      },\n\n      get isLeaf() {\n        return generateIsLeaf(val);\n      }\n\n    };\n  }\n\n  return generateValueExtend;\n}"]},"metadata":{},"sourceType":"module"}