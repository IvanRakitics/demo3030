{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useState } from 'react';\nimport screenfull from 'screenfull';\nimport useLatest from '../useLatest';\nimport useMemoizedFn from '../useMemoizedFn';\nimport useUnmount from '../useUnmount';\nimport { getTargetElement } from '../utils/domTarget';\n\nvar useFullscreen = function useFullscreen(target, options) {\n  var _a = options || {},\n      onExit = _a.onExit,\n      onEnter = _a.onEnter;\n\n  var onExitRef = useLatest(onExit);\n  var onEnterRef = useLatest(onEnter);\n\n  var _b = __read(useState(false), 2),\n      state = _b[0],\n      setState = _b[1];\n\n  var onChange = function onChange() {\n    var _a, _b;\n\n    if (screenfull.isEnabled) {\n      var isFullscreen = screenfull.isFullscreen;\n\n      if (isFullscreen) {\n        (_a = onEnterRef.current) === null || _a === void 0 ? void 0 : _a.call(onEnterRef);\n      } else {\n        screenfull.off('change', onChange);\n        (_b = onExitRef.current) === null || _b === void 0 ? void 0 : _b.call(onExitRef);\n      }\n\n      setState(isFullscreen);\n    }\n  };\n\n  var enterFullscreen = function enterFullscreen() {\n    var el = getTargetElement(target);\n\n    if (!el) {\n      return;\n    }\n\n    if (screenfull.isEnabled) {\n      try {\n        screenfull.request(el);\n        screenfull.on('change', onChange);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  var exitFullscreen = function exitFullscreen() {\n    if (!state) {\n      return;\n    }\n\n    if (screenfull.isEnabled) {\n      screenfull.exit();\n    }\n  };\n\n  var toggleFullscreen = function toggleFullscreen() {\n    if (state) {\n      exitFullscreen();\n    } else {\n      enterFullscreen();\n    }\n  };\n\n  useUnmount(function () {\n    if (screenfull.isEnabled) {\n      screenfull.off('change', onChange);\n    }\n  });\n  return [state, {\n    enterFullscreen: useMemoizedFn(enterFullscreen),\n    exitFullscreen: useMemoizedFn(exitFullscreen),\n    toggleFullscreen: useMemoizedFn(toggleFullscreen),\n    isEnabled: screenfull.isEnabled\n  }];\n};\n\nexport default useFullscreen;","map":null,"metadata":{},"sourceType":"module"}