{"ast":null,"code":"import _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useRef, useState } from 'react';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { withNativeProps } from '../../utils/native-props';\nimport { useResizeEffect } from '../../utils/use-resize-effect';\nimport { useIsomorphicLayoutEffect } from 'ahooks';\nimport { withStopPropagation } from '../../utils/with-stop-propagation';\nvar classPrefix = \"adm-ellipsis\";\nvar defaultProps = {\n  direction: 'end',\n  rows: 1,\n  expandText: '',\n  collapseText: '',\n  stopPropagationForActionButtons: [],\n  onContentClick: function onContentClick() {}\n};\nexport var Ellipsis = function Ellipsis(p) {\n  var props = mergeProps(defaultProps, p);\n  var rootRef = useRef(null);\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      ellipsised = _useState2[0],\n      setEllipsised = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      expanded = _useState4[0],\n      setExpanded = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      exceeded = _useState6[0],\n      setExceeded = _useState6[1];\n\n  function calcEllipsised() {\n    var root = rootRef.current;\n    if (!root) return;\n    var originStyle = window.getComputedStyle(root);\n    var container = document.createElement('div');\n    var styleNames = Array.prototype.slice.apply(originStyle);\n    styleNames.forEach(function (name) {\n      container.style.setProperty(name, originStyle.getPropertyValue(name));\n    });\n    container.style.position = 'fixed';\n    container.style.left = '999999px';\n    container.style.top = '999999px';\n    container.style.zIndex = '-1000';\n    container.style.height = 'auto';\n    container.style.minHeight = 'auto';\n    container.style.maxHeight = 'auto';\n    container.style.textOverflow = 'clip';\n    container.style.whiteSpace = 'normal';\n    container.style.webkitLineClamp = 'unset';\n    container.style.webkitBoxOrient = 'unset';\n    container.style.display = 'block';\n    var lineHeight = pxToNumber(originStyle.lineHeight);\n    var maxHeight = Math.floor(lineHeight * (props.rows + 0.5) + pxToNumber(originStyle.paddingTop) + pxToNumber(originStyle.paddingBottom));\n    container.innerText = props.content;\n    document.body.appendChild(container);\n\n    if (container.offsetHeight <= maxHeight) {\n      setExceeded(false);\n    } else {\n      var check = function check(left, right) {\n        if (right - left <= 1) {\n          if (props.direction === 'end') {\n            return {\n              leading: props.content.slice(0, left) + '...'\n            };\n          } else {\n            return {\n              tailing: '...' + props.content.slice(right, end)\n            };\n          }\n        }\n\n        var middle = Math.round((left + right) / 2);\n\n        if (props.direction === 'end') {\n          container.innerText = props.content.slice(0, middle) + '...' + actionText;\n        } else {\n          container.innerText = actionText + '...' + props.content.slice(middle, end);\n        }\n\n        if (container.offsetHeight <= maxHeight) {\n          if (props.direction === 'end') {\n            return check(middle, right);\n          } else {\n            return check(left, middle);\n          }\n        } else {\n          if (props.direction === 'end') {\n            return check(left, middle);\n          } else {\n            return check(middle, right);\n          }\n        }\n      };\n\n      var checkMiddle = function checkMiddle(leftPart, rightPart) {\n        if (leftPart[1] - leftPart[0] <= 1 && rightPart[1] - rightPart[0] <= 1) {\n          return {\n            leading: props.content.slice(0, leftPart[0]) + '...',\n            tailing: '...' + props.content.slice(rightPart[1], end)\n          };\n        }\n\n        var leftPartMiddle = Math.floor((leftPart[0] + leftPart[1]) / 2);\n        var rightPartMiddle = Math.floor((rightPart[0] + rightPart[1]) / 2);\n        container.innerText = props.content.slice(0, leftPartMiddle) + '...' + actionText + '...' + props.content.slice(rightPartMiddle, end);\n\n        if (container.offsetHeight <= maxHeight) {\n          return checkMiddle([leftPartMiddle, leftPart[1]], [rightPart[0], rightPartMiddle]);\n        } else {\n          return checkMiddle([leftPart[0], leftPartMiddle], [rightPartMiddle, rightPart[1]]);\n        }\n      };\n\n      setExceeded(true);\n      var end = props.content.length;\n      var actionText = expanded ? props.collapseText : props.expandText;\n      var middle = Math.floor((0 + end) / 2);\n\n      var _ellipsised = props.direction === 'middle' ? checkMiddle([0, middle], [middle, end]) : check(0, end);\n\n      setEllipsised(_ellipsised);\n    }\n\n    document.body.removeChild(container);\n  }\n\n  useResizeEffect(calcEllipsised, rootRef);\n  useIsomorphicLayoutEffect(function () {\n    calcEllipsised();\n  }, [props.content, props.direction, props.rows, props.expandText, props.collapseText]);\n  var expandActionElement = exceeded && props.expandText ? withStopPropagation(props.stopPropagationForActionButtons, React.createElement(\"a\", {\n    onClick: function onClick() {\n      setExpanded(true);\n    }\n  }, props.expandText)) : null;\n  var collapseActionElement = exceeded && props.expandText ? withStopPropagation(props.stopPropagationForActionButtons, React.createElement(\"a\", {\n    onClick: function onClick() {\n      setExpanded(false);\n    }\n  }, props.collapseText)) : null;\n\n  var renderContent = function renderContent() {\n    if (!exceeded) {\n      return props.content;\n    }\n\n    if (expanded) {\n      return React.createElement(React.Fragment, null, props.content, collapseActionElement);\n    } else {\n      return React.createElement(React.Fragment, null, ellipsised.leading, expandActionElement, ellipsised.tailing);\n    }\n  };\n\n  return withNativeProps(props, React.createElement(\"div\", {\n    ref: rootRef,\n    className: classPrefix,\n    onClick: function onClick(e) {\n      if (e.target === e.currentTarget) {\n        props.onContentClick(e);\n      }\n    }\n  }, renderContent()));\n};\n\nfunction pxToNumber(value) {\n  if (!value) return 0;\n  var match = value.match(/^\\d*(\\.\\d*)?/);\n  return match ? Number(match[0]) : 0;\n}","map":null,"metadata":{},"sourceType":"module"}