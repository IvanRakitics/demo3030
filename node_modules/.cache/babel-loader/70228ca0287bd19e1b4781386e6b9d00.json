{"ast":null,"code":"import _defineProperty from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { MinusOutline, AddOutline } from 'antd-mobile-icons';\nimport { withNativeProps } from '../../utils/native-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { bound } from '../../utils/bound';\nimport Input from '../input';\nimport Button from '../button';\nvar classPrefix = \"adm-stepper\";\nvar defaultProps = {\n  defaultValue: 0,\n  step: 1,\n  disabled: false,\n  allowEmpty: false\n};\nexport var Stepper = function Stepper(p) {\n  var props = mergeProps(defaultProps, p);\n  var disabled = props.disabled,\n      step = props.step,\n      max = props.max,\n      min = props.min,\n      inputReadOnly = props.inputReadOnly;\n\n  var _usePropsValue = usePropsValue(props),\n      _usePropsValue2 = _slicedToArray(_usePropsValue, 2),\n      value = _usePropsValue2[0],\n      setValue = _usePropsValue2[1];\n\n  var _useState = useState(function () {\n    return convertValueToText(value);\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  function setValueWithCheck(v) {\n    if (isNaN(v)) return;\n    var target = bound(v, props.min, props.max);\n\n    if (props.digits || props.digits === 0) {\n      target = parseFloat(target.toFixed(props.digits));\n    }\n\n    setValue(target);\n  }\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hasFocus = _useState4[0],\n      setHasFocus = _useState4[1];\n\n  useEffect(function () {\n    if (!hasFocus) {\n      setInputValue(convertValueToText(value));\n    }\n  }, [hasFocus]);\n  useEffect(function () {\n    if (!hasFocus) {\n      setInputValue(convertValueToText(value));\n    }\n  }, [value]);\n\n  var handleInputChange = function handleInputChange(v) {\n    setInputValue(v);\n    var value = convertTextToValue(v);\n\n    if (value === null) {\n      if (props.allowEmpty) {\n        setValue(null);\n      } else {\n        setValue(props.defaultValue);\n      }\n    } else {\n      setValueWithCheck(value);\n    }\n  };\n\n  var handleMinus = function handleMinus() {\n    setValueWithCheck((value !== null && value !== void 0 ? value : 0) - step);\n  };\n\n  var handlePlus = function handlePlus() {\n    setValueWithCheck((value !== null && value !== void 0 ? value : 0) + step);\n  };\n\n  var minusDisabled = function minusDisabled() {\n    if (disabled) return true;\n    if (value === null) return false;\n\n    if (min !== undefined) {\n      return value <= min;\n    }\n\n    return false;\n  };\n\n  var plusDisabled = function plusDisabled() {\n    if (disabled) return true;\n    if (value === null) return false;\n\n    if (max !== undefined) {\n      return value >= max;\n    }\n\n    return false;\n  };\n\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classNames(classPrefix, _defineProperty({}, \"\".concat(classPrefix, \"-active\"), hasFocus))\n  }, React.createElement(Button, {\n    className: \"\".concat(classPrefix, \"-minus\"),\n    onClick: handleMinus,\n    disabled: minusDisabled(),\n    fill: 'none',\n    shape: 'rectangular',\n    color: 'primary'\n  }, React.createElement(MinusOutline, null)), React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-middle\")\n  }, React.createElement(Input, {\n    className: \"\".concat(classPrefix, \"-input\"),\n    onFocus: function onFocus(e) {\n      var _a;\n\n      setHasFocus(true);\n      (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    value: inputValue,\n    onChange: function onChange(val) {\n      disabled || handleInputChange(val);\n    },\n    disabled: disabled,\n    onBlur: function onBlur(e) {\n      var _a;\n\n      setHasFocus(false);\n      (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    readOnly: inputReadOnly\n  })), React.createElement(Button, {\n    className: \"\".concat(classPrefix, \"-plus\"),\n    onClick: handlePlus,\n    disabled: plusDisabled(),\n    fill: 'none',\n    shape: 'rectangular',\n    color: 'primary'\n  }, React.createElement(AddOutline, null))));\n};\n\nfunction convertValueToText(value) {\n  if (value === null) return '';\n  return value.toString();\n}\n\nfunction convertTextToValue(text) {\n  if (text === '') return null;\n  return parseFloat(text);\n}","map":null,"metadata":{},"sourceType":"module"}