{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { __awaiter } from \"tslib\";\nimport { mergeProps } from '../../utils/with-default-props';\nimport { animated, useSpring } from '@react-spring/web';\nimport { useDrag } from '@use-gesture/react';\nimport { getScrollParent } from '../../utils/get-scroll-parent';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { supportsPassive } from '../../utils/supports-passive';\nimport { convertPx } from '../../utils/convert-px';\nimport { rubberbandIfOutOfBounds } from '../../utils/rubberband';\nimport { useConfig } from '../config-provider';\nimport { sleep } from '../../utils/sleep';\nvar classPrefix = \"adm-pull-to-refresh\";\nexport var defaultProps = {\n  pullingText: '下拉刷新',\n  canReleaseText: '释放立即刷新',\n  refreshingText: '加载中……',\n  completeText: '刷新成功',\n  completeDelay: 500,\n  disabled: false,\n  onRefresh: function onRefresh() {}\n};\nexport var PullToRefresh = function PullToRefresh(p) {\n  var _a, _b;\n\n  var _useConfig = useConfig(),\n      locale = _useConfig.locale;\n\n  var props = mergeProps(defaultProps, {\n    refreshingText: locale.common.loading,\n    pullingText: locale.PullToRefresh.pulling,\n    canReleaseText: locale.PullToRefresh.canRelease,\n    completeText: locale.PullToRefresh.complete\n  }, p);\n  var headHeight = (_a = props.headHeight) !== null && _a !== void 0 ? _a : convertPx(40);\n  var threshold = (_b = props.threshold) !== null && _b !== void 0 ? _b : convertPx(60);\n\n  var _useState = useState('pulling'),\n      _useState2 = _slicedToArray(_useState, 2),\n      status = _useState2[0],\n      setStatus = _useState2[1];\n\n  var _useSpring = useSpring(function () {\n    return {\n      from: {\n        height: 0\n      },\n      config: {\n        tension: 300,\n        friction: 30,\n        clamp: true\n      }\n    };\n  }),\n      _useSpring2 = _slicedToArray(_useSpring, 2),\n      springStyles = _useSpring2[0],\n      api = _useSpring2[1];\n\n  var elementRef = useRef(null);\n  var pullingRef = useRef(false); //防止下拉时抖动\n\n  useEffect(function () {\n    var _a;\n\n    (_a = elementRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener('touchmove', function () {});\n  }, []);\n\n  function doRefresh() {\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var _this = this;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              api.start({\n                height: headHeight\n              });\n              setStatus('refreshing');\n              _context3.prev = 2;\n              _context3.next = 5;\n              return props.onRefresh();\n\n            case 5:\n              setStatus('complete');\n              _context3.next = 12;\n              break;\n\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3[\"catch\"](2);\n              api.start({\n                to: function to(next) {\n                  return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return next({\n                              height: 0\n                            });\n\n                          case 2:\n                            setStatus('pulling');\n\n                          case 3:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n                }\n              });\n              throw _context3.t0;\n\n            case 12:\n              if (!(props.completeDelay > 0)) {\n                _context3.next = 15;\n                break;\n              }\n\n              _context3.next = 15;\n              return sleep(props.completeDelay);\n\n            case 15:\n              api.start({\n                to: function to(next) {\n                  return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return next({\n                              height: 0\n                            });\n\n                          case 2:\n                            setStatus('pulling');\n\n                          case 3:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n                }\n              });\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 8]]);\n    }));\n  }\n\n  useDrag(function (state) {\n    if (status === 'refreshing' || status === 'complete') return;\n    var event = state.event;\n\n    if (state.last) {\n      pullingRef.current = false;\n\n      if (status === 'canRelease') {\n        doRefresh();\n      } else {\n        api.start({\n          height: 0\n        });\n      }\n\n      return;\n    }\n\n    var _state$movement = _slicedToArray(state.movement, 2),\n        y = _state$movement[1];\n\n    if (state.first && y > 0) {\n      var getScrollTop = function getScrollTop(element) {\n        return 'scrollTop' in element ? element.scrollTop : element.scrollY;\n      };\n\n      var target = state.event.target;\n      if (!target || !(target instanceof Element)) return;\n      var scrollParent = getScrollParent(target);\n\n      while (true) {\n        if (!scrollParent) return;\n        var scrollTop = getScrollTop(scrollParent);\n\n        if (scrollTop > 0) {\n          return;\n        }\n\n        if (scrollParent instanceof Window) {\n          break;\n        }\n\n        scrollParent = getScrollParent(scrollParent.parentNode);\n      }\n\n      pullingRef.current = true;\n    }\n\n    if (!pullingRef.current) return;\n\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    event.stopPropagation();\n    var height = Math.max(rubberbandIfOutOfBounds(y, 0, 0, headHeight * 5, 0.5), 0);\n    api.start({\n      height: height\n    });\n    setStatus(height > threshold ? 'canRelease' : 'pulling');\n  }, {\n    pointer: {\n      touch: true\n    },\n    axis: 'y',\n    target: elementRef,\n    enabled: !props.disabled,\n    eventOptions: supportsPassive ? {\n      passive: false\n    } : false\n  });\n\n  var renderStatusText = function renderStatusText() {\n    var _a;\n\n    if (props.renderText) {\n      return (_a = props.renderText) === null || _a === void 0 ? void 0 : _a.call(props, status);\n    }\n\n    if (status === 'pulling') return props.pullingText;\n    if (status === 'canRelease') return props.canReleaseText;\n    if (status === 'refreshing') return props.refreshingText;\n    if (status === 'complete') return props.completeText;\n  };\n\n  return React.createElement(animated.div, {\n    ref: elementRef,\n    className: classPrefix\n  }, React.createElement(animated.div, {\n    style: springStyles,\n    className: \"\".concat(classPrefix, \"-head\")\n  }, React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-head-content\"),\n    style: {\n      height: headHeight\n    }\n  }, renderStatusText())), React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-content\")\n  }, props.children));\n};","map":null,"metadata":{},"sourceType":"module"}