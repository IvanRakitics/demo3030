{"ast":null,"code":"import _defineProperty from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { mergeProps } from '../../utils/with-default-props';\nvar classPrefix = \"adm-water-mark\";\nvar defaultProps = {\n  fullPage: true\n};\nexport var WaterMark = function WaterMark(p) {\n  var props = mergeProps(defaultProps, p);\n  var _props$zIndex = props.zIndex,\n      zIndex = _props$zIndex === void 0 ? 2000 : _props$zIndex,\n      _props$gapX = props.gapX,\n      gapX = _props$gapX === void 0 ? 24 : _props$gapX,\n      _props$gapY = props.gapY,\n      gapY = _props$gapY === void 0 ? 48 : _props$gapY,\n      _props$width = props.width,\n      width = _props$width === void 0 ? 120 : _props$width,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 64 : _props$height,\n      _props$rotate = props.rotate,\n      rotate = _props$rotate === void 0 ? -22 : _props$rotate,\n      image = props.image,\n      _props$imageWidth = props.imageWidth,\n      imageWidth = _props$imageWidth === void 0 ? 120 : _props$imageWidth,\n      _props$imageHeight = props.imageHeight,\n      imageHeight = _props$imageHeight === void 0 ? 64 : _props$imageHeight,\n      content = props.content,\n      _props$fontStyle = props.fontStyle,\n      fontStyle = _props$fontStyle === void 0 ? 'normal' : _props$fontStyle,\n      _props$fontWeight = props.fontWeight,\n      fontWeight = _props$fontWeight === void 0 ? 'normal' : _props$fontWeight,\n      _props$fontColor = props.fontColor,\n      fontColor = _props$fontColor === void 0 ? 'rgba(0,0,0,.15)' : _props$fontColor,\n      _props$fontSize = props.fontSize,\n      fontSize = _props$fontSize === void 0 ? 14 : _props$fontSize,\n      _props$fontFamily = props.fontFamily,\n      fontFamily = _props$fontFamily === void 0 ? 'sans-serif' : _props$fontFamily;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      base64Url = _useState2[0],\n      setBase64Url = _useState2[1];\n\n  useEffect(function () {\n    var canvas = document.createElement('canvas');\n    var ratio = window.devicePixelRatio;\n    var ctx = canvas.getContext('2d');\n    var canvasWidth = \"\".concat((gapX + width) * ratio, \"px\");\n    var canvasHeight = \"\".concat((gapY + height) * ratio, \"px\");\n    var markWidth = width * ratio;\n    var markHeight = height * ratio;\n    canvas.setAttribute('width', canvasWidth);\n    canvas.setAttribute('height', canvasHeight);\n\n    if (ctx) {\n      if (image) {\n        ctx.translate(markWidth / 2, markHeight / 2);\n        ctx.rotate(Math.PI / 180 * Number(rotate));\n        var img = new Image();\n        img.crossOrigin = 'anonymous';\n        img.referrerPolicy = 'no-referrer';\n        img.src = image;\n\n        img.onload = function () {\n          ctx.drawImage(img, -imageWidth * ratio / 2, -imageHeight * ratio / 2, imageWidth * ratio, imageHeight * ratio);\n          ctx.restore();\n          setBase64Url(canvas.toDataURL());\n        };\n      } else if (content) {\n        ctx.textBaseline = 'middle';\n        ctx.textAlign = 'center'; // 文字绕中间旋转\n\n        ctx.translate(markWidth / 2, markHeight / 2);\n        ctx.rotate(Math.PI / 180 * Number(rotate));\n        var markSize = Number(fontSize) * ratio;\n        ctx.font = \"\".concat(fontStyle, \" normal \").concat(fontWeight, \" \").concat(markSize, \"px/\").concat(markHeight, \"px \").concat(fontFamily);\n        ctx.fillStyle = fontColor;\n        ctx.fillText(content, 0, 0);\n        ctx.restore();\n        setBase64Url(canvas.toDataURL());\n      }\n    } else {\n      throw new Error('当前环境不支持Canvas');\n    }\n  }, [gapX, gapY, rotate, fontStyle, fontWeight, width, height, fontFamily, fontColor, image, content, fontSize]);\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classNames(classPrefix, _defineProperty({}, \"\".concat(classPrefix, \"-full-page\"), props.fullPage)),\n    style: {\n      zIndex: zIndex,\n      backgroundSize: \"\".concat(gapX + width, \"px\"),\n      backgroundImage: \"url('\".concat(base64Url, \"')\")\n    }\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}