{"ast":null,"code":"import _defineProperty from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport classNames from 'classnames';\nimport DotLoading from '../dot-loading';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { withNativeProps } from '../../utils/native-props';\nvar classPrefix = \"adm-button\";\nvar defaultProps = {\n  color: 'default',\n  fill: 'solid',\n  block: false,\n  loading: false,\n  type: 'button',\n  shape: 'default',\n  size: 'middle'\n};\nexport var Button = forwardRef(function (p, ref) {\n  var _classNames;\n\n  var props = mergeProps(defaultProps, p);\n  var disabled = props.disabled || props.loading;\n  var nativeButtonRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return {\n      get nativeElement() {\n        return nativeButtonRef.current;\n      }\n\n    };\n  });\n  return withNativeProps(props, React.createElement(\"button\", {\n    ref: nativeButtonRef,\n    type: props.type,\n    onClick: props.onClick,\n    className: classNames(classPrefix, props.color ? \"\".concat(classPrefix, \"-\").concat(props.color) : null, (_classNames = {}, _defineProperty(_classNames, \"\".concat(classPrefix, \"-block\"), props.block), _defineProperty(_classNames, \"\".concat(classPrefix, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(classPrefix, \"-fill-outline\"), props.fill === 'outline'), _defineProperty(_classNames, \"\".concat(classPrefix, \"-fill-none\"), props.fill === 'none'), _defineProperty(_classNames, \"\".concat(classPrefix, \"-mini\"), props.size === 'mini'), _defineProperty(_classNames, \"\".concat(classPrefix, \"-small\"), props.size === 'small'), _defineProperty(_classNames, \"\".concat(classPrefix, \"-large\"), props.size === 'large'), _defineProperty(_classNames, \"\".concat(classPrefix, \"-loading\"), props.loading), _classNames), \"\".concat(classPrefix, \"-shape-\").concat(props.shape)),\n    disabled: disabled\n  }, props.loading ? React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-loading-wrapper\")\n  }, React.createElement(DotLoading, {\n    color: 'currentColor'\n  }), props.loadingText) : props.children));\n});","map":null,"metadata":{},"sourceType":"module"}