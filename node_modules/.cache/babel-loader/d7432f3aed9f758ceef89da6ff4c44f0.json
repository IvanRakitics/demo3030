{"ast":null,"code":"import _toConsumableArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport { __rest } from \"tslib\";\nimport React, { useContext, useCallback, useState } from 'react';\nimport classNames from 'classnames';\nimport { Field } from 'rc-field-form';\nimport FieldContext from 'rc-field-form/lib/FieldContext';\nimport { devWarning } from '../../utils/dev-log';\nimport { FormContext, NoStyleItemContext } from './context';\nimport { toArray } from './utils';\nimport List from '../list';\nimport Popover from '../popover';\nimport { QuestionCircleOutline } from 'antd-mobile-icons';\nimport { useConfig } from '../config-provider';\nvar NAME_SPLIT = '__SPLIT__';\nvar classPrefix = \"adm-form-item\";\nvar MemoInput = React.memo(function (_ref) {\n  var children = _ref.children;\n  return children;\n}, function (prev, next) {\n  return prev.value === next.value && prev.update === next.update;\n});\n\nvar FormItemLayout = function FormItemLayout(props) {\n  var className = props.className,\n      style = props.style,\n      extra = props.extra,\n      label = props.label,\n      help = props.help,\n      required = props.required,\n      disabled = props.disabled,\n      children = props.children,\n      htmlFor = props.htmlFor,\n      hidden = props.hidden,\n      arrow = props.arrow,\n      _props$childElementPo = props.childElementPosition,\n      childElementPosition = _props$childElementPo === void 0 ? 'normal' : _props$childElementPo;\n  var context = useContext(FormContext);\n\n  var _useConfig = useConfig(),\n      locale = _useConfig.locale;\n\n  var hasFeedback = props.hasFeedback !== undefined ? props.hasFeedback : context.hasFeedback;\n  var layout = props.layout || context.layout;\n\n  var requiredMark = function () {\n    var requiredMarkStyle = context.requiredMarkStyle;\n\n    switch (requiredMarkStyle) {\n      case 'asterisk':\n        return required && React.createElement(\"span\", {\n          className: \"\".concat(classPrefix, \"-required-asterisk\")\n        }, \"*\");\n\n      case 'text-required':\n        return required && React.createElement(\"span\", {\n          className: \"\".concat(classPrefix, \"-required-text\")\n        }, \"(\", locale.Form.required, \")\");\n\n      case 'text-optional':\n        return !required && React.createElement(\"span\", {\n          className: \"\".concat(classPrefix, \"-required-text\")\n        }, \"(\", locale.Form.optional, \")\");\n\n      default:\n        return null;\n    }\n  }();\n\n  var labelElement = label ? React.createElement(\"label\", {\n    className: \"\".concat(classPrefix, \"-label\"),\n    htmlFor: htmlFor\n  }, label, requiredMark, help && React.createElement(Popover, {\n    content: help,\n    mode: 'dark',\n    trigger: 'click'\n  }, React.createElement(\"span\", {\n    className: \"\".concat(classPrefix, \"-label-help\"),\n    onClick: function onClick(e) {\n      e.preventDefault();\n    }\n  }, React.createElement(QuestionCircleOutline, null)))) : null;\n  var description = React.createElement(React.Fragment, null, props.description, hasFeedback && React.createElement(React.Fragment, null, props.errors.map(function (error, index) {\n    return React.createElement(\"div\", {\n      key: \"error-\".concat(index),\n      className: \"\".concat(classPrefix, \"-feedback-error\")\n    }, error);\n  }), props.warnings.map(function (warning, index) {\n    return React.createElement(\"div\", {\n      key: \"warning-\".concat(index),\n      className: \"\".concat(classPrefix, \"-feedback-warning\")\n    }, warning);\n  })));\n  return React.createElement(List.Item, {\n    style: style,\n    title: layout === 'vertical' && labelElement,\n    prefix: layout === 'horizontal' && labelElement,\n    extra: extra,\n    description: description,\n    className: classNames(classPrefix, className, \"\".concat(classPrefix, \"-\").concat(layout), _defineProperty({}, \"\".concat(classPrefix, \"-hidden\"), hidden)),\n    disabled: disabled,\n    onClick: props.onClick,\n    clickable: props.clickable,\n    arrow: arrow\n  }, React.createElement(\"div\", {\n    className: classNames(\"\".concat(classPrefix, \"-child\"), \"\".concat(classPrefix, \"-child-position-\").concat(childElementPosition))\n  }, React.createElement(\"div\", {\n    className: classNames(\"\".concat(classPrefix, \"-child-inner\"))\n  }, children)));\n};\n\nexport var FormItem = function FormItem(props) {\n  var className = props.className,\n      style = props.style,\n      label = props.label,\n      help = props.help,\n      extra = props.extra,\n      hasFeedback = props.hasFeedback,\n      name = props.name,\n      required = props.required,\n      noStyle = props.noStyle,\n      hidden = props.hidden,\n      layout = props.layout,\n      childElementPosition = props.childElementPosition,\n      description = props.description,\n      disabled = props.disabled,\n      rules = props.rules,\n      children = props.children,\n      messageVariables = props.messageVariables,\n      _props$trigger = props.trigger,\n      trigger = _props$trigger === void 0 ? 'onChange' : _props$trigger,\n      _props$validateTrigge = props.validateTrigger,\n      validateTrigger = _props$validateTrigge === void 0 ? trigger : _props$validateTrigge,\n      onClick = props.onClick,\n      shouldUpdate = props.shouldUpdate,\n      dependencies = props.dependencies,\n      clickable = props.clickable,\n      arrow = props.arrow,\n      fieldProps = __rest(props, [\"className\", \"style\", \"label\", \"help\", \"extra\", \"hasFeedback\", \"name\", \"required\", \"noStyle\", \"hidden\", \"layout\", \"childElementPosition\", \"description\", \"disabled\", \"rules\", \"children\", \"messageVariables\", \"trigger\", \"validateTrigger\", \"onClick\", \"shouldUpdate\", \"dependencies\", \"clickable\", \"arrow\"]);\n\n  var _useContext = useContext(FormContext),\n      formName = _useContext.name;\n\n  var _useContext2 = useContext(FieldContext),\n      contextValidateTrigger = _useContext2.validateTrigger;\n\n  var mergedValidateTrigger = validateTrigger !== undefined ? validateTrigger : contextValidateTrigger;\n  var updateRef = React.useRef(0);\n  updateRef.current += 1;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      subMetas = _useState2[0],\n      setSubMetas = _useState2[1];\n\n  var onSubMetaChange = useCallback(function (subMeta, namePath) {\n    setSubMetas(function (prevSubMetas) {\n      var nextSubMetas = Object.assign({}, prevSubMetas);\n      var nameKey = namePath.join(NAME_SPLIT);\n\n      if (subMeta.destroy) {\n        delete nextSubMetas[nameKey];\n      } else {\n        nextSubMetas[nameKey] = subMeta;\n      }\n\n      return nextSubMetas;\n    });\n  }, [setSubMetas]);\n\n  function renderLayout(baseChildren, fieldId, meta, isRequired) {\n    var _a, _b;\n\n    if (noStyle && !hidden) {\n      return baseChildren;\n    }\n\n    var curErrors = (_a = meta === null || meta === void 0 ? void 0 : meta.errors) !== null && _a !== void 0 ? _a : [];\n    var errors = Object.keys(subMetas).reduce(function (subErrors, key) {\n      var _a, _b;\n\n      var errors = (_b = (_a = subMetas[key]) === null || _a === void 0 ? void 0 : _a.errors) !== null && _b !== void 0 ? _b : [];\n\n      if (errors.length) {\n        subErrors = [].concat(_toConsumableArray(subErrors), _toConsumableArray(errors));\n      }\n\n      return subErrors;\n    }, curErrors);\n    var curWarnings = (_b = meta === null || meta === void 0 ? void 0 : meta.warnings) !== null && _b !== void 0 ? _b : [];\n    var warnings = Object.keys(subMetas).reduce(function (subWarnings, key) {\n      var _a, _b;\n\n      var warnings = (_b = (_a = subMetas[key]) === null || _a === void 0 ? void 0 : _a.warnings) !== null && _b !== void 0 ? _b : [];\n\n      if (warnings.length) {\n        subWarnings = [].concat(_toConsumableArray(subWarnings), _toConsumableArray(warnings));\n      }\n\n      return subWarnings;\n    }, curWarnings);\n    return React.createElement(FormItemLayout, {\n      className: className,\n      style: style,\n      label: label,\n      extra: extra,\n      help: help,\n      description: description,\n      required: isRequired,\n      disabled: disabled,\n      hasFeedback: hasFeedback,\n      htmlFor: fieldId,\n      errors: errors,\n      warnings: warnings,\n      onClick: onClick,\n      hidden: hidden,\n      layout: layout,\n      childElementPosition: childElementPosition,\n      clickable: clickable,\n      arrow: arrow\n    }, React.createElement(NoStyleItemContext.Provider, {\n      value: onSubMetaChange\n    }, baseChildren));\n  }\n\n  var isRenderProps = typeof children === 'function';\n\n  if (!name && !isRenderProps && !props.dependencies) {\n    return renderLayout(children);\n  }\n\n  var Variables = {};\n\n  if (typeof label === 'string') {\n    Variables.label = label;\n  }\n\n  if (messageVariables) {\n    Variables = Object.assign(Object.assign({}, Variables), messageVariables);\n  }\n\n  var notifyParentMetaChange = useContext(NoStyleItemContext);\n\n  var onMetaChange = function onMetaChange(meta) {\n    if (noStyle && notifyParentMetaChange) {\n      var namePath = meta.name;\n      notifyParentMetaChange(meta, namePath);\n    }\n  };\n\n  return React.createElement(Field, Object.assign({}, fieldProps, {\n    name: name,\n    shouldUpdate: shouldUpdate,\n    dependencies: dependencies,\n    rules: rules,\n    trigger: trigger,\n    validateTrigger: mergedValidateTrigger,\n    onMetaChange: onMetaChange,\n    messageVariables: Variables\n  }), function (control, meta, context) {\n    var childNode = null;\n    var isRequired = required !== undefined ? required : rules && rules.some(function (rule) {\n      return !!(rule && typeof rule === 'object' && rule.required);\n    });\n    var nameList = toArray(name).length && meta ? meta.name : [];\n    var fieldId = (nameList.length > 0 && formName ? [formName].concat(_toConsumableArray(nameList)) : nameList).join('_');\n\n    if (shouldUpdate && dependencies) {\n      devWarning('Form.Item', \"`shouldUpdate` and `dependencies` shouldn't be used together.\");\n    }\n\n    if (isRenderProps) {\n      if ((shouldUpdate || dependencies) && !name) {\n        childNode = children(context);\n      } else {\n        if (!(shouldUpdate || dependencies)) {\n          devWarning('Form.Item', '`children` of render props only work with `shouldUpdate` or `dependencies`.');\n        }\n\n        if (name) {\n          devWarning('Form.Item', \"Do not use `name` with `children` of render props since it's not a field.\");\n        }\n      } // not render props\n\n    } else if (dependencies && !name) {\n      devWarning('Form.Item', 'Must set `name` or use render props when `dependencies` is set.');\n    } else if (React.isValidElement(children)) {\n      if (children.props.defaultValue) {\n        devWarning('Form.Item', '`defaultValue` will not work on controlled Field. You should use `initialValues` of Form instead.');\n      }\n\n      var childProps = Object.assign(Object.assign({}, children.props), control);\n\n      if (!childProps.id) {\n        childProps.id = fieldId;\n      } // We should keep user origin event handler\n\n\n      var triggers = new Set([].concat(_toConsumableArray(toArray(trigger)), _toConsumableArray(toArray(mergedValidateTrigger))));\n      triggers.forEach(function (eventName) {\n        childProps[eventName] = function () {\n          var _a2, _c2;\n\n          var _a, _b, _c;\n\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          (_a = control[eventName]) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [control].concat(args));\n          (_c = (_b = children.props)[eventName]) === null || _c === void 0 ? void 0 : (_c2 = _c).call.apply(_c2, [_b].concat(args));\n        };\n      });\n      childNode = React.createElement(MemoInput, {\n        value: control[props.valuePropName || 'value'],\n        update: updateRef.current\n      }, React.cloneElement(children, childProps));\n    } else {\n      if (name) {\n        devWarning('Form.Item', '`name` is only used for validate React element. If you are using Form.Item as layout display, please remove `name` instead.');\n      }\n\n      childNode = children;\n    }\n\n    return renderLayout(childNode, fieldId, meta, isRequired);\n  });\n};","map":null,"metadata":{},"sourceType":"module"}