{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _defineProperty from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { __awaiter } from \"tslib\";\nimport React, { forwardRef, useImperativeHandle, useRef, useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { withNativeProps } from '../../utils/native-props';\nimport { withStopPropagation } from '../../utils/with-stop-propagation';\nimport { Arrow } from './arrow';\nimport { renderToContainer } from '../../utils/render-to-container';\nimport { arrow, computePosition, flip, offset, autoUpdate, hide, shift, limitShift } from '@floating-ui/dom';\nimport { Wrapper } from './wrapper';\nimport { useShouldRender } from '../../utils/should-render';\nimport { useClickAway, useIsomorphicLayoutEffect } from 'ahooks';\nimport { normalizePlacement } from './normalize-placement';\nimport { convertPx } from '../../utils/convert-px';\nvar classPrefix = \"adm-popover\";\nvar defaultProps = {\n  placement: 'top',\n  defaultVisible: false,\n  stopPropagation: ['click'],\n  getContainer: function getContainer() {\n    return document.body;\n  }\n};\nexport var Popover = forwardRef(function (p, ref) {\n  var props = mergeProps(defaultProps, p);\n  var _props$mode = props.mode,\n      mode = _props$mode === void 0 ? 'light' : _props$mode;\n  var placement = normalizePlacement(props.placement);\n\n  var _usePropsValue = usePropsValue({\n    value: props.visible,\n    defaultValue: props.defaultVisible,\n    onChange: props.onVisibleChange\n  }),\n      _usePropsValue2 = _slicedToArray(_usePropsValue, 2),\n      visible = _usePropsValue2[0],\n      setVisible = _usePropsValue2[1];\n\n  useImperativeHandle(ref, function () {\n    return {\n      show: function show() {\n        return setVisible(true);\n      },\n      hide: function hide() {\n        return setVisible(false);\n      },\n      visible: visible\n    };\n  }, [visible]);\n  var targetRef = useRef(null);\n  var floatingRef = useRef(null);\n  var arrowRef = useRef(null);\n  var floating = withStopPropagation(props.stopPropagation, withNativeProps(props, React.createElement(\"div\", {\n    className: classNames(classPrefix, \"\".concat(classPrefix, \"-\").concat(mode), !visible && \"\".concat(classPrefix, \"-hidden\")),\n    ref: floatingRef\n  }, React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-arrow\"),\n    ref: arrowRef\n  }, React.createElement(Arrow, {\n    className: \"\".concat(classPrefix, \"-arrow-icon\")\n  })), React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-inner\")\n  }, React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-inner-content\")\n  }, props.content)))));\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      targetElement = _useState2[0],\n      setTargetElement = _useState2[1];\n\n  function update() {\n    var _a, _b, _c;\n\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var target, floating, arrowElement, _yield$computePositio, x, y, realPlacement, middlewareData, side, arrowSide, _ref, arrowX, arrowY, arrowRotate;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              target = (_b = (_a = targetRef.current) === null || _a === void 0 ? void 0 : _a.element) !== null && _b !== void 0 ? _b : null;\n              floating = floatingRef.current;\n              arrowElement = arrowRef.current;\n              setTargetElement(target);\n\n              if (!(!target || !floating || !arrowElement)) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 6:\n              _context.next = 8;\n              return computePosition(target, floating, {\n                placement: placement,\n                middleware: [offset(convertPx(12)), shift({\n                  padding: convertPx(4),\n                  crossAxis: false,\n                  limiter: limitShift()\n                }), flip(), hide(), arrow({\n                  element: arrowElement,\n                  padding: convertPx(12)\n                })]\n              });\n\n            case 8:\n              _yield$computePositio = _context.sent;\n              x = _yield$computePositio.x;\n              y = _yield$computePositio.y;\n              realPlacement = _yield$computePositio.placement;\n              middlewareData = _yield$computePositio.middlewareData;\n              Object.assign(floating.style, {\n                left: \"\".concat(x, \"px\"),\n                top: \"\".concat(y, \"px\")\n              });\n              side = realPlacement.split('-')[0];\n              arrowSide = {\n                top: 'bottom',\n                right: 'left',\n                bottom: 'top',\n                left: 'right'\n              }[side];\n              _ref = (_c = middlewareData.arrow) !== null && _c !== void 0 ? _c : {}, arrowX = _ref.x, arrowY = _ref.y;\n              Object.assign(arrowElement.style, _defineProperty({\n                left: arrowX != null ? \"\".concat(arrowX, \"px\") : '',\n                top: arrowY != null ? \"\".concat(arrowY, \"px\") : '',\n                right: '',\n                bottom: ''\n              }, arrowSide, \"-\".concat(convertPx(8), \"px\")));\n              arrowRotate = {\n                top: '0deg',\n                bottom: '180deg',\n                left: '270deg',\n                right: '90deg'\n              }[side];\n              arrowElement.style.setProperty('--arrow-icon-rotate', arrowRotate);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    update();\n  });\n  useEffect(function () {\n    if (!targetElement) return;\n    if (!props.trigger) return;\n\n    function handleClick() {\n      setVisible(function (v) {\n        return !v;\n      });\n    }\n\n    targetElement.addEventListener('click', handleClick);\n    return function () {\n      targetElement.removeEventListener('click', handleClick);\n    };\n  }, [targetElement, props.trigger]);\n  useEffect(function () {\n    var floatingElement = floatingRef.current;\n    if (!targetElement || !floatingElement) return;\n    return autoUpdate(targetElement, floatingElement, update);\n  }, [targetElement]);\n  useClickAway(function () {\n    if (!props.trigger) return;\n    setVisible(false);\n  }, function () {\n    var _a;\n\n    return (_a = targetRef.current) === null || _a === void 0 ? void 0 : _a.element;\n  });\n  var shouldRender = useShouldRender(visible, false, props.destroyOnHide);\n  return React.createElement(React.Fragment, null, React.createElement(Wrapper, {\n    ref: targetRef\n  }, props.children), shouldRender && renderToContainer(props.getContainer, floating));\n});","map":null,"metadata":{},"sourceType":"module"}