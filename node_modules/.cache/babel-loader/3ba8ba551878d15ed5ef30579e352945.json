{"ast":null,"code":"import _toConsumableArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { devError } from '../../utils/dev-log';\nvar classPrefix = 'adm-text-area';\nvar defaultProps = {\n  rows: 2,\n  showCount: false,\n  autoSize: false,\n  defaultValue: ''\n};\nexport var TextArea = forwardRef(function (p, ref) {\n  var props = mergeProps(defaultProps, p);\n  var autoSize = props.autoSize,\n      showCount = props.showCount,\n      maxLength = props.maxLength;\n\n  var _usePropsValue = usePropsValue(Object.assign(Object.assign({}, props), {\n    value: props.value === null ? '' : props.value\n  })),\n      _usePropsValue2 = _slicedToArray(_usePropsValue, 2),\n      value = _usePropsValue2[0],\n      setValue = _usePropsValue2[1];\n\n  if (props.value === null) {\n    devError('TextArea', '`value` prop on `TextArea` should not be `null`. Consider using an empty string to clear the component.');\n  }\n\n  var nativeTextAreaRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return {\n      clear: function clear() {\n        setValue('');\n      },\n      focus: function focus() {\n        var _a;\n\n        (_a = nativeTextAreaRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      blur: function blur() {\n        var _a;\n\n        (_a = nativeTextAreaRef.current) === null || _a === void 0 ? void 0 : _a.blur();\n      }\n    };\n  });\n  useEffect(function () {\n    if (!autoSize) return;\n    var textArea = nativeTextAreaRef.current;\n    if (!textArea) return;\n    textArea.style.height = 'auto';\n    var height = textArea.scrollHeight;\n\n    if (typeof autoSize === 'object') {\n      var computedStyle = window.getComputedStyle(textArea);\n      var lineHeight = parseFloat(computedStyle.lineHeight);\n\n      if (autoSize.minRows) {\n        height = Math.max(height, autoSize.minRows * lineHeight);\n      }\n\n      if (autoSize.maxRows) {\n        height = Math.min(height, autoSize.maxRows * lineHeight);\n      }\n    }\n\n    textArea.style.height = \"\".concat(height, \"px\");\n  }, [value, autoSize]);\n  var compositingRef = useRef(false);\n  var count;\n\n  var valueLength = _toConsumableArray(value).length;\n\n  if (typeof showCount === 'function') {\n    count = showCount(valueLength, maxLength);\n  } else if (showCount) {\n    count = React.createElement(\"div\", {\n      className: \"\".concat(classPrefix, \"-count\")\n    }, maxLength === undefined ? valueLength : valueLength + '/' + maxLength);\n  }\n\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, React.createElement(\"textarea\", {\n    ref: nativeTextAreaRef,\n    className: \"\".concat(classPrefix, \"-element\"),\n    rows: props.rows,\n    value: value,\n    placeholder: props.placeholder,\n    onChange: function onChange(e) {\n      var v = e.target.value;\n\n      if (maxLength && !compositingRef.current) {\n        v = _toConsumableArray(v).slice(0, maxLength).join('');\n      }\n\n      setValue(v);\n    },\n    id: props.id,\n    onCompositionStart: function onCompositionStart(e) {\n      var _a;\n\n      compositingRef.current = true;\n      (_a = props.onCompositionStart) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    onCompositionEnd: function onCompositionEnd(e) {\n      var _a;\n\n      compositingRef.current = false;\n\n      if (maxLength) {\n        setValue(_toConsumableArray(value).slice(0, maxLength).join(''));\n      }\n\n      (_a = props.onCompositionEnd) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    autoComplete: props.autoComplete,\n    autoFocus: props.autoFocus,\n    disabled: props.disabled,\n    readOnly: props.readOnly,\n    onFocus: props.onFocus,\n    onBlur: props.onBlur\n  }), count));\n});\nTextArea.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}