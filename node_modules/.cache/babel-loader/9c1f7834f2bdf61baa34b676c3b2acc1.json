{"ast":null,"code":"import _toConsumableArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { __awaiter } from \"tslib\";\nimport React, { useRef, useState } from 'react';\nimport { AddOutline } from 'antd-mobile-icons';\nimport { mergeProps } from '../../utils/with-default-props';\nimport ImageViewer from '../image-viewer';\nimport PreviewItem from './preview-item';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { useIsomorphicLayoutEffect, useMemoizedFn, useUnmount } from 'ahooks';\nimport Space from '../space';\nimport { withNativeProps } from '../../utils/native-props';\nvar classPrefix = \"adm-image-uploader\";\nvar defaultProps = {\n  disableUpload: false,\n  deletable: true,\n  showUpload: true,\n  multiple: false,\n  maxCount: 0,\n  defaultValue: [],\n  accept: 'image/*',\n  preview: true,\n  showFailed: true\n};\nexport var ImageUploader = function ImageUploader(p) {\n  var props = mergeProps(defaultProps, p);\n\n  var _usePropsValue = usePropsValue(props),\n      _usePropsValue2 = _slicedToArray(_usePropsValue, 2),\n      value = _usePropsValue2[0],\n      setValue = _usePropsValue2[1];\n\n  var updateValue = useMemoizedFn(function (updater) {\n    setValue(updater(value));\n  });\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      tasks = _useState2[0],\n      setTasks = _useState2[1];\n\n  useIsomorphicLayoutEffect(function () {\n    setTasks(function (prev) {\n      return prev.filter(function (task) {\n        if (task.url === undefined) return true;\n        return !value.some(function (fileItem) {\n          return fileItem.url === task.url;\n        });\n      });\n    });\n  }, [value]);\n  var idCountRef = useRef(0);\n  var maxCount = props.maxCount,\n      onPreview = props.onPreview;\n\n  function processFile(file, fileList) {\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var beforeUpload, transformedFile;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              beforeUpload = props.beforeUpload;\n              transformedFile = file;\n              _context.next = 4;\n              return beforeUpload === null || beforeUpload === void 0 ? void 0 : beforeUpload(file, fileList);\n\n            case 4:\n              transformedFile = _context.sent;\n              return _context.abrupt(\"return\", transformedFile);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  }\n\n  function onChange(e) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var _this = this;\n\n      var rawFiles, files, postFiles, exceed, newTasks;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              e.persist();\n              rawFiles = e.target.files;\n\n              if (rawFiles) {\n                _context3.next = 4;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 4:\n              files = [].slice.call(rawFiles);\n\n              if (!props.beforeUpload) {\n                _context3.next = 9;\n                break;\n              }\n\n              postFiles = files.map(function (file) {\n                return processFile(file, files);\n              });\n              _context3.next = 9;\n              return Promise.all(postFiles).then(function (filesList) {\n                files = filesList.filter(Boolean);\n              });\n\n            case 9:\n              if (!(files.length === 0)) {\n                _context3.next = 11;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 11:\n              if (maxCount > 0) {\n                exceed = value.length + files.length - maxCount;\n\n                if (exceed > 0) {\n                  files = files.slice(0, files.length - exceed);\n                  (_a = props.onCountExceed) === null || _a === void 0 ? void 0 : _a.call(props, exceed);\n                }\n              }\n\n              newTasks = files.map(function (file) {\n                return {\n                  id: idCountRef.current++,\n                  status: 'pending',\n                  file: file\n                };\n              });\n              setTasks(function (prev) {\n                return [].concat(_toConsumableArray(prev), _toConsumableArray(newTasks));\n              });\n              _context3.next = 16;\n              return Promise.all(newTasks.map(function (currentTask) {\n                return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                  var result;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.prev = 0;\n                          _context2.next = 3;\n                          return props.upload(currentTask.file);\n\n                        case 3:\n                          result = _context2.sent;\n                          setTasks(function (prev) {\n                            return prev.map(function (task) {\n                              if (task.id === currentTask.id) {\n                                return Object.assign(Object.assign({}, task), {\n                                  url: result.url\n                                });\n                              }\n\n                              return task;\n                            });\n                          });\n                          updateValue(function (prev) {\n                            var newVal = Object.assign({}, result);\n                            return [].concat(_toConsumableArray(prev), [newVal]);\n                          });\n                          _context2.next = 12;\n                          break;\n\n                        case 8:\n                          _context2.prev = 8;\n                          _context2.t0 = _context2[\"catch\"](0);\n                          setTasks(function (prev) {\n                            return prev.map(function (task) {\n                              if (task.id === currentTask.id) {\n                                return Object.assign(Object.assign({}, task), {\n                                  status: 'fail'\n                                });\n                              }\n\n                              return task;\n                            });\n                          });\n                          throw _context2.t0;\n\n                        case 12:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2, null, [[0, 8]]);\n                }));\n              })).catch(function (error) {\n                return console.error(error);\n              });\n\n            case 16:\n              e.target.value = ''; // HACK: fix the same file doesn't trigger onChange\n\n            case 17:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n  }\n\n  var imageViewerHandlerRef = useRef(null);\n\n  function previewImage(index) {\n    imageViewerHandlerRef.current = ImageViewer.Multi.show({\n      images: value.map(function (fileItem) {\n        return fileItem.url;\n      }),\n      defaultIndex: index,\n      onClose: function onClose() {\n        imageViewerHandlerRef.current = null;\n      }\n    });\n  }\n\n  useUnmount(function () {\n    var _a;\n\n    (_a = imageViewerHandlerRef.current) === null || _a === void 0 ? void 0 : _a.close();\n  });\n  var showUpload = props.showUpload && (maxCount === 0 || value.length + tasks.length < maxCount);\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, React.createElement(Space, {\n    className: \"\".concat(classPrefix, \"-space\"),\n    wrap: true,\n    block: true\n  }, value.map(function (fileItem, index) {\n    var _a, _b;\n\n    return React.createElement(PreviewItem, {\n      key: (_a = fileItem.key) !== null && _a !== void 0 ? _a : index,\n      url: (_b = fileItem.thumbnailUrl) !== null && _b !== void 0 ? _b : fileItem.url,\n      deletable: props.deletable,\n      onClick: function onClick() {\n        if (props.preview) {\n          previewImage(index);\n        }\n\n        onPreview && onPreview(index, fileItem);\n      },\n      onDelete: function onDelete() {\n        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n          var _c, canDelete;\n\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return (_c = props.onDelete) === null || _c === void 0 ? void 0 : _c.call(props, fileItem);\n\n                case 2:\n                  canDelete = _context4.sent;\n\n                  if (!(canDelete === false)) {\n                    _context4.next = 5;\n                    break;\n                  }\n\n                  return _context4.abrupt(\"return\");\n\n                case 5:\n                  setValue(value.filter(function (x, i) {\n                    return i !== index;\n                  }));\n\n                case 6:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n      }\n    });\n  }), tasks.map(function (task) {\n    if (!props.showFailed && task.status === 'fail') {\n      return null;\n    }\n\n    return React.createElement(PreviewItem, {\n      key: task.id,\n      file: task.file,\n      deletable: task.status !== 'pending',\n      status: task.status,\n      onDelete: function onDelete() {\n        setTasks(tasks.filter(function (x) {\n          return x.id !== task.id;\n        }));\n      }\n    });\n  }), showUpload && React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-upload-button-wrap\")\n  }, props.children ? props.children : React.createElement(\"span\", {\n    className: \"\".concat(classPrefix, \"-cell \").concat(classPrefix, \"-upload-button\"),\n    role: 'button'\n  }, React.createElement(\"span\", {\n    className: \"\".concat(classPrefix, \"-upload-button-icon\")\n  }, React.createElement(AddOutline, null))), !props.disableUpload && React.createElement(\"input\", {\n    capture: props.capture,\n    accept: props.accept,\n    multiple: props.multiple,\n    type: 'file',\n    className: \"\".concat(classPrefix, \"-input\"),\n    onChange: onChange\n  })))));\n};","map":null,"metadata":{},"sourceType":"module"}