{"ast":null,"code":"import { useRef } from 'react';\n\nvar useRetryPlugin = function useRetryPlugin(fetchInstance, _a) {\n  var retryInterval = _a.retryInterval,\n      retryCount = _a.retryCount;\n  var timerRef = useRef();\n  var countRef = useRef(0);\n  var triggerByRetry = useRef(false);\n\n  if (!retryCount) {\n    return {};\n  }\n\n  return {\n    onBefore: function onBefore() {\n      if (!triggerByRetry.current) {\n        countRef.current = 0;\n      }\n\n      triggerByRetry.current = false;\n\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n    },\n    onSuccess: function onSuccess() {\n      countRef.current = 0;\n    },\n    onError: function onError() {\n      countRef.current += 1;\n\n      if (retryCount === -1 || countRef.current <= retryCount) {\n        // Exponential backoff\n        var timeout = retryInterval !== null && retryInterval !== void 0 ? retryInterval : Math.min(1000 * Math.pow(2, countRef.current), 30000);\n        timerRef.current = setTimeout(function () {\n          triggerByRetry.current = true;\n          fetchInstance.refresh();\n        }, timeout);\n      } else {\n        countRef.current = 0;\n      }\n    },\n    onCancel: function onCancel() {\n      countRef.current = 0;\n\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n    }\n  };\n};\n\nexport default useRetryPlugin;","map":{"version":3,"sources":["D:/react/project0330/node_modules/ahooks/es/useRequest/src/plugins/useRetryPlugin.js"],"names":["useRef","useRetryPlugin","fetchInstance","_a","retryInterval","retryCount","timerRef","countRef","triggerByRetry","onBefore","current","clearTimeout","onSuccess","onError","timeout","Math","min","pow","setTimeout","refresh","onCancel"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;;AAEA,IAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBC,aAAxB,EAAuCC,EAAvC,EAA2C;AAC9D,MAAIC,aAAa,GAAGD,EAAE,CAACC,aAAvB;AAAA,MACIC,UAAU,GAAGF,EAAE,CAACE,UADpB;AAEA,MAAIC,QAAQ,GAAGN,MAAM,EAArB;AACA,MAAIO,QAAQ,GAAGP,MAAM,CAAC,CAAD,CAArB;AACA,MAAIQ,cAAc,GAAGR,MAAM,CAAC,KAAD,CAA3B;;AAEA,MAAI,CAACK,UAAL,EAAiB;AACf,WAAO,EAAP;AACD;;AAED,SAAO;AACLI,IAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,UAAI,CAACD,cAAc,CAACE,OAApB,EAA6B;AAC3BH,QAAAA,QAAQ,CAACG,OAAT,GAAmB,CAAnB;AACD;;AAEDF,MAAAA,cAAc,CAACE,OAAf,GAAyB,KAAzB;;AAEA,UAAIJ,QAAQ,CAACI,OAAb,EAAsB;AACpBC,QAAAA,YAAY,CAACL,QAAQ,CAACI,OAAV,CAAZ;AACD;AACF,KAXI;AAYLE,IAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;AAC9BL,MAAAA,QAAQ,CAACG,OAAT,GAAmB,CAAnB;AACD,KAdI;AAeLG,IAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1BN,MAAAA,QAAQ,CAACG,OAAT,IAAoB,CAApB;;AAEA,UAAIL,UAAU,KAAK,CAAC,CAAhB,IAAqBE,QAAQ,CAACG,OAAT,IAAoBL,UAA7C,EAAyD;AACvD;AACA,YAAIS,OAAO,GAAGV,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqDA,aAArD,GAAqEW,IAAI,CAACC,GAAL,CAAS,OAAOD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYV,QAAQ,CAACG,OAArB,CAAhB,EAA+C,KAA/C,CAAnF;AACAJ,QAAAA,QAAQ,CAACI,OAAT,GAAmBQ,UAAU,CAAC,YAAY;AACxCV,UAAAA,cAAc,CAACE,OAAf,GAAyB,IAAzB;AACAR,UAAAA,aAAa,CAACiB,OAAd;AACD,SAH4B,EAG1BL,OAH0B,CAA7B;AAID,OAPD,MAOO;AACLP,QAAAA,QAAQ,CAACG,OAAT,GAAmB,CAAnB;AACD;AACF,KA5BI;AA6BLU,IAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5Bb,MAAAA,QAAQ,CAACG,OAAT,GAAmB,CAAnB;;AAEA,UAAIJ,QAAQ,CAACI,OAAb,EAAsB;AACpBC,QAAAA,YAAY,CAACL,QAAQ,CAACI,OAAV,CAAZ;AACD;AACF;AAnCI,GAAP;AAqCD,CAhDD;;AAkDA,eAAeT,cAAf","sourcesContent":["import { useRef } from 'react';\n\nvar useRetryPlugin = function useRetryPlugin(fetchInstance, _a) {\n  var retryInterval = _a.retryInterval,\n      retryCount = _a.retryCount;\n  var timerRef = useRef();\n  var countRef = useRef(0);\n  var triggerByRetry = useRef(false);\n\n  if (!retryCount) {\n    return {};\n  }\n\n  return {\n    onBefore: function onBefore() {\n      if (!triggerByRetry.current) {\n        countRef.current = 0;\n      }\n\n      triggerByRetry.current = false;\n\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n    },\n    onSuccess: function onSuccess() {\n      countRef.current = 0;\n    },\n    onError: function onError() {\n      countRef.current += 1;\n\n      if (retryCount === -1 || countRef.current <= retryCount) {\n        // Exponential backoff\n        var timeout = retryInterval !== null && retryInterval !== void 0 ? retryInterval : Math.min(1000 * Math.pow(2, countRef.current), 30000);\n        timerRef.current = setTimeout(function () {\n          triggerByRetry.current = true;\n          fetchInstance.refresh();\n        }, timeout);\n      } else {\n        countRef.current = 0;\n      }\n    },\n    onCancel: function onCancel() {\n      countRef.current = 0;\n\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n    }\n  };\n};\n\nexport default useRetryPlugin;"]},"metadata":{},"sourceType":"module"}