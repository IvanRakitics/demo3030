{"ast":null,"code":"import _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { withNativeProps } from '../../utils/native-props';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { useUnmountedRef } from 'ahooks';\nimport { useLockScroll } from '../../utils/use-lock-scroll';\nimport { useSpring, animated } from '@react-spring/web';\nimport { renderToContainer } from '../../utils/render-to-container';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { useConfig } from '../config-provider';\nimport { useShouldRender } from '../../utils/should-render';\nimport { withStopPropagation } from '../../utils/with-stop-propagation';\nvar classPrefix = \"adm-mask\";\nvar opacityRecord = {\n  default: 0.55,\n  thin: 0.35,\n  thick: 0.75\n};\nvar defaultProps = {\n  visible: true,\n  destroyOnClose: false,\n  forceRender: false,\n  color: 'black',\n  opacity: 'default',\n  disableBodyScroll: true,\n  getContainer: null,\n  stopPropagation: ['click']\n};\nexport var Mask = function Mask(p) {\n  var props = mergeProps(defaultProps, p);\n\n  var _useConfig = useConfig(),\n      locale = _useConfig.locale;\n\n  var ref = useRef(null);\n  useLockScroll(ref, props.visible && props.disableBodyScroll);\n  var background = useMemo(function () {\n    var _a;\n\n    var opacity = (_a = opacityRecord[props.opacity]) !== null && _a !== void 0 ? _a : props.opacity;\n    var rgb = props.color === 'white' ? '255, 255, 255' : '0, 0, 0';\n    return \"rgba(\".concat(rgb, \", \").concat(opacity, \")\");\n  }, [props.color, props.opacity]);\n\n  var _useState = useState(props.visible),\n      _useState2 = _slicedToArray(_useState, 2),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  var unmountedRef = useUnmountedRef();\n\n  var _useSpring = useSpring({\n    opacity: props.visible ? 1 : 0,\n    config: {\n      precision: 0.01,\n      mass: 1,\n      tension: 200,\n      friction: 30,\n      clamp: true\n    },\n    onStart: function onStart() {\n      setActive(true);\n    },\n    onRest: function onRest() {\n      var _a, _b;\n\n      if (unmountedRef.current) return;\n      setActive(props.visible);\n\n      if (props.visible) {\n        (_a = props.afterShow) === null || _a === void 0 ? void 0 : _a.call(props);\n      } else {\n        (_b = props.afterClose) === null || _b === void 0 ? void 0 : _b.call(props);\n      }\n    }\n  }),\n      opacity = _useSpring.opacity;\n\n  var shouldRender = useShouldRender(active, props.forceRender, props.destroyOnClose);\n  var node = withStopPropagation(props.stopPropagation, withNativeProps(props, React.createElement(animated.div, {\n    className: classPrefix,\n    ref: ref,\n    style: Object.assign(Object.assign({\n      background: background,\n      opacity: opacity\n    }, props.style), {\n      display: active ? 'unset' : 'none'\n    })\n  }, props.onMaskClick && React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-aria-button\"),\n    role: 'button',\n    \"aria-label\": locale.Mask.name,\n    onClick: props.onMaskClick\n  }), React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-content\")\n  }, shouldRender && props.children))));\n  return renderToContainer(props.getContainer, node);\n};","map":null,"metadata":{},"sourceType":"module"}