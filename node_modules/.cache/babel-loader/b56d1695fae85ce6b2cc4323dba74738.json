{"ast":null,"code":"import React, { useRef, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { DownOutline, TextDeletionOutline } from 'antd-mobile-icons';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { shuffle } from '../../utils/shuffle';\nimport Popup from '../popup';\nimport { withNativeProps } from '../../utils/native-props';\nimport SafeArea from '../safe-area';\nimport { useMemoizedFn } from 'ahooks';\nvar classPrefix = 'adm-number-keyboard';\nvar defaultProps = {\n  defaultVisible: false,\n  randomOrder: false,\n  showCloseButton: true,\n  confirmText: null,\n  closeOnConfirm: true,\n  safeArea: true\n};\nexport var NumberKeyboard = function NumberKeyboard(p) {\n  var props = mergeProps(defaultProps, p);\n  var visible = props.visible,\n      title = props.title,\n      getContainer = props.getContainer,\n      confirmText = props.confirmText,\n      customKey = props.customKey,\n      randomOrder = props.randomOrder,\n      showCloseButton = props.showCloseButton,\n      onInput = props.onInput;\n  var keyboardRef = useRef(null);\n  var keys = useMemo(function () {\n    var defaultKeys = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];\n    var keyList = randomOrder ? shuffle(defaultKeys) : defaultKeys;\n    keyList.push('0');\n\n    if (confirmText) {\n      keyList.push(customKey || '');\n    } else {\n      keyList.splice(9, 0, customKey || '');\n      keyList.push('BACKSPACE');\n    }\n\n    return keyList;\n  }, [customKey, confirmText, randomOrder, randomOrder && visible]);\n  var timeoutRef = useRef(-1);\n  var intervalRef = useRef(-1);\n  var onDelete = useMemoizedFn(function () {\n    var _a;\n\n    (_a = props.onDelete) === null || _a === void 0 ? void 0 : _a.call(props);\n  });\n\n  var onBackspacePressStart = function onBackspacePressStart() {\n    timeoutRef.current = window.setTimeout(function () {\n      onDelete();\n      intervalRef.current = window.setInterval(onDelete, 150);\n    }, 700);\n  };\n\n  var onBackspacePressEnd = function onBackspacePressEnd() {\n    clearTimeout(timeoutRef.current);\n    clearInterval(intervalRef.current);\n  }; // 点击键盘按键\n\n\n  var onKeyPress = function onKeyPress(e, key) {\n    var _a, _b;\n\n    e.preventDefault();\n\n    switch (key) {\n      case 'BACKSPACE':\n        onDelete === null || onDelete === void 0 ? void 0 : onDelete();\n        break;\n\n      case 'OK':\n        (_a = props.onConfirm) === null || _a === void 0 ? void 0 : _a.call(props);\n\n        if (props.closeOnConfirm) {\n          (_b = props.onClose) === null || _b === void 0 ? void 0 : _b.call(props);\n        }\n\n        break;\n\n      default:\n        // 当 customKey 不存在时，点击该键不应该触发 onInput\n        if (key !== '') onInput === null || onInput === void 0 ? void 0 : onInput(key);\n        break;\n    }\n  }; // 渲染 title 和 close button\n\n\n  var renderHeader = function renderHeader() {\n    if (!showCloseButton && !title) return null;\n    return React.createElement(\"div\", {\n      className: classNames(\"\".concat(classPrefix, \"-header\"), {\n        'with-title': !!title\n      })\n    }, title && React.createElement(\"div\", {\n      className: \"\".concat(classPrefix, \"-title\")\n    }, title), showCloseButton && React.createElement(\"span\", {\n      className: \"\".concat(classPrefix, \"-header-close-button\"),\n      onClick: function onClick() {\n        var _a;\n\n        (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);\n      },\n      role: 'button',\n      title: 'CLOSE'\n    }, React.createElement(DownOutline, null)));\n  }; // 渲染基础键盘按键\n\n\n  var renderKey = function renderKey(key, index) {\n    var isNumberKey = /^\\d$/.test(key);\n    var className = classNames(\"\".concat(classPrefix, \"-key\"), {\n      'number-key': isNumberKey,\n      'sign-key': !isNumberKey && key,\n      'mid-key': index === 9 && !!confirmText\n    });\n    return React.createElement(\"div\", {\n      key: key,\n      className: className,\n      onTouchStart: function onTouchStart() {\n        if (key === 'BACKSPACE') {\n          onBackspacePressStart();\n        }\n      },\n      onTouchEnd: function onTouchEnd(e) {\n        onKeyPress(e, key);\n\n        if (key === 'BACKSPACE') {\n          onBackspacePressEnd();\n        }\n      },\n      onMouseUp: function onMouseUp(e) {\n        onKeyPress(e, key);\n      },\n      title: key,\n      role: 'button'\n    }, key === 'BACKSPACE' ? React.createElement(TextDeletionOutline, null) : key);\n  };\n\n  return React.createElement(Popup, {\n    visible: visible,\n    getContainer: getContainer,\n    mask: false,\n    afterClose: props.afterClose,\n    afterShow: props.afterShow,\n    className: \"\".concat(classPrefix, \"-popup\"),\n    stopPropagation: props.stopPropagation\n  }, withNativeProps(props, React.createElement(\"div\", {\n    ref: keyboardRef,\n    className: classPrefix,\n    onMouseDown: function onMouseDown(e) {\n      e.preventDefault();\n    }\n  }, renderHeader(), React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-wrapper\")\n  }, React.createElement(\"div\", {\n    className: classNames(\"\".concat(classPrefix, \"-main\"), {\n      'confirmed-style': !!confirmText\n    })\n  }, keys.map(renderKey)), !!confirmText && React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-confirm\")\n  }, React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-key extra-key bs-key\"),\n    onTouchStart: function onTouchStart() {\n      onBackspacePressStart();\n    },\n    onTouchEnd: function onTouchEnd(e) {\n      onKeyPress(e, 'BACKSPACE');\n      onBackspacePressEnd();\n    },\n    onMouseUp: function onMouseUp(e) {\n      return onKeyPress(e, 'BACKSPACE');\n    },\n    title: 'BACKSPACE',\n    role: 'button'\n  }, React.createElement(TextDeletionOutline, null)), React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-key extra-key ok-key\"),\n    onTouchEnd: function onTouchEnd(e) {\n      return onKeyPress(e, 'OK');\n    },\n    onMouseUp: function onMouseUp(e) {\n      return onKeyPress(e, 'OK');\n    },\n    role: 'button'\n  }, confirmText))), props.safeArea && React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-footer\")\n  }, React.createElement(SafeArea, {\n    position: 'bottom'\n  })))));\n};","map":null,"metadata":{},"sourceType":"module"}