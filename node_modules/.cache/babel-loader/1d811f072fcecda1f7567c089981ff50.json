{"ast":null,"code":"import { useRef } from 'react';\nimport { useMemoizedFn, useUpdate } from 'ahooks';\nexport function usePropsValue(options) {\n  const {\n    value,\n    defaultValue,\n    onChange\n  } = options;\n  const update = useUpdate();\n  const stateRef = useRef(value !== undefined ? value : defaultValue);\n\n  if (value !== undefined) {\n    stateRef.current = value;\n  }\n\n  const setState = useMemoizedFn(v => {\n    const nextValue = typeof v === 'function' ? v(stateRef.current) : v;\n\n    if (value === undefined) {\n      stateRef.current = nextValue;\n      update();\n    }\n\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextValue);\n  });\n  return [stateRef.current, setState];\n}","map":{"version":3,"sources":["D:/react/project0330/node_modules/antd-mobile/es/utils/use-props-value.js"],"names":["useRef","useMemoizedFn","useUpdate","usePropsValue","options","value","defaultValue","onChange","update","stateRef","undefined","current","setState","v","nextValue"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,QAAzC;AACA,OAAO,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;AACrC,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA;AAHI,MAIFH,OAJJ;AAKA,QAAMI,MAAM,GAAGN,SAAS,EAAxB;AACA,QAAMO,QAAQ,GAAGT,MAAM,CAACK,KAAK,KAAKK,SAAV,GAAsBL,KAAtB,GAA8BC,YAA/B,CAAvB;;AAEA,MAAID,KAAK,KAAKK,SAAd,EAAyB;AACvBD,IAAAA,QAAQ,CAACE,OAAT,GAAmBN,KAAnB;AACD;;AAED,QAAMO,QAAQ,GAAGX,aAAa,CAACY,CAAC,IAAI;AAClC,UAAMC,SAAS,GAAG,OAAOD,CAAP,KAAa,UAAb,GAA0BA,CAAC,CAACJ,QAAQ,CAACE,OAAV,CAA3B,GAAgDE,CAAlE;;AAEA,QAAIR,KAAK,KAAKK,SAAd,EAAyB;AACvBD,MAAAA,QAAQ,CAACE,OAAT,GAAmBG,SAAnB;AACAN,MAAAA,MAAM;AACP;;AAEDD,IAAAA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACO,SAAD,CAA5D;AACD,GAT6B,CAA9B;AAUA,SAAO,CAACL,QAAQ,CAACE,OAAV,EAAmBC,QAAnB,CAAP;AACD","sourcesContent":["import { useRef } from 'react';\nimport { useMemoizedFn, useUpdate } from 'ahooks';\nexport function usePropsValue(options) {\n  const {\n    value,\n    defaultValue,\n    onChange\n  } = options;\n  const update = useUpdate();\n  const stateRef = useRef(value !== undefined ? value : defaultValue);\n\n  if (value !== undefined) {\n    stateRef.current = value;\n  }\n\n  const setState = useMemoizedFn(v => {\n    const nextValue = typeof v === 'function' ? v(stateRef.current) : v;\n\n    if (value === undefined) {\n      stateRef.current = nextValue;\n      update();\n    }\n\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextValue);\n  });\n  return [stateRef.current, setState];\n}"]},"metadata":{},"sourceType":"module"}