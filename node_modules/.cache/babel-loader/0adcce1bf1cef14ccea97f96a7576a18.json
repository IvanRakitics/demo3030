{"ast":null,"code":"import _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { withNativeProps } from '../../utils/native-props';\nimport classNames from 'classnames';\nimport { bound } from '../../utils/bound';\nimport { usePropsValue } from '../../utils/use-props-value';\nvar classPrefix = 'adm-passcode-input';\nvar defaultProps = {\n  defaultValue: '',\n  length: 6,\n  plain: false,\n  error: false,\n  seperated: false,\n  caret: true\n};\nexport var PasscodeInput = forwardRef(function (p, ref) {\n  var props = mergeProps(defaultProps, p); // 防止 length 值不合法\n\n  var cellLength = props.length > 0 && props.length < Infinity ? Math.floor(props.length) : defaultProps.length;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      focused = _useState2[0],\n      setFocused = _useState2[1];\n\n  var _usePropsValue = usePropsValue(props),\n      _usePropsValue2 = _slicedToArray(_usePropsValue, 2),\n      value = _usePropsValue2[0],\n      setValue = _usePropsValue2[1];\n\n  var rootRef = useRef(null);\n  var nativeInputRef = useRef(null);\n  useEffect(function () {\n    var _a;\n\n    if (value.length >= cellLength) {\n      (_a = props.onFill) === null || _a === void 0 ? void 0 : _a.call(props, value);\n    }\n  }, [value, cellLength]);\n\n  var onFocus = function onFocus() {\n    var _a, _b;\n\n    if (!props.keyboard) {\n      (_a = nativeInputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n\n    setFocused(true);\n    (_b = props.onFocus) === null || _b === void 0 ? void 0 : _b.call(props);\n  };\n\n  useEffect(function () {\n    if (!focused) return;\n    var timeout = window.setTimeout(function () {\n      var _a;\n\n      (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView({\n        block: 'center',\n        inline: 'center',\n        behavior: 'smooth'\n      });\n    }, 100);\n    return function () {\n      window.clearTimeout(timeout);\n    };\n  }, [focused]);\n\n  var onBlur = function onBlur() {\n    var _a;\n\n    setFocused(false);\n    (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props);\n  };\n\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function focus() {\n        var _a;\n\n        return (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      blur: function blur() {\n        var _a, _b;\n\n        (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.blur();\n        (_b = nativeInputRef.current) === null || _b === void 0 ? void 0 : _b.blur();\n      }\n    };\n  });\n\n  var renderCells = function renderCells() {\n    var cells = [];\n    var chars = value.split('');\n    var caretIndex = chars.length; // 光标位置index等于当前文字长度\n\n    var focusedIndex = bound(chars.length, 0, cellLength - 1);\n\n    for (var i = 0; i < cellLength; i++) {\n      cells.push(React.createElement(\"div\", {\n        className: classNames(\"\".concat(classPrefix, \"-cell\"), {\n          caret: props.caret && caretIndex === i && focused,\n          focused: focusedIndex === i && focused,\n          dot: !props.plain && chars[i]\n        }),\n        key: i\n      }, chars[i] && props.plain ? chars[i] : ''));\n    }\n\n    return cells;\n  };\n\n  var cls = classNames(classPrefix, {\n    focused: focused,\n    error: props.error,\n    seperated: props.seperated\n  });\n  return React.createElement(React.Fragment, null, withNativeProps(props, React.createElement(\"div\", {\n    ref: rootRef,\n    tabIndex: 0,\n    className: cls,\n    onFocus: onFocus,\n    onBlur: onBlur\n  }, React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-cell-container\")\n  }, renderCells()), React.createElement(\"input\", {\n    ref: nativeInputRef,\n    className: \"\".concat(classPrefix, \"-native-input\"),\n    value: value,\n    type: 'text',\n    pattern: '[0-9]*',\n    inputMode: 'numeric',\n    onChange: function onChange(e) {\n      setValue(e.target.value.slice(0, props.length));\n    }\n  }))), props.keyboard && React.cloneElement(props.keyboard, {\n    visible: focused,\n    onInput: function onInput(v) {\n      if (value.length < cellLength) {\n        setValue((value + v).slice(0, props.length));\n      }\n    },\n    onDelete: function onDelete() {\n      setValue(value.slice(0, -1));\n    },\n    onClose: function onClose() {\n      var _a;\n\n      (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.blur();\n    }\n  }));\n});","map":null,"metadata":{},"sourceType":"module"}