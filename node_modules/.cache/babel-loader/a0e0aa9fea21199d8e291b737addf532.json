{"ast":null,"code":"import _defineProperty from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { forwardRef, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { mergeProps } from '../../utils/with-default-props';\nimport classNames from 'classnames';\nimport { SwiperItem } from './swiper-item';\nimport { devWarning } from '../../utils/dev-log';\nimport { useSpring, animated } from '@react-spring/web';\nimport { useDrag } from '@use-gesture/react';\nimport PageIndicator from '../page-indicator';\nimport { staged } from 'staged-components';\nimport { useRefState } from '../../utils/use-ref-state';\nimport { bound } from '../../utils/bound';\nimport { useIsomorphicLayoutEffect, useUpdateEffect } from 'ahooks';\nvar defaultProps = {\n  defaultIndex: 0,\n  allowTouchMove: true,\n  autoplay: false,\n  autoplayInterval: 3000,\n  loop: false,\n  direction: 'horizontal',\n  slideSize: 100,\n  trackOffset: 0,\n  stuckAtBoundary: true,\n  rubberband: true\n};\nexport var Swiper = forwardRef(staged(function (p, ref) {\n  var props = mergeProps(defaultProps, p);\n  var isVertical = props.direction === 'vertical';\n  var slideRatio = props.slideSize / 100;\n  var offsetRatio = props.trackOffset / 100;\n\n  var _useMemo = useMemo(function () {\n    var count = 0;\n    var validChildren = React.Children.map(props.children, function (child) {\n      if (!React.isValidElement(child)) return null;\n\n      if (child.type !== SwiperItem) {\n        devWarning('Swiper', 'The children of `Swiper` must be `Swiper.Item` components.');\n        return null;\n      }\n\n      count++;\n      return child;\n    });\n    return {\n      validChildren: validChildren,\n      count: count\n    };\n  }, [props.children]),\n      validChildren = _useMemo.validChildren,\n      count = _useMemo.count;\n\n  if (count === 0 || !validChildren) {\n    devWarning('Swiper', '`Swiper` needs at least one child.');\n    return null;\n  }\n\n  return function () {\n    var loop = props.loop;\n\n    if (slideRatio * (count - 1) < 1) {\n      loop = false;\n    }\n\n    var trackRef = useRef(null);\n\n    function getSlidePixels() {\n      var track = trackRef.current;\n      if (!track) return 0;\n      var trackPixels = isVertical ? track.offsetHeight : track.offsetWidth;\n      return trackPixels * props.slideSize / 100;\n    }\n\n    var _useState = useState(props.defaultIndex),\n        _useState2 = _slicedToArray(_useState, 2),\n        current = _useState2[0],\n        setCurrent = _useState2[1];\n\n    useUpdateEffect(function () {\n      var _a;\n\n      (_a = props.onIndexChange) === null || _a === void 0 ? void 0 : _a.call(props, current);\n    }, [current]);\n\n    var _useRefState = useRefState(false),\n        _useRefState2 = _slicedToArray(_useRefState, 3),\n        dragging = _useRefState2[0],\n        setDragging = _useRefState2[1],\n        draggingRef = _useRefState2[2];\n\n    function boundIndex(current) {\n      var min = 0;\n      var max = count - 1;\n\n      if (props.stuckAtBoundary) {\n        min += offsetRatio / slideRatio;\n        max -= (1 - slideRatio - offsetRatio) / slideRatio;\n      }\n\n      return bound(current, min, max);\n    }\n\n    var _useSpring = useSpring(function () {\n      return {\n        position: boundIndex(current) * 100,\n        config: {\n          tension: 200,\n          friction: 30\n        },\n        onRest: function onRest() {\n          if (draggingRef.current) return;\n          var rawX = position.get();\n          var totalWidth = 100 * count;\n          var standardPosition = modulus(rawX, totalWidth);\n          if (standardPosition === rawX) return;\n          api.start({\n            position: standardPosition,\n            immediate: true\n          });\n        }\n      };\n    }, [count]),\n        _useSpring2 = _slicedToArray(_useSpring, 2),\n        position = _useSpring2[0].position,\n        api = _useSpring2[1];\n\n    var bind = useDrag(function (state) {\n      var slidePixels = getSlidePixels();\n      if (!slidePixels) return;\n      var paramIndex = isVertical ? 1 : 0;\n      var offset = state.offset[paramIndex];\n      var direction = state.direction[paramIndex];\n      var velocity = state.velocity[paramIndex];\n      setDragging(true);\n\n      if (!state.last) {\n        api.start({\n          position: offset * 100 / slidePixels,\n          immediate: true\n        });\n      } else {\n        var minIndex = Math.floor(offset / slidePixels);\n        var maxIndex = minIndex + 1;\n        var index = Math.round((offset + velocity * 2000 * direction) / slidePixels);\n        swipeTo(bound(index, minIndex, maxIndex));\n        window.setTimeout(function () {\n          setDragging(false);\n        });\n      }\n    }, {\n      transform: function transform(_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            x = _ref2[0],\n            y = _ref2[1];\n\n        return [-x, -y];\n      },\n      from: function from() {\n        var slidePixels = getSlidePixels();\n        return [position.get() / 100 * slidePixels, position.get() / 100 * slidePixels];\n      },\n      bounds: function bounds() {\n        if (loop) return {};\n        var slidePixels = getSlidePixels();\n        var lowerBound = boundIndex(0) * slidePixels;\n        var upperBound = boundIndex(count - 1) * slidePixels;\n        return isVertical ? {\n          top: lowerBound,\n          bottom: upperBound\n        } : {\n          left: lowerBound,\n          right: upperBound\n        };\n      },\n      rubberband: props.rubberband,\n      axis: isVertical ? 'y' : 'x',\n      preventScroll: !isVertical,\n      pointer: {\n        touch: true\n      }\n    });\n\n    function swipeTo(index) {\n      var immediate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var roundedIndex = Math.round(index);\n      var targetIndex = loop ? modulus(roundedIndex, count) : bound(roundedIndex, 0, count - 1);\n      setCurrent(targetIndex);\n      api.start({\n        position: (loop ? roundedIndex : boundIndex(roundedIndex)) * 100,\n        immediate: immediate\n      });\n    }\n\n    function swipeNext() {\n      swipeTo(Math.round(position.get() / 100) + 1);\n    }\n\n    function swipePrev() {\n      swipeTo(Math.round(position.get() / 100) - 1);\n    }\n\n    useImperativeHandle(ref, function () {\n      return {\n        swipeTo: swipeTo,\n        swipeNext: swipeNext,\n        swipePrev: swipePrev\n      };\n    });\n    useIsomorphicLayoutEffect(function () {\n      var maxIndex = validChildren.length - 1;\n\n      if (current > maxIndex) {\n        swipeTo(maxIndex, true);\n      }\n    });\n    var autoplay = props.autoplay,\n        autoplayInterval = props.autoplayInterval;\n    useEffect(function () {\n      if (!autoplay || dragging) return;\n      var interval = window.setInterval(function () {\n        swipeNext();\n      }, autoplayInterval);\n      return function () {\n        window.clearInterval(interval);\n      };\n    }, [autoplay, autoplayInterval, dragging]);\n\n    function renderTrackInner() {\n      if (loop) {\n        return React.createElement(\"div\", {\n          className: 'adm-swiper-track-inner'\n        }, React.Children.map(validChildren, function (child, index) {\n          var _style;\n\n          return React.createElement(animated.div, {\n            className: 'adm-swiper-slide',\n            style: (_style = {}, _defineProperty(_style, isVertical ? 'y' : 'x', position.to(function (position) {\n              var finalPosition = -position + index * 100;\n              var totalWidth = count * 100;\n              var flagWidth = totalWidth / 2;\n              finalPosition = modulus(finalPosition + flagWidth, totalWidth) - flagWidth;\n              return \"\".concat(finalPosition, \"%\");\n            })), _defineProperty(_style, isVertical ? 'top' : 'left', \"-\".concat(index * 100, \"%\")), _style)\n          }, child);\n        }));\n      } else {\n        return React.createElement(animated.div, {\n          className: 'adm-swiper-track-inner',\n          style: _defineProperty({}, isVertical ? 'y' : 'x', position.to(function (position) {\n            return \"\".concat(-position, \"%\");\n          }))\n        }, React.Children.map(validChildren, function (child) {\n          return React.createElement(\"div\", {\n            className: 'adm-swiper-slide'\n          }, child);\n        }));\n      }\n    }\n\n    var style = {\n      '--slide-size': \"\".concat(props.slideSize, \"%\"),\n      '--track-offset': \"\".concat(props.trackOffset, \"%\")\n    };\n    return withNativeProps(props, React.createElement(\"div\", {\n      className: classNames('adm-swiper', \"adm-swiper-\".concat(props.direction)),\n      style: style\n    }, React.createElement(\"div\", Object.assign({\n      ref: trackRef,\n      className: classNames('adm-swiper-track', {\n        'adm-swiper-track-allow-touch-move': props.allowTouchMove\n      }),\n      onClickCapture: function onClickCapture(e) {\n        if (draggingRef.current) {\n          e.stopPropagation();\n        }\n      }\n    }, props.allowTouchMove ? bind() : {}), renderTrackInner()), props.indicator === undefined ? React.createElement(\"div\", {\n      className: 'adm-swiper-indicator'\n    }, React.createElement(PageIndicator, Object.assign({}, props.indicatorProps, {\n      total: count,\n      current: current,\n      direction: props.direction\n    }))) : props.indicator(count, current)));\n  };\n}));\n\nfunction modulus(value, division) {\n  var remainder = value % division;\n  return remainder < 0 ? remainder + division : remainder;\n}","map":null,"metadata":{},"sourceType":"module"}