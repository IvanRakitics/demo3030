{"ast":null,"code":"import _toConsumableArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport dayjs from 'dayjs';\nimport isoWeek from 'dayjs/plugin/isoWeek';\nimport isoWeeksInYear from 'dayjs/plugin/isoWeeksInYear';\nimport isLeapYear from 'dayjs/plugin/isLeapYear';\ndayjs.extend(isoWeek);\ndayjs.extend(isoWeeksInYear);\ndayjs.extend(isLeapYear);\nvar precisionRankRecord = {\n  year: 0,\n  week: 1,\n  'week-day': 2\n};\nexport function defaultRenderLabel(type, data) {\n  return data.toString();\n}\nexport function generateDatePickerColumns(selected, min, max, precision, renderLabel, filter) {\n  var ret = [];\n  var minYear = min.getFullYear();\n  var maxYear = max.getFullYear();\n  var rank = precisionRankRecord[precision];\n\n  if (rank >= precisionRankRecord.year) {\n    var years = [];\n\n    for (var i = minYear; i <= maxYear; i++) {\n      var value = i.toString();\n      years.push({\n        label: renderLabel ? renderLabel('year', i) : value,\n        value: value\n      });\n    }\n\n    ret.push(years);\n  }\n\n  var selectedYear = parseInt(selected[0]);\n  var isInMinYear = selectedYear === minYear;\n  var isInMaxYear = selectedYear === maxYear;\n  var minDay = dayjs(min);\n  var maxDay = dayjs(max);\n  var minWeek = minDay.isoWeek();\n  var maxWeek = maxDay.isoWeek();\n  var minWeekday = minDay.isoWeekday();\n  var maxWeekday = maxDay.isoWeekday();\n  var selectedWeek = parseInt(selected[1]);\n  var isInMinWeek = isInMinYear && selectedWeek === minWeek;\n  var isInMaxWeek = isInMaxYear && selectedWeek === maxWeek;\n  var selectedYearWeeks = dayjs(\"\".concat(selectedYear, \"-01-01\")).isoWeeksInYear();\n\n  var generateColumn = function generateColumn(from, to, precision) {\n    var column = [];\n\n    for (var _i = from; _i <= to; _i++) {\n      column.push(_i);\n    }\n\n    var prefix = selected.slice(0, precisionRankRecord[precision]);\n    var currentFilter = filter === null || filter === void 0 ? void 0 : filter[precision];\n\n    if (currentFilter && typeof currentFilter === 'function') {\n      column = column.filter(function (i) {\n        return currentFilter(i, {\n          get date() {\n            var stringArray = [].concat(_toConsumableArray(prefix), [i.toString()]);\n            return convertStringArrayToDate(stringArray);\n          }\n\n        });\n      });\n    }\n\n    return column;\n  };\n\n  if (rank >= precisionRankRecord.week) {\n    var lower = isInMinYear ? minWeek : 1;\n    var upper = isInMaxYear ? maxWeek : selectedYearWeeks;\n    var weeks = generateColumn(lower, upper, 'week');\n    ret.push(weeks.map(function (v) {\n      return {\n        label: renderLabel('week', v),\n        value: v.toString()\n      };\n    }));\n  }\n\n  if (rank >= precisionRankRecord['week-day']) {\n    var _lower = isInMinWeek ? minWeekday : 1;\n\n    var _upper = isInMaxWeek ? maxWeekday : 7;\n\n    var _weeks = generateColumn(_lower, _upper, 'week-day');\n\n    ret.push(_weeks.map(function (v) {\n      return {\n        label: renderLabel('week-day', v),\n        value: v.toString()\n      };\n    }));\n  }\n\n  return ret;\n}\nexport function convertDateToStringArray(date) {\n  if (!date) return [];\n  var day = dayjs(date);\n  return [day.isoWeekYear().toString(), day.isoWeek().toString(), day.isoWeekday().toString()];\n}\nexport function convertStringArrayToDate(value) {\n  var _a, _b, _c;\n\n  var yearString = (_a = value[0]) !== null && _a !== void 0 ? _a : '1900';\n  var weekString = (_b = value[1]) !== null && _b !== void 0 ? _b : '1';\n  var weekdayString = (_c = value[2]) !== null && _c !== void 0 ? _c : '1';\n  var day = dayjs().year(parseInt(yearString)).isoWeek(parseInt(weekString)).isoWeekday(parseInt(weekdayString)).hour(0).minute(0).second(0);\n  return day.toDate();\n}","map":null,"metadata":{},"sourceType":"module"}