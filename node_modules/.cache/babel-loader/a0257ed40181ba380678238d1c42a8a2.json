{"ast":null,"code":"import _defineProperty from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport classNames from 'classnames';\nimport Tabs from '../tabs';\nimport CheckList from '../check-list';\nimport { withNativeProps } from '../../utils/native-props';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { useCascaderValueExtend } from './use-cascader-value-extend';\nimport { useConfig } from '../config-provider';\nimport { optionSkeleton } from './option-skeleton';\nimport Skeleton from '../skeleton';\nvar classPrefix = \"adm-cascader-view\";\nvar defaultProps = {\n  defaultValue: []\n};\nexport var CascaderView = function CascaderView(p) {\n  var _useConfig = useConfig(),\n      locale = _useConfig.locale;\n\n  var props = mergeProps(defaultProps, {\n    placeholder: locale.Cascader.placeholder\n  }, p);\n\n  var _usePropsValue = usePropsValue(Object.assign(Object.assign({}, props), {\n    onChange: function onChange(val) {\n      var _a;\n\n      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, val, generateValueExtend(val));\n    }\n  })),\n      _usePropsValue2 = _slicedToArray(_usePropsValue, 2),\n      value = _usePropsValue2[0],\n      setValue = _usePropsValue2[1];\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      tabActiveKey = _useState2[0],\n      setTabActiveKey = _useState2[1];\n\n  var generateValueExtend = useCascaderValueExtend(props.options);\n  var levels = useMemo(function () {\n    var ret = [];\n    var currentOptions = props.options;\n    var reachedEnd = false;\n\n    var _iterator = _createForOfIteratorHelper(value),\n        _step;\n\n    try {\n      var _loop = function _loop() {\n        var v = _step.value;\n        var target = currentOptions.find(function (option) {\n          return option.value === v;\n        });\n        ret.push({\n          selected: target,\n          options: currentOptions\n        });\n\n        if (!target || !target.children) {\n          reachedEnd = true;\n          return \"break\";\n        }\n\n        currentOptions = target.children;\n      };\n\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _ret = _loop();\n\n        if (_ret === \"break\") break;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (!reachedEnd) {\n      ret.push({\n        selected: undefined,\n        options: currentOptions\n      });\n    }\n\n    return ret;\n  }, [value, props.options]);\n  useEffect(function () {\n    setTabActiveKey(levels.length - 1);\n  }, [value]);\n  useEffect(function () {\n    var max = levels.length - 1;\n\n    if (tabActiveKey > max) {\n      setTabActiveKey(max);\n    }\n  }, [tabActiveKey, levels]);\n\n  var onItemSelect = function onItemSelect(selectValue, depth) {\n    var next = value.slice(0, depth);\n\n    if (selectValue !== undefined) {\n      next[depth] = selectValue;\n    }\n\n    setValue(next);\n  };\n\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, React.createElement(Tabs, {\n    activeKey: tabActiveKey.toString(),\n    onChange: function onChange(key) {\n      return setTabActiveKey(parseInt(key));\n    },\n    stretch: false,\n    className: \"\".concat(classPrefix, \"-tabs\")\n  }, levels.map(function (level, index) {\n    var selected = level.selected;\n    return React.createElement(Tabs.Tab, {\n      key: index,\n      title: React.createElement(\"div\", {\n        className: \"\".concat(classPrefix, \"-header-title\")\n      }, selected ? selected.label : props.placeholder),\n      forceRender: true\n    }, React.createElement(\"div\", {\n      className: \"\".concat(classPrefix, \"-content\")\n    }, level.options === optionSkeleton ? React.createElement(\"div\", {\n      className: \"\".concat(classPrefix, \"-skeleton\")\n    }, React.createElement(Skeleton, {\n      className: \"\".concat(classPrefix, \"-skeleton-line-1\"),\n      animated: true\n    }), React.createElement(Skeleton, {\n      className: \"\".concat(classPrefix, \"-skeleton-line-2\"),\n      animated: true\n    }), React.createElement(Skeleton, {\n      className: \"\".concat(classPrefix, \"-skeleton-line-3\"),\n      animated: true\n    }), React.createElement(Skeleton, {\n      className: \"\".concat(classPrefix, \"-skeleton-line-4\"),\n      animated: true\n    })) : React.createElement(CheckList, {\n      value: [value[index]],\n      onChange: function onChange(selectValue) {\n        return onItemSelect(selectValue[0], index);\n      }\n    }, level.options.map(function (option) {\n      var active = value[index] === option.value;\n      return React.createElement(CheckList.Item, {\n        value: option.value,\n        key: option.value,\n        disabled: option.disabled,\n        className: classNames(\"\".concat(classPrefix, \"-item\"), _defineProperty({}, \"\".concat(classPrefix, \"-item-active\"), active))\n      }, option.label);\n    }))));\n  }))));\n};","map":null,"metadata":{},"sourceType":"module"}