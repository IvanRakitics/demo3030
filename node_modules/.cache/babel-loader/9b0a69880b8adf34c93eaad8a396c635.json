{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { useMemo } from 'react';\nimport memoize from 'lodash/memoize';\nexport function useCascaderValueExtend(options) {\n  var generateItems = useMemo(function () {\n    return memoize(function (val) {\n      var ret = [];\n      var currentOptions = options;\n\n      var _iterator = _createForOfIteratorHelper(val),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var v = _step.value;\n          var target = currentOptions.find(function (option) {\n            return option.value === v;\n          });\n\n          if (!target) {\n            return \"break\";\n          }\n\n          ret.push(target);\n          if (!target.children) return \"break\";\n          currentOptions = target.children;\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _ret = _loop();\n\n          if (_ret === \"break\") break;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return ret;\n    }, function (val) {\n      return JSON.stringify(val);\n    });\n  }, [options]);\n  var generateIsLeaf = useMemo(function () {\n    return memoize(function (val) {\n      var _a;\n\n      var isLeaf = false;\n\n      var _iterator2 = _createForOfIteratorHelper(val),\n          _step2;\n\n      try {\n        var _loop2 = function _loop2() {\n          var v = _step2.value;\n          var target = options.find(function (option) {\n            return option.value === v;\n          });\n\n          if (!target) {\n            return \"break\";\n          }\n\n          isLeaf = ((_a = target.children) === null || _a === void 0 ? void 0 : _a.length) === val.length;\n        };\n\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _ret2 = _loop2();\n\n          if (_ret2 === \"break\") break;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return isLeaf;\n    }, function (val) {\n      return JSON.stringify(val);\n    });\n  }, [options]);\n\n  function generateValueExtend(val) {\n    return {\n      get items() {\n        return generateItems(val);\n      },\n\n      get isLeaf() {\n        return generateIsLeaf(val);\n      }\n\n    };\n  }\n\n  return generateValueExtend;\n}","map":null,"metadata":{},"sourceType":"module"}