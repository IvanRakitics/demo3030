{"ast":null,"code":"import { useRef } from 'react';\nvar MIN_DISTANCE = 10;\n\nfunction getDirection(x, y) {\n  if (x > y && x > MIN_DISTANCE) {\n    return 'horizontal';\n  }\n\n  if (y > x && y > MIN_DISTANCE) {\n    return 'vertical';\n  }\n\n  return '';\n}\n\nexport function useTouch() {\n  var startX = useRef(0);\n  var startY = useRef(0);\n  var deltaX = useRef(0);\n  var deltaY = useRef(0);\n  var offsetX = useRef(0);\n  var offsetY = useRef(0);\n  var direction = useRef('');\n\n  var isVertical = function isVertical() {\n    return direction.current === 'vertical';\n  };\n\n  var isHorizontal = function isHorizontal() {\n    return direction.current === 'horizontal';\n  };\n\n  var reset = function reset() {\n    deltaX.current = 0;\n    deltaY.current = 0;\n    offsetX.current = 0;\n    offsetY.current = 0;\n    direction.current = '';\n  };\n\n  var start = function start(event) {\n    reset();\n    startX.current = event.touches[0].clientX;\n    startY.current = event.touches[0].clientY;\n  };\n\n  var move = function move(event) {\n    var touch = event.touches[0]; // Fix: Safari back will set clientX to negative number\n\n    deltaX.current = touch.clientX < 0 ? 0 : touch.clientX - startX.current;\n    deltaY.current = touch.clientY - startY.current;\n    offsetX.current = Math.abs(deltaX.current);\n    offsetY.current = Math.abs(deltaY.current);\n\n    if (!direction.current) {\n      direction.current = getDirection(offsetX.current, offsetY.current);\n    }\n  };\n\n  return {\n    move: move,\n    start: start,\n    reset: reset,\n    startX: startX,\n    startY: startY,\n    deltaX: deltaX,\n    deltaY: deltaY,\n    offsetX: offsetX,\n    offsetY: offsetY,\n    direction: direction,\n    isVertical: isVertical,\n    isHorizontal: isHorizontal\n  };\n}","map":null,"metadata":{},"sourceType":"module"}