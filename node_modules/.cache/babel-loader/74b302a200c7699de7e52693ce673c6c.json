{"ast":null,"code":"import _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { forwardRef, useImperativeHandle, useRef, useState } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { useDrag } from '@use-gesture/react';\nimport { useSpring, animated } from '@react-spring/web';\nimport { supportsPassive } from '../../utils/supports-passive';\nimport { nearest } from '../../utils/nearest';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { useLockScroll } from '../../utils/use-lock-scroll';\nimport { useMemoizedFn } from 'ahooks';\nvar defaultProps = {\n  handleDraggingOfContent: true\n};\nexport var FloatingPanel = forwardRef(function (p, ref) {\n  var _a, _b;\n\n  var props = mergeProps(defaultProps, p);\n  var anchors = props.anchors;\n  var maxHeight = (_a = anchors[anchors.length - 1]) !== null && _a !== void 0 ? _a : window.innerHeight;\n  var possibles = anchors.map(function (x) {\n    return -x;\n  });\n  var elementRef = useRef(null);\n  var headerRef = useRef(null);\n  var contentRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      pulling = _useState2[0],\n      setPulling = _useState2[1];\n\n  var pullingRef = useRef(false);\n  var bounds = {\n    top: possibles[possibles.length - 1],\n    bottom: possibles[0]\n  };\n  var onHeightChange = useMemoizedFn((_b = props.onHeightChange) !== null && _b !== void 0 ? _b : function () {});\n\n  var _useSpring = useSpring(function () {\n    return {\n      y: bounds.bottom,\n      config: {\n        tension: 300\n      },\n      onChange: function onChange(result) {\n        onHeightChange(result.value.y, y.isAnimating);\n      }\n    };\n  }),\n      _useSpring2 = _slicedToArray(_useSpring, 2),\n      y = _useSpring2[0].y,\n      api = _useSpring2[1];\n\n  useDrag(function (state) {\n    var _state$offset = _slicedToArray(state.offset, 2),\n        offsetY = _state$offset[1];\n\n    if (state.first) {\n      var target = state.event.target;\n      var header = headerRef.current;\n\n      if (header === target || (header === null || header === void 0 ? void 0 : header.contains(target))) {\n        pullingRef.current = true;\n      } else {\n        if (!props.handleDraggingOfContent) return;\n        var reachedTop = y.goal <= bounds.top;\n        var content = contentRef.current;\n        if (!content) return;\n\n        if (reachedTop) {\n          if (content.scrollTop <= 0 && state.direction[1] > 0) {\n            pullingRef.current = true;\n          }\n        } else {\n          pullingRef.current = true;\n        }\n      }\n    }\n\n    setPulling(pullingRef.current);\n    if (!pullingRef.current) return;\n    var event = state.event;\n\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    event.stopPropagation();\n    var nextY = offsetY;\n\n    if (state.last) {\n      pullingRef.current = false;\n      setPulling(false);\n      nextY = nearest(possibles, offsetY);\n    }\n\n    api.start({\n      y: nextY\n    });\n  }, {\n    axis: 'y',\n    bounds: bounds,\n    rubberband: true,\n    from: function from() {\n      return [0, y.get()];\n    },\n    pointer: {\n      touch: true\n    },\n    target: elementRef,\n    eventOptions: supportsPassive ? {\n      passive: false\n    } : false\n  });\n  useImperativeHandle(ref, function () {\n    return {\n      setHeight: function setHeight(height, options) {\n        api.start({\n          y: -height,\n          immediate: options === null || options === void 0 ? void 0 : options.immediate\n        });\n      }\n    };\n  }, [api]);\n  useLockScroll(elementRef, true);\n  return withNativeProps(props, React.createElement(animated.div, {\n    ref: elementRef,\n    className: 'adm-floating-panel',\n    style: {\n      height: maxHeight,\n      translateY: y.to(function (y) {\n        return \"calc(100% + (\".concat(y, \"px))\");\n      })\n    }\n  }, React.createElement(\"div\", {\n    className: 'adm-floating-panel-mask',\n    style: {\n      display: pulling ? 'block' : 'none'\n    }\n  }), React.createElement(\"div\", {\n    className: 'adm-floating-panel-header',\n    ref: headerRef\n  }, React.createElement(\"div\", {\n    className: 'adm-floating-panel-bar'\n  })), React.createElement(\"div\", {\n    className: 'adm-floating-panel-content',\n    ref: contentRef\n  }, props.children)));\n});","map":null,"metadata":{},"sourceType":"module"}