{"ast":null,"code":"import { useRef } from 'react';\nimport useLatest from '../useLatest';\nimport { getTargetElement } from '../utils/domTarget';\nimport isBrowser from '../utils/isBrowser';\nimport useEffectWithTarget from '../utils/useEffectWithTarget';\nvar touchSupported = isBrowser && ( // @ts-ignore\n'ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch);\n\nfunction useLongPress(onLongPress, target, _a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.delay,\n      delay = _c === void 0 ? 300 : _c,\n      onClick = _b.onClick,\n      onLongPressEnd = _b.onLongPressEnd;\n\n  var onLongPressRef = useLatest(onLongPress);\n  var onClickRef = useLatest(onClick);\n  var onLongPressEndRef = useLatest(onLongPressEnd);\n  var timerRef = useRef();\n  var isTriggeredRef = useRef(false);\n  useEffectWithTarget(function () {\n    var targetElement = getTargetElement(target);\n\n    if (!(targetElement === null || targetElement === void 0 ? void 0 : targetElement.addEventListener)) {\n      return;\n    }\n\n    var onStart = function onStart(event) {\n      timerRef.current = setTimeout(function () {\n        onLongPressRef.current(event);\n        isTriggeredRef.current = true;\n      }, delay);\n    };\n\n    var onEnd = function onEnd(event, shouldTriggerClick) {\n      var _a;\n\n      if (shouldTriggerClick === void 0) {\n        shouldTriggerClick = false;\n      }\n\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n\n      if (isTriggeredRef.current) {\n        (_a = onLongPressEndRef.current) === null || _a === void 0 ? void 0 : _a.call(onLongPressEndRef, event);\n      }\n\n      if (shouldTriggerClick && !isTriggeredRef.current && onClickRef.current) {\n        onClickRef.current(event);\n      }\n\n      isTriggeredRef.current = false;\n    };\n\n    var onEndWithClick = function onEndWithClick(event) {\n      return onEnd(event, true);\n    };\n\n    if (!touchSupported) {\n      targetElement.addEventListener('mousedown', onStart);\n      targetElement.addEventListener('mouseup', onEndWithClick);\n      targetElement.addEventListener('mouseleave', onEnd);\n    } else {\n      targetElement.addEventListener('touchstart', onStart);\n      targetElement.addEventListener('touchend', onEndWithClick);\n    }\n\n    return function () {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n        isTriggeredRef.current = false;\n      }\n\n      if (!touchSupported) {\n        targetElement.removeEventListener('mousedown', onStart);\n        targetElement.removeEventListener('mouseup', onEndWithClick);\n        targetElement.removeEventListener('mouseleave', onEnd);\n      } else {\n        targetElement.removeEventListener('touchstart', onStart);\n        targetElement.removeEventListener('touchend', onEndWithClick);\n      }\n    };\n  }, [], target);\n}\n\nexport default useLongPress;","map":null,"metadata":{},"sourceType":"module"}