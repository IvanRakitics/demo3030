{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { __awaiter } from \"tslib\";\nimport React, { useState } from 'react';\nimport { mergeProps } from '../../utils/with-default-props';\nimport classNames from 'classnames';\nimport { useUnmountedRef } from 'ahooks';\nimport Mask from '../mask';\nimport { DialogActionButton } from './dialog-action-button';\nimport Image from '../image';\nimport { renderToContainer } from '../../utils/render-to-container';\nimport { withStopPropagation } from '../../utils/with-stop-propagation';\nimport AutoCenter from '../auto-center';\nimport { useSpring, animated } from '@react-spring/web';\nimport { withNativeProps } from '../../utils/native-props';\nvar defaultProps = {\n  visible: false,\n  actions: [],\n  closeOnAction: false,\n  closeOnMaskClick: false,\n  stopPropagation: ['click'],\n  getContainer: null,\n  disableBodyScroll: true\n};\nexport var Dialog = function Dialog(p) {\n  var props = mergeProps(defaultProps, p);\n  var unmountedRef = useUnmountedRef();\n  var style = useSpring({\n    scale: props.visible ? 1 : 0.8,\n    opacity: props.visible ? 1 : 0,\n    config: {\n      mass: 1.2,\n      tension: 200,\n      friction: 25,\n      clamp: true\n    },\n    onStart: function onStart() {\n      setActive(true);\n    },\n    onRest: function onRest() {\n      var _a, _b;\n\n      if (unmountedRef.current) return;\n      setActive(props.visible);\n\n      if (props.visible) {\n        (_a = props.afterShow) === null || _a === void 0 ? void 0 : _a.call(props);\n      } else {\n        (_b = props.afterClose) === null || _b === void 0 ? void 0 : _b.call(props);\n      }\n    }\n  });\n\n  var _useState = useState(props.visible),\n      _useState2 = _slicedToArray(_useState, 2),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  var body = React.createElement(\"div\", {\n    className: classNames(cls('body'), props.image && cls('with-image'), props.bodyClassName),\n    style: props.bodyStyle\n  }, !!props.image && React.createElement(\"div\", {\n    className: cls('image-container')\n  }, React.createElement(Image, {\n    src: props.image,\n    alt: 'dialog header image',\n    width: '100%'\n  })), !!props.header && React.createElement(\"div\", {\n    className: cls('header')\n  }, React.createElement(AutoCenter, null, props.header)), !!props.title && React.createElement(\"div\", {\n    className: cls('title')\n  }, props.title), React.createElement(\"div\", {\n    className: classNames(cls('content'), !props.content && cls('content-empty'))\n  }, typeof props.content === 'string' ? React.createElement(AutoCenter, null, props.content) : props.content), React.createElement(\"div\", {\n    className: cls('footer')\n  }, props.actions.map(function (row, index) {\n    var actions = Array.isArray(row) ? row : [row];\n    return React.createElement(\"div\", {\n      className: cls('action-row'),\n      key: index\n    }, actions.map(function (action, index) {\n      return React.createElement(DialogActionButton, {\n        key: action.key,\n        action: action,\n        onAction: function onAction() {\n          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var _a, _b, _c;\n\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return Promise.all([(_a = action.onClick) === null || _a === void 0 ? void 0 : _a.call(action), (_b = props.onAction) === null || _b === void 0 ? void 0 : _b.call(props, action, index)]);\n\n                  case 2:\n                    if (props.closeOnAction) {\n                      (_c = props.onClose) === null || _c === void 0 ? void 0 : _c.call(props);\n                    }\n\n                  case 3:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n        }\n      });\n    }));\n  })));\n  var node = withNativeProps(props, React.createElement(\"div\", {\n    className: cls(),\n    style: {\n      display: active ? 'unset' : 'none'\n    }\n  }, React.createElement(Mask, {\n    visible: props.visible,\n    onMaskClick: props.closeOnMaskClick ? props.onClose : undefined,\n    style: props.maskStyle,\n    className: classNames(cls('mask'), props.maskClassName),\n    disableBodyScroll: props.disableBodyScroll\n  }), React.createElement(\"div\", {\n    className: cls('wrap'),\n    style: {\n      pointerEvents: props.visible ? 'unset' : 'none'\n    }\n  }, React.createElement(animated.div, {\n    style: style\n  }, body))));\n  return renderToContainer(props.getContainer, withStopPropagation(props.stopPropagation, node));\n};\n\nfunction cls() {\n  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return 'adm-dialog' + (name && '-') + name;\n}","map":null,"metadata":{},"sourceType":"module"}