{"ast":null,"code":"import _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useRef } from 'react';\nimport { useSpring, animated } from '@react-spring/web';\nimport { rubberbandIfOutOfBounds } from '../../utils/rubberband';\nimport { useDragAndPinch } from '../../utils/use-drag-and-pinch';\nimport { bound } from '../../utils/bound';\nvar classPrefix = \"adm-image-viewer\";\nexport var Slide = function Slide(props) {\n  var dragLockRef = props.dragLockRef;\n  var controlRef = useRef(null);\n  var imgRef = useRef(null);\n\n  var _useSpring = useSpring(function () {\n    return {\n      zoom: 1,\n      x: 0,\n      y: 0,\n      config: {\n        tension: 200\n      }\n    };\n  }),\n      _useSpring2 = _slicedToArray(_useSpring, 2),\n      _useSpring2$ = _useSpring2[0],\n      zoom = _useSpring2$.zoom,\n      x = _useSpring2$.x,\n      y = _useSpring2$.y,\n      api = _useSpring2[1];\n\n  var pinchLockRef = useRef(false);\n\n  function boundXY(_ref, rubberband) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        x = _ref2[0],\n        y = _ref2[1];\n\n    var currentZoom = zoom.get();\n    var xOffset = 0,\n        yOffset = 0;\n\n    if (imgRef.current && controlRef.current) {\n      xOffset = ((currentZoom * imgRef.current.width || 0) - controlRef.current.clientWidth) / 2;\n      yOffset = ((currentZoom * imgRef.current.height || 0) - controlRef.current.clientHeight) / 2;\n    }\n\n    xOffset = xOffset > 0 ? xOffset : 0;\n    yOffset = yOffset > 0 ? yOffset : 0;\n    var bounds = {\n      left: -xOffset,\n      right: xOffset,\n      top: -yOffset,\n      bottom: yOffset\n    };\n\n    if (rubberband) {\n      return [rubberbandIfOutOfBounds(x, bounds.left, bounds.right, currentZoom * 50), rubberbandIfOutOfBounds(y, bounds.top, bounds.bottom, currentZoom * 50)];\n    } else {\n      return [bound(x, bounds.left, bounds.right), bound(y, bounds.top, bounds.bottom)];\n    }\n  }\n\n  useDragAndPinch({\n    onDrag: function onDrag(state) {\n      if (state.tap && state.elapsedTime > 0 && state.elapsedTime < 1000) {\n        // 判断点击时间>0是为了过滤掉非正常操作，例如用户长按选择图片之后的取消操作（也是一次点击）\n        props.onTap();\n        return;\n      }\n\n      var currentZoom = zoom.get();\n\n      if (dragLockRef) {\n        dragLockRef.current = currentZoom !== 1;\n      }\n\n      if (!pinchLockRef.current && currentZoom <= 1) {\n        api.start({\n          x: 0,\n          y: 0\n        });\n      } else {\n        if (state.last) {\n          var _boundXY = boundXY([state.offset[0] + state.velocity[0] * state.direction[0] * 200, state.offset[1] + state.velocity[1] * state.direction[1] * 200], false),\n              _boundXY2 = _slicedToArray(_boundXY, 2),\n              _x = _boundXY2[0],\n              _y = _boundXY2[1];\n\n          api.start({\n            x: _x,\n            y: _y\n          });\n        } else {\n          var _boundXY3 = boundXY(state.offset, true),\n              _boundXY4 = _slicedToArray(_boundXY3, 2),\n              _x2 = _boundXY4[0],\n              _y2 = _boundXY4[1];\n\n          api.start({\n            x: _x2,\n            y: _y2,\n            immediate: true\n          });\n        }\n      }\n    },\n    onPinch: function onPinch(state) {\n      var _a;\n\n      pinchLockRef.current = !state.last;\n\n      var _state$offset = _slicedToArray(state.offset, 1),\n          d = _state$offset[0];\n\n      if (d < 0) return;\n      var nextZoom = state.last ? bound(d, 1, props.maxZoom) : d;\n      api.start({\n        zoom: nextZoom,\n        immediate: !state.last\n      });\n      (_a = props.onZoomChange) === null || _a === void 0 ? void 0 : _a.call(props, nextZoom);\n\n      if (state.last && nextZoom <= 1) {\n        api.start({\n          x: 0,\n          y: 0\n        });\n\n        if (dragLockRef) {\n          dragLockRef.current = false;\n        }\n      } else {\n        if (dragLockRef) {\n          dragLockRef.current = true;\n        }\n      }\n    }\n  }, {\n    target: controlRef,\n    drag: {\n      // filterTaps: true,\n      from: function from() {\n        return [x.get(), y.get()];\n      },\n      pointer: {\n        touch: true\n      }\n    },\n    pinch: {\n      from: function from() {\n        return [zoom.get(), 0];\n      },\n      pointer: {\n        touch: true\n      }\n    }\n  });\n  return React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-slide\"),\n    onPointerMove: function onPointerMove(e) {\n      if (zoom.get() !== 1) {\n        e.stopPropagation();\n      }\n    }\n  }, React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-control\"),\n    ref: controlRef\n  }, React.createElement(animated.div, {\n    className: \"\".concat(classPrefix, \"-image-wrapper\"),\n    style: {\n      translateX: x,\n      translateY: y,\n      scale: zoom\n    }\n  }, React.createElement(\"img\", {\n    ref: imgRef,\n    src: props.image,\n    draggable: false,\n    alt: props.image\n  }))));\n};","map":null,"metadata":{},"sourceType":"module"}