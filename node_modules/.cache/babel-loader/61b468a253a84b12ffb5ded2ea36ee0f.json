{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport ResizeObserver from 'resize-observer-polyfill';\nimport useRafState from '../useRafState';\nimport { getTargetElement } from '../utils/domTarget';\nimport useIsomorphicLayoutEffectWithTarget from '../utils/useIsomorphicLayoutEffectWithTarget';\n\nfunction useSize(target) {\n  var _a = __read(useRafState(), 2),\n      state = _a[0],\n      setState = _a[1];\n\n  useIsomorphicLayoutEffectWithTarget(function () {\n    var el = getTargetElement(target);\n\n    if (!el) {\n      return;\n    }\n\n    var resizeObserver = new ResizeObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _a = entry.target,\n            clientWidth = _a.clientWidth,\n            clientHeight = _a.clientHeight;\n        setState({\n          width: clientWidth,\n          height: clientHeight\n        });\n      });\n    });\n    resizeObserver.observe(el);\n    return function () {\n      resizeObserver.disconnect();\n    };\n  }, [], target);\n  return state;\n}\n\nexport default useSize;","map":null,"metadata":{},"sourceType":"module"}