{"ast":null,"code":"import _toConsumableArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport dayjs from 'dayjs';\nimport isoWeek from 'dayjs/plugin/isoWeek';\nimport isoWeeksInYear from 'dayjs/plugin/isoWeeksInYear';\nimport isLeapYear from 'dayjs/plugin/isLeapYear';\ndayjs.extend(isoWeek);\ndayjs.extend(isoWeeksInYear);\ndayjs.extend(isLeapYear);\nvar precisionRankRecord = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n};\nexport function defaultRenderLabel(type, data) {\n  switch (type) {\n    case 'minute':\n    case 'second':\n    case 'hour':\n      return ('0' + data.toString()).slice(-2);\n\n    default:\n      return data.toString();\n  }\n}\nexport function generateDatePickerColumns(selected, min, max, precision, renderLabel, filter) {\n  var ret = [];\n  var minYear = min.getFullYear();\n  var minMonth = min.getMonth() + 1;\n  var minDay = min.getDate();\n  var minHour = min.getHours();\n  var minMinute = min.getMinutes();\n  var minSecond = min.getSeconds();\n  var maxYear = max.getFullYear();\n  var maxMonth = max.getMonth() + 1;\n  var maxDay = max.getDate();\n  var maxHour = max.getHours();\n  var maxMinute = max.getMinutes();\n  var maxSecond = max.getSeconds();\n  var rank = precisionRankRecord[precision];\n\n  if (rank >= precisionRankRecord.year) {\n    var years = [];\n\n    for (var i = minYear; i <= maxYear; i++) {\n      var value = i.toString();\n      years.push({\n        label: renderLabel ? renderLabel('year', i) : value,\n        value: value\n      });\n    }\n\n    ret.push(years);\n  }\n\n  var selectedYear = parseInt(selected[0]);\n  var firstDayInSelectedMonth = dayjs(convertStringArrayToDate([selected[0], selected[1], '1']));\n  var selectedMonth = parseInt(selected[1]);\n  var selectedDay = parseInt(selected[2]);\n  var selectedHour = parseInt(selected[3]);\n  var selectedMinute = parseInt(selected[4]);\n  var isInMinYear = selectedYear === minYear;\n  var isInMaxYear = selectedYear === maxYear;\n  var isInMinMonth = isInMinYear && selectedMonth === minMonth;\n  var isInMaxMonth = isInMaxYear && selectedMonth === maxMonth;\n  var isInMinDay = isInMinMonth && selectedDay === minDay;\n  var isInMaxDay = isInMaxMonth && selectedDay === maxDay;\n  var isInMinHour = isInMinDay && selectedHour === minHour;\n  var isInMaxHour = isInMaxDay && selectedHour === maxHour;\n  var isInMinMinute = isInMinHour && selectedMinute === minMinute;\n  var isInMaxMinute = isInMaxHour && selectedMinute === maxMinute;\n\n  var generateColumn = function generateColumn(from, to, precision) {\n    var column = [];\n\n    for (var _i = from; _i <= to; _i++) {\n      column.push(_i);\n    }\n\n    var prefix = selected.slice(0, precisionRankRecord[precision]);\n    var currentFilter = filter === null || filter === void 0 ? void 0 : filter[precision];\n\n    if (currentFilter && typeof currentFilter === 'function') {\n      column = column.filter(function (i) {\n        return currentFilter(i, {\n          get date() {\n            var stringArray = [].concat(_toConsumableArray(prefix), [i.toString()]);\n            return convertStringArrayToDate(stringArray);\n          }\n\n        });\n      });\n    }\n\n    return column;\n  };\n\n  if (rank >= precisionRankRecord.month) {\n    var lower = isInMinYear ? minMonth : 1;\n    var upper = isInMaxYear ? maxMonth : 12;\n    var months = generateColumn(lower, upper, 'month');\n    ret.push(months.map(function (v) {\n      return {\n        label: renderLabel('month', v),\n        value: v.toString()\n      };\n    }));\n  }\n\n  if (rank >= precisionRankRecord.day) {\n    var _lower = isInMinMonth ? minDay : 1;\n\n    var _upper = isInMaxMonth ? maxDay : firstDayInSelectedMonth.daysInMonth();\n\n    var days = generateColumn(_lower, _upper, 'day');\n    ret.push(days.map(function (v) {\n      return {\n        label: renderLabel('day', v),\n        value: v.toString()\n      };\n    }));\n  }\n\n  if (rank >= precisionRankRecord.hour) {\n    var _lower2 = isInMinDay ? minHour : 0;\n\n    var _upper2 = isInMaxDay ? maxHour : 23;\n\n    var hours = generateColumn(_lower2, _upper2, 'hour');\n    ret.push(hours.map(function (v) {\n      return {\n        label: renderLabel('hour', v),\n        value: v.toString()\n      };\n    }));\n  }\n\n  if (rank >= precisionRankRecord.minute) {\n    var _lower3 = isInMinHour ? minMinute : 0;\n\n    var _upper3 = isInMaxHour ? maxMinute : 59;\n\n    var minutes = generateColumn(_lower3, _upper3, 'minute');\n    ret.push(minutes.map(function (v) {\n      return {\n        label: renderLabel('minute', v),\n        value: v.toString()\n      };\n    }));\n  }\n\n  if (rank >= precisionRankRecord.second) {\n    var _lower4 = isInMinMinute ? minSecond : 0;\n\n    var _upper4 = isInMaxMinute ? maxSecond : 59;\n\n    var seconds = generateColumn(_lower4, _upper4, 'second');\n    ret.push(seconds.map(function (v) {\n      return {\n        label: renderLabel('second', v),\n        value: v.toString()\n      };\n    }));\n  }\n\n  return ret;\n}\nexport function convertDateToStringArray(date) {\n  if (!date) return [];\n  return [date.getFullYear().toString(), (date.getMonth() + 1).toString(), date.getDate().toString(), date.getHours().toString(), date.getMinutes().toString(), date.getSeconds().toString()];\n}\nexport function convertStringArrayToDate(value) {\n  var _a, _b, _c, _d, _e, _f;\n\n  var yearString = (_a = value[0]) !== null && _a !== void 0 ? _a : '1900';\n  var monthString = (_b = value[1]) !== null && _b !== void 0 ? _b : '1';\n  var dateString = (_c = value[2]) !== null && _c !== void 0 ? _c : '1';\n  var hourString = (_d = value[3]) !== null && _d !== void 0 ? _d : '0';\n  var minuteString = (_e = value[4]) !== null && _e !== void 0 ? _e : '0';\n  var secondString = (_f = value[5]) !== null && _f !== void 0 ? _f : '0';\n  return new Date(parseInt(yearString), parseInt(monthString) - 1, parseInt(dateString), parseInt(hourString), parseInt(minuteString), parseInt(secondString));\n}","map":null,"metadata":{},"sourceType":"module"}