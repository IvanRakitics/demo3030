{"ast":null,"code":"import React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport { useDrag } from '@use-gesture/react';\nimport { useSpring, animated } from '@react-spring/web';\nimport { Slide } from './slide';\nimport { convertPx } from '../../utils/convert-px';\nimport { bound } from '../../utils/bound';\nconst classPrefix = `adm-image-viewer`;\nexport const Slides = forwardRef((props, ref) => {\n  const slideWidth = window.innerWidth + convertPx(16);\n  const [{\n    x\n  }, api] = useSpring(() => ({\n    x: props.defaultIndex * slideWidth,\n    config: {\n      tension: 250,\n      clamp: true\n    }\n  }));\n  const count = props.images.length;\n\n  function swipeTo(index) {\n    let immediate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var _a;\n\n    const i = bound(index, 0, count - 1);\n    (_a = props.onIndexChange) === null || _a === void 0 ? void 0 : _a.call(props, i);\n    api.start({\n      x: i * slideWidth,\n      immediate\n    });\n  }\n\n  useImperativeHandle(ref, () => ({\n    swipeTo\n  }));\n  const dragLockRef = useRef(false);\n  const bind = useDrag(state => {\n    if (dragLockRef.current) return;\n    const [offsetX] = state.offset;\n\n    if (state.last) {\n      const minIndex = Math.floor(offsetX / slideWidth);\n      const maxIndex = minIndex + 1;\n      const velocityOffset = Math.min(state.velocity[0] * 2000, slideWidth) * state.direction[0];\n      swipeTo(bound(Math.round((offsetX + velocityOffset) / slideWidth), minIndex, maxIndex));\n    } else {\n      api.start({\n        x: offsetX,\n        immediate: true\n      });\n    }\n  }, {\n    transform: _ref => {\n      let [x, y] = _ref;\n      return [-x, y];\n    },\n    from: () => [x.get(), 0],\n    bounds: () => {\n      return {\n        left: 0,\n        right: (count - 1) * slideWidth\n      };\n    },\n    rubberband: true,\n    axis: 'x',\n    pointer: {\n      touch: true\n    }\n  });\n  return React.createElement(\"div\", Object.assign({\n    className: `${classPrefix}-slides`\n  }, bind()), React.createElement(animated.div, {\n    className: `${classPrefix}-indicator`\n  }, x.to(v => {\n    const index = bound(Math.round(v / slideWidth), 0, count - 1);\n    return `${index + 1} / ${count}`;\n  })), React.createElement(animated.div, {\n    className: `${classPrefix}-slides-inner`,\n    style: {\n      x: x.to(x => -x)\n    }\n  }, props.images.map(image => React.createElement(Slide, {\n    key: image,\n    image: image,\n    onTap: props.onTap,\n    maxZoom: props.maxZoom,\n    onZoomChange: zoom => {\n      if (zoom !== 1) {\n        const index = Math.round(x.get() / slideWidth);\n        api.start({\n          x: index * slideWidth\n        });\n      }\n    },\n    dragLockRef: dragLockRef\n  }))));\n});","map":{"version":3,"sources":["D:/react/project0330/node_modules/antd-mobile/es/components/image-viewer/slides.js"],"names":["React","forwardRef","useImperativeHandle","useRef","useDrag","useSpring","animated","Slide","convertPx","bound","classPrefix","Slides","props","ref","slideWidth","window","innerWidth","x","api","defaultIndex","config","tension","clamp","count","images","length","swipeTo","index","immediate","_a","i","onIndexChange","call","start","dragLockRef","bind","state","current","offsetX","offset","last","minIndex","Math","floor","maxIndex","velocityOffset","min","velocity","direction","round","transform","y","from","get","bounds","left","right","rubberband","axis","pointer","touch","createElement","Object","assign","className","div","to","v","style","map","image","key","onTap","maxZoom","onZoomChange","zoom"],"mappings":"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","sourcesContent":["import React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport { useDrag } from '@use-gesture/react';\nimport { useSpring, animated } from '@react-spring/web';\nimport { Slide } from './slide';\nimport { convertPx } from '../../utils/convert-px';\nimport { bound } from '../../utils/bound';\nconst classPrefix = `adm-image-viewer`;\nexport const Slides = forwardRef((props, ref) => {\n  const slideWidth = window.innerWidth + convertPx(16);\n  const [{\n    x\n  }, api] = useSpring(() => ({\n    x: props.defaultIndex * slideWidth,\n    config: {\n      tension: 250,\n      clamp: true\n    }\n  }));\n  const count = props.images.length;\n\n  function swipeTo(index, immediate = false) {\n    var _a;\n\n    const i = bound(index, 0, count - 1);\n    (_a = props.onIndexChange) === null || _a === void 0 ? void 0 : _a.call(props, i);\n    api.start({\n      x: i * slideWidth,\n      immediate\n    });\n  }\n\n  useImperativeHandle(ref, () => ({\n    swipeTo\n  }));\n  const dragLockRef = useRef(false);\n  const bind = useDrag(state => {\n    if (dragLockRef.current) return;\n    const [offsetX] = state.offset;\n\n    if (state.last) {\n      const minIndex = Math.floor(offsetX / slideWidth);\n      const maxIndex = minIndex + 1;\n      const velocityOffset = Math.min(state.velocity[0] * 2000, slideWidth) * state.direction[0];\n      swipeTo(bound(Math.round((offsetX + velocityOffset) / slideWidth), minIndex, maxIndex));\n    } else {\n      api.start({\n        x: offsetX,\n        immediate: true\n      });\n    }\n  }, {\n    transform: ([x, y]) => [-x, y],\n    from: () => [x.get(), 0],\n    bounds: () => {\n      return {\n        left: 0,\n        right: (count - 1) * slideWidth\n      };\n    },\n    rubberband: true,\n    axis: 'x',\n    pointer: {\n      touch: true\n    }\n  });\n  return React.createElement(\"div\", Object.assign({\n    className: `${classPrefix}-slides`\n  }, bind()), React.createElement(animated.div, {\n    className: `${classPrefix}-indicator`\n  }, x.to(v => {\n    const index = bound(Math.round(v / slideWidth), 0, count - 1);\n    return `${index + 1} / ${count}`;\n  })), React.createElement(animated.div, {\n    className: `${classPrefix}-slides-inner`,\n    style: {\n      x: x.to(x => -x)\n    }\n  }, props.images.map(image => React.createElement(Slide, {\n    key: image,\n    image: image,\n    onTap: props.onTap,\n    maxZoom: props.maxZoom,\n    onZoomChange: zoom => {\n      if (zoom !== 1) {\n        const index = Math.round(x.get() / slideWidth);\n        api.start({\n          x: index * slideWidth\n        });\n      }\n    },\n    dragLockRef: dragLockRef\n  }))));\n});"]},"metadata":{},"sourceType":"module"}