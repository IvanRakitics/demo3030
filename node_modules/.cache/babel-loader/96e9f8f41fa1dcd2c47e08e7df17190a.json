{"ast":null,"code":"import _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { renderToBody } from './render-to-body';\nexport function renderImperatively(element) {\n  var Wrapper = React.forwardRef(function (_, ref) {\n    var _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        visible = _useState2[0],\n        setVisible = _useState2[1];\n\n    var closedRef = useRef(false);\n    useEffect(function () {\n      if (!closedRef.current) {\n        setVisible(true);\n      } else {\n        afterClose();\n      }\n    }, []);\n\n    function onClose() {\n      var _a, _b;\n\n      closedRef.current = true;\n      setVisible(false);\n      (_b = (_a = element.props).onClose) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n\n    function afterClose() {\n      var _a, _b;\n\n      unmount();\n      (_b = (_a = element.props).afterClose) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n\n    useImperativeHandle(ref, function () {\n      return {\n        close: onClose\n      };\n    });\n    return React.cloneElement(element, Object.assign(Object.assign({}, element.props), {\n      visible: visible,\n      onClose: onClose,\n      afterClose: afterClose\n    }));\n  });\n  var wrapperRef = React.createRef();\n  var unmount = renderToBody(React.createElement(Wrapper, {\n    ref: wrapperRef\n  }));\n\n  function close() {\n    var _a;\n\n    (_a = wrapperRef.current) === null || _a === void 0 ? void 0 : _a.close();\n  }\n\n  return {\n    close: close\n  };\n}","map":null,"metadata":{},"sourceType":"module"}