{"ast":null,"code":"import _defineProperty from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useClickAway } from 'ahooks';\nimport classNames from 'classnames';\nimport React, { cloneElement, useEffect, useRef, useState, forwardRef, useImperativeHandle } from 'react';\nimport Popup from '../popup';\nimport { ItemChildrenWrap } from './item';\nimport { withNativeProps } from '../../utils/native-props';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nvar classPrefix = \"adm-dropdown\";\nvar defaultProps = {\n  defaultActiveKey: null,\n  closeOnMaskClick: true,\n  closeOnClickAway: false\n};\nvar Dropdown = forwardRef(function (p, ref) {\n  var props = mergeProps(defaultProps, p);\n\n  var _usePropsValue = usePropsValue({\n    value: props.activeKey,\n    defaultValue: props.defaultActiveKey,\n    onChange: props.onChange\n  }),\n      _usePropsValue2 = _slicedToArray(_usePropsValue, 2),\n      value = _usePropsValue2[0],\n      setValue = _usePropsValue2[1];\n\n  var navRef = useRef(null);\n  var contentRef = useRef(null); // 点击外部区域，关闭\n\n  useClickAway(function () {\n    if (!props.closeOnClickAway) return;\n    setValue(null);\n  }, [navRef, contentRef]); // 计算 navs 的 top 值\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      top = _useState2[0],\n      setTop = _useState2[1];\n\n  var containerRef = useRef(null);\n  useEffect(function () {\n    var container = containerRef.current;\n    if (!container) return;\n\n    if (value) {\n      var rect = container.getBoundingClientRect();\n      setTop(rect.bottom);\n    }\n  }, [value]);\n\n  var changeActive = function changeActive(key) {\n    if (value === key) {\n      setValue(null);\n    } else {\n      setValue(key);\n    }\n  };\n\n  var popupForceRender = false;\n  var items = [];\n  var navs = React.Children.map(props.children, function (child) {\n    if (React.isValidElement(child)) {\n      var childProps = Object.assign(Object.assign({}, child.props), {\n        onClick: function onClick() {\n          changeActive(child.key);\n        },\n        active: child.key === value,\n        arrow: child.props.arrow === undefined ? props.arrow : child.props.arrow\n      });\n      items.push(child);\n      if (child.props.forceRender) popupForceRender = true;\n      return cloneElement(child, childProps);\n    } else {\n      return child;\n    }\n  });\n  useImperativeHandle(ref, function () {\n    return {\n      close: function close() {\n        setValue(null);\n      }\n    };\n  }, [setValue]);\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classNames(classPrefix, _defineProperty({}, \"\".concat(classPrefix, \"-open\"), !!value)),\n    ref: containerRef\n  }, React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-nav\"),\n    ref: navRef\n  }, navs), React.createElement(Popup, {\n    visible: !!value,\n    position: 'top',\n    className: \"\".concat(classPrefix, \"-popup\"),\n    maskClassName: \"\".concat(classPrefix, \"-popup-mask\"),\n    bodyClassName: \"\".concat(classPrefix, \"-popup-body\"),\n    style: {\n      top: top\n    },\n    forceRender: popupForceRender,\n    onMaskClick: props.closeOnMaskClick ? function () {\n      changeActive(null);\n    } : undefined\n  }, React.createElement(\"div\", {\n    ref: contentRef\n  }, items.map(function (item) {\n    var isActive = item.key === value;\n    return React.createElement(ItemChildrenWrap, {\n      key: item.key,\n      active: isActive,\n      forceRender: item.props.forceRender,\n      destroyOnClose: item.props.destroyOnClose\n    }, item.props.children);\n  })))));\n});\nexport default Dropdown;","map":null,"metadata":{},"sourceType":"module"}