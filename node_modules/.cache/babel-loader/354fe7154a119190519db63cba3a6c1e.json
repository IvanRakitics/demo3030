{"ast":null,"code":"import _defineProperty from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport classNames from 'classnames';\nimport { CloseCircleFill } from 'antd-mobile-icons';\nimport { useIsomorphicLayoutEffect } from 'ahooks';\nvar classPrefix = 'adm-virtual-input';\nvar defaultProps = {\n  defaultValue: ''\n};\nexport var VirtualInput = forwardRef(function (p, ref) {\n  var props = mergeProps(defaultProps, p);\n\n  var _usePropsValue = usePropsValue(props),\n      _usePropsValue2 = _slicedToArray(_usePropsValue, 2),\n      value = _usePropsValue2[0],\n      setValue = _usePropsValue2[1];\n\n  var rootRef = useRef(null);\n  var contentRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasFocus = _useState2[0],\n      setHasFocus = _useState2[1];\n\n  function scrollToEnd() {\n    var root = rootRef.current;\n    if (!root) return;\n\n    if (document.activeElement !== root) {\n      return;\n    }\n\n    var content = contentRef.current;\n    if (!content) return;\n    content.scrollLeft = content.clientWidth;\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    scrollToEnd();\n  }, [value]);\n  useEffect(function () {\n    if (hasFocus) {\n      scrollToEnd();\n    }\n  }, [hasFocus]);\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function focus() {\n        var _a;\n\n        (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      blur: function blur() {\n        var _a;\n\n        (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.blur();\n      }\n    };\n  });\n\n  function onFocus() {\n    var _a;\n\n    setHasFocus(true);\n    (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props);\n  }\n\n  function onBlur() {\n    var _a;\n\n    setHasFocus(false);\n    (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props);\n  }\n\n  var keyboard = props.keyboard;\n  var keyboardElement = keyboard && React.cloneElement(keyboard, {\n    onInput: function onInput(v) {\n      var _a, _b;\n\n      setValue(value + v);\n      (_b = (_a = keyboard.props).onInput) === null || _b === void 0 ? void 0 : _b.call(_a, v);\n    },\n    onDelete: function onDelete() {\n      var _a, _b;\n\n      setValue(value.slice(0, -1));\n      (_b = (_a = keyboard.props).onDelete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    },\n    visible: hasFocus,\n    onClose: function onClose() {\n      var _a, _b, _c;\n\n      (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.blur();\n      (_c = (_b = keyboard.props).onClose) === null || _c === void 0 ? void 0 : _c.call(_b);\n    }\n  });\n  return withNativeProps(props, React.createElement(\"div\", {\n    ref: rootRef,\n    className: classNames(classPrefix, _defineProperty({}, \"\".concat(classPrefix, \"-disabled\"), props.disabled)),\n    tabIndex: props.disabled ? undefined : 0,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onClick: props.onClick\n  }, React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-content\"),\n    ref: contentRef\n  }, value, React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-caret-container\")\n  }, hasFocus && React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-caret\")\n  }))), props.clearable && !!value && hasFocus && React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-clear\"),\n    onClick: function onClick(e) {\n      var _a;\n\n      e.stopPropagation();\n      setValue('');\n      (_a = props.onClear) === null || _a === void 0 ? void 0 : _a.call(props);\n    }\n  }, React.createElement(CloseCircleFill, null)), !value && React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-placeholder\")\n  }, props.placeholder), keyboardElement));\n});","map":null,"metadata":{},"sourceType":"module"}