{"ast":null,"code":"import React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { CheckOutline, CloseOutline } from 'antd-mobile-icons';\nimport Mask from '../mask';\nimport { mergeProps } from '../../utils/with-default-props';\nimport AutoCenter from '../auto-center';\nimport SpinLoading from '../spin-loading';\nconst classPrefix = `adm-toast`;\nconst defaultProps = {\n  maskClickable: true,\n  stopPropagation: ['click']\n};\nexport const InternalToast = p => {\n  const props = mergeProps(defaultProps, p);\n  const {\n    maskClickable,\n    content,\n    icon,\n    position\n  } = props;\n  const iconElement = useMemo(() => {\n    if (icon === null || icon === undefined) return null;\n\n    switch (icon) {\n      case 'success':\n        return React.createElement(CheckOutline, null);\n\n      case 'fail':\n        return React.createElement(CloseOutline, null);\n\n      case 'loading':\n        return React.createElement(SpinLoading, {\n          color: 'white',\n          className: `${classPrefix}-loading`\n        });\n\n      default:\n        return icon;\n    }\n  }, [icon]);\n  const top = useMemo(() => {\n    switch (position) {\n      case 'top':\n        return '20%';\n\n      case 'bottom':\n        return '80%';\n\n      default:\n        return '50%';\n    }\n  }, [position]);\n  return React.createElement(Mask, {\n    visible: props.visible,\n    destroyOnClose: true,\n    opacity: 0,\n    disableBodyScroll: !maskClickable,\n    getContainer: props.getContainer,\n    afterClose: props.afterClose,\n    style: Object.assign({\n      pointerEvents: maskClickable ? 'none' : 'auto'\n    }, props.maskStyle),\n    className: classNames(`${classPrefix}-mask`, props.maskClassName),\n    stopPropagation: props.stopPropagation\n  }, React.createElement(\"div\", {\n    className: classNames(`${classPrefix}-wrap`)\n  }, React.createElement(\"div\", {\n    style: {\n      top\n    },\n    className: classNames(`${classPrefix}-main`, icon ? `${classPrefix}-main-icon` : `${classPrefix}-main-text`)\n  }, iconElement && React.createElement(\"div\", {\n    className: `${classPrefix}-icon`\n  }, iconElement), React.createElement(AutoCenter, null, content))));\n};","map":{"version":3,"sources":["D:/react/project0330/node_modules/antd-mobile/es/components/toast/toast.js"],"names":["React","useMemo","classNames","CheckOutline","CloseOutline","Mask","mergeProps","AutoCenter","SpinLoading","classPrefix","defaultProps","maskClickable","stopPropagation","InternalToast","p","props","content","icon","position","iconElement","undefined","createElement","color","className","top","visible","destroyOnClose","opacity","disableBodyScroll","getContainer","afterClose","style","Object","assign","pointerEvents","maskStyle","maskClassName"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { CheckOutline, CloseOutline } from 'antd-mobile-icons';\nimport Mask from '../mask';\nimport { mergeProps } from '../../utils/with-default-props';\nimport AutoCenter from '../auto-center';\nimport SpinLoading from '../spin-loading';\nconst classPrefix = `adm-toast`;\nconst defaultProps = {\n  maskClickable: true,\n  stopPropagation: ['click']\n};\nexport const InternalToast = p => {\n  const props = mergeProps(defaultProps, p);\n  const {\n    maskClickable,\n    content,\n    icon,\n    position\n  } = props;\n  const iconElement = useMemo(() => {\n    if (icon === null || icon === undefined) return null;\n\n    switch (icon) {\n      case 'success':\n        return React.createElement(CheckOutline, null);\n\n      case 'fail':\n        return React.createElement(CloseOutline, null);\n\n      case 'loading':\n        return React.createElement(SpinLoading, {\n          color: 'white',\n          className: `${classPrefix}-loading`\n        });\n\n      default:\n        return icon;\n    }\n  }, [icon]);\n  const top = useMemo(() => {\n    switch (position) {\n      case 'top':\n        return '20%';\n\n      case 'bottom':\n        return '80%';\n\n      default:\n        return '50%';\n    }\n  }, [position]);\n  return React.createElement(Mask, {\n    visible: props.visible,\n    destroyOnClose: true,\n    opacity: 0,\n    disableBodyScroll: !maskClickable,\n    getContainer: props.getContainer,\n    afterClose: props.afterClose,\n    style: Object.assign({\n      pointerEvents: maskClickable ? 'none' : 'auto'\n    }, props.maskStyle),\n    className: classNames(`${classPrefix}-mask`, props.maskClassName),\n    stopPropagation: props.stopPropagation\n  }, React.createElement(\"div\", {\n    className: classNames(`${classPrefix}-wrap`)\n  }, React.createElement(\"div\", {\n    style: {\n      top\n    },\n    className: classNames(`${classPrefix}-main`, icon ? `${classPrefix}-main-icon` : `${classPrefix}-main-text`)\n  }, iconElement && React.createElement(\"div\", {\n    className: `${classPrefix}-icon`\n  }, iconElement), React.createElement(AutoCenter, null, content))));\n};"]},"metadata":{},"sourceType":"module"}