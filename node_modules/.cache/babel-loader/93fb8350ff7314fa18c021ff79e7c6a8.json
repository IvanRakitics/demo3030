{"ast":null,"code":"import _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef } from 'react';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { useSpring, animated } from '@react-spring/web';\nimport { useDrag } from '@use-gesture/react';\nimport Button from '../button';\nimport { nearest } from '../../utils/nearest';\nimport { withNativeProps } from '../../utils/native-props';\nimport { withStopPropagation } from '../../utils/with-stop-propagation';\nvar defaultProps = {\n  rightActions: [],\n  leftActions: [],\n  closeOnTouchOutside: true,\n  closeOnAction: true,\n  stopPropagation: []\n};\nexport var SwipeAction = forwardRef(function (p, ref) {\n  var props = mergeProps(defaultProps, p);\n  var rootRef = useRef(null);\n  var leftRef = useRef(null);\n  var rightRef = useRef(null);\n\n  function getWidth(ref) {\n    var element = ref.current;\n    if (!element) return 0;\n    return element.offsetWidth;\n  }\n\n  function getLeftWidth() {\n    return getWidth(leftRef);\n  }\n\n  function getRightWidth() {\n    return getWidth(rightRef);\n  }\n\n  var _useSpring = useSpring(function () {\n    return {\n      x: 0,\n      config: {\n        tension: 200,\n        friction: 30\n      }\n    };\n  }, []),\n      _useSpring2 = _slicedToArray(_useSpring, 2),\n      x = _useSpring2[0].x,\n      api = _useSpring2[1];\n\n  var draggingRef = useRef(false);\n  var bind = useDrag(function (state) {\n    draggingRef.current = true;\n\n    var _state$offset = _slicedToArray(state.offset, 1),\n        offsetX = _state$offset[0];\n\n    if (state.last) {\n      var leftWidth = getLeftWidth();\n      var rightWidth = getRightWidth();\n      var position = offsetX + state.velocity[0] * state.direction[0] * 50;\n\n      if (offsetX > 0) {\n        position = Math.max(0, position);\n      } else if (offsetX < 0) {\n        position = Math.min(0, position);\n      } else {\n        position = 0;\n      }\n\n      api.start({\n        x: nearest([-rightWidth, 0, leftWidth], position)\n      });\n      window.setTimeout(function () {\n        draggingRef.current = false;\n      });\n    } else {\n      api.start({\n        x: offsetX,\n        immediate: true\n      });\n    }\n  }, {\n    from: function from() {\n      return [x.get(), 0];\n    },\n    bounds: function bounds() {\n      var leftWidth = getLeftWidth();\n      var rightWidth = getRightWidth();\n      return {\n        left: -rightWidth,\n        right: leftWidth\n      };\n    },\n    // rubberband: true,\n    axis: 'x',\n    preventScroll: true,\n    pointer: {\n      touch: true\n    }\n  });\n\n  function close() {\n    api.start({\n      x: 0\n    });\n  }\n\n  useImperativeHandle(ref, function () {\n    return {\n      show: function show() {\n        var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'right';\n\n        if (side === 'right') {\n          api.start({\n            x: -getRightWidth()\n          });\n        } else if (side === 'left') {\n          api.start({\n            x: getLeftWidth()\n          });\n        }\n      },\n      close: close\n    };\n  });\n  useEffect(function () {\n    if (!props.closeOnTouchOutside) return;\n\n    function handle(e) {\n      if (x.get() === 0) {\n        return;\n      }\n\n      var root = rootRef.current;\n\n      if (root && !root.contains(e.target)) {\n        close();\n      }\n    }\n\n    document.addEventListener('touchstart', handle);\n    return function () {\n      document.removeEventListener('touchstart', handle);\n    };\n  }, [props.closeOnTouchOutside]);\n\n  function renderAction(action) {\n    var _a, _b;\n\n    var color = (_a = action.color) !== null && _a !== void 0 ? _a : 'light';\n    return React.createElement(Button, {\n      key: action.key,\n      className: 'adm-swipe-action-action-button',\n      style: {\n        '--background-color': (_b = colorRecord[color]) !== null && _b !== void 0 ? _b : color\n      },\n      onClick: function onClick(e) {\n        var _a, _b;\n\n        if (props.closeOnAction) {\n          close();\n        }\n\n        (_a = action.onClick) === null || _a === void 0 ? void 0 : _a.call(action, e);\n        (_b = props.onAction) === null || _b === void 0 ? void 0 : _b.call(props, action, e);\n      }\n    }, action.text);\n  }\n\n  return withNativeProps(props, React.createElement(\"div\", Object.assign({\n    className: 'adm-swipe-action'\n  }, bind(), {\n    ref: rootRef,\n    onClickCapture: function onClickCapture(e) {\n      if (draggingRef.current) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    }\n  }), React.createElement(animated.div, {\n    className: 'adm-swipe-action-track',\n    style: {\n      x: x\n    }\n  }, withStopPropagation(props.stopPropagation, React.createElement(\"div\", {\n    className: 'adm-swipe-action-actions adm-swipe-action-actions-left',\n    ref: leftRef\n  }, props.leftActions.map(renderAction))), React.createElement(\"div\", {\n    className: 'adm-swipe-action-content',\n    onClickCapture: function onClickCapture(e) {\n      if (x.goal !== 0) {\n        e.preventDefault();\n        e.stopPropagation();\n        api.start({\n          x: 0\n        });\n      }\n    }\n  }, React.createElement(animated.div, {\n    style: {\n      pointerEvents: x.to(function (v) {\n        return v !== 0 && x.goal !== 0 ? 'none' : 'unset';\n      })\n    }\n  }, props.children)), withStopPropagation(props.stopPropagation, React.createElement(\"div\", {\n    className: 'adm-swipe-action-actions adm-swipe-action-actions-right',\n    ref: rightRef\n  }, props.rightActions.map(renderAction))))));\n});\nvar colorRecord = {\n  light: 'var(--adm-color-light)',\n  weak: 'var(--adm-color-weak)',\n  primary: 'var(--adm-color-primary)',\n  success: 'var(--adm-color-success)',\n  warning: 'var(--adm-color-warning)',\n  danger: 'var(--adm-color-danger)'\n};","map":null,"metadata":{},"sourceType":"module"}