{"ast":null,"code":"import _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useRef, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { animated, useSpring } from '@react-spring/web';\nimport { useThrottleFn } from 'ahooks';\nvar classPrefix = \"adm-scroll-mask\";\nexport var ScrollMask = function ScrollMask(props) {\n  var maskRef = useRef(null);\n\n  var _useSpring = useSpring(function () {\n    return {\n      leftMaskOpacity: 0,\n      rightMaskOpacity: 0,\n      config: {\n        clamp: true\n      }\n    };\n  }),\n      _useSpring2 = _slicedToArray(_useSpring, 2),\n      _useSpring2$ = _useSpring2[0],\n      leftMaskOpacity = _useSpring2$.leftMaskOpacity,\n      rightMaskOpacity = _useSpring2$.rightMaskOpacity,\n      api = _useSpring2[1];\n\n  var _useThrottleFn = useThrottleFn(function () {\n    var immediate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var mask = maskRef.current;\n    if (!mask) return;\n    var scrollEl = props.scrollTrackRef.current;\n    if (!scrollEl) return;\n    var scrollLeft = scrollEl.scrollLeft;\n    var showLeftMask = scrollLeft > 0;\n    var showRightMask = scrollLeft + scrollEl.offsetWidth < scrollEl.scrollWidth;\n    api.start({\n      leftMaskOpacity: showLeftMask ? 1 : 0,\n      rightMaskOpacity: showRightMask ? 1 : 0,\n      immediate: immediate\n    });\n  }, {\n    wait: 100,\n    trailing: true,\n    leading: true\n  }),\n      updateMask = _useThrottleFn.run;\n\n  useEffect(function () {\n    updateMask(true);\n  }, []);\n  useEffect(function () {\n    var scrollEl = props.scrollTrackRef.current;\n    if (!scrollEl) return;\n    scrollEl.addEventListener('scroll', updateMask);\n    return function () {\n      return scrollEl.removeEventListener('scroll', updateMask);\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(animated.div, {\n    ref: maskRef,\n    className: classNames(classPrefix, \"\".concat(classPrefix, \"-left\")),\n    style: {\n      opacity: leftMaskOpacity\n    }\n  }), React.createElement(animated.div, {\n    className: classNames(classPrefix, \"\".concat(classPrefix, \"-right\")),\n    style: {\n      opacity: rightMaskOpacity\n    }\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}