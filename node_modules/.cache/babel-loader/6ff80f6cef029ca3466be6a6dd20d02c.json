{"ast":null,"code":"import _defineProperty from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useRef } from 'react';\nimport classNames from 'classnames';\nimport { animated } from '@react-spring/web';\nimport { withNativeProps } from '../../utils/native-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { useResizeEffect } from '../../utils/use-resize-effect';\nimport { useTabListScroll } from '../../utils/use-tab-list-scroll';\nimport ScrollMask from '../scroll-mask';\nimport { ShouldRender } from '../../utils/should-render';\nvar classPrefix = \"adm-jumbo-tabs\";\nexport var JumboTab = function JumboTab() {\n  return null;\n};\nexport var JumboTabs = function JumboTabs(props) {\n  var _a;\n\n  var tabListContainerRef = useRef(null);\n  var rootRef = useRef(null);\n  var keyToIndexRecord = {};\n  var firstActiveKey = null;\n  var panes = [];\n  React.Children.forEach(props.children, function (child, index) {\n    if (!React.isValidElement(child)) return;\n    var key = child.key;\n    if (typeof key !== 'string') return;\n\n    if (index === 0) {\n      firstActiveKey = key;\n    }\n\n    var length = panes.push(child);\n    keyToIndexRecord[key] = length - 1;\n  });\n\n  var _usePropsValue = usePropsValue({\n    value: props.activeKey,\n    defaultValue: (_a = props.defaultActiveKey) !== null && _a !== void 0 ? _a : firstActiveKey,\n    onChange: function onChange(v) {\n      var _a;\n\n      if (v === null) return;\n      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, v);\n    }\n  }),\n      _usePropsValue2 = _slicedToArray(_usePropsValue, 2),\n      activeKey = _usePropsValue2[0],\n      setActiveKey = _usePropsValue2[1];\n\n  var _useTabListScroll = useTabListScroll(tabListContainerRef, keyToIndexRecord[activeKey]),\n      scrollLeft = _useTabListScroll.scrollLeft,\n      animate = _useTabListScroll.animate;\n\n  useResizeEffect(function () {\n    animate(true);\n  }, rootRef);\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix,\n    ref: rootRef\n  }, React.createElement(\"div\", {\n    className: \"\".concat(classPrefix, \"-header\")\n  }, React.createElement(ScrollMask, {\n    scrollTrackRef: tabListContainerRef\n  }), React.createElement(animated.div, {\n    className: \"\".concat(classPrefix, \"-tab-list\"),\n    ref: tabListContainerRef,\n    scrollLeft: scrollLeft\n  }, panes.map(function (pane) {\n    var _classNames;\n\n    return withNativeProps(pane.props, React.createElement(\"div\", {\n      key: pane.key,\n      className: \"\".concat(classPrefix, \"-tab-wrapper\")\n    }, React.createElement(\"div\", {\n      onClick: function onClick() {\n        var key = pane.key;\n        if (pane.props.disabled) return;\n\n        if (key === undefined || key === null) {\n          return;\n        }\n\n        setActiveKey(key.toString());\n      },\n      className: classNames(\"\".concat(classPrefix, \"-tab\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(classPrefix, \"-tab-active\"), pane.key === activeKey), _defineProperty(_classNames, \"\".concat(classPrefix, \"-tab-disabled\"), pane.props.disabled), _classNames))\n    }, React.createElement(\"div\", {\n      className: \"\".concat(classPrefix, \"-tab-title\")\n    }, pane.props.title), React.createElement(\"div\", {\n      className: \"\".concat(classPrefix, \"-tab-description\")\n    }, pane.props.description))));\n  }))), panes.map(function (pane) {\n    if (pane.props.children === undefined) {\n      return null;\n    }\n\n    var active = pane.key === activeKey;\n    return React.createElement(ShouldRender, {\n      key: pane.key,\n      active: active,\n      forceRender: pane.props.forceRender,\n      destroyOnClose: pane.props.destroyOnClose\n    }, React.createElement(\"div\", {\n      className: \"\".concat(classPrefix, \"-content\"),\n      style: {\n        display: active ? 'block' : 'none'\n      }\n    }, pane.props.children));\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}