{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n};\n\nimport { useMemo, useState } from 'react';\nimport useEventListener from '../useEventListener';\nimport useMemoizedFn from '../useMemoizedFn';\nimport useRequest from '../useRequest';\nimport useUpdateEffect from '../useUpdateEffect';\nimport { getTargetElement } from '../utils/domTarget';\nimport { getClientHeight, getScrollHeight, getScrollTop } from '../utils/rect';\n\nvar useInfiniteScroll = function useInfiniteScroll(service, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var target = options.target,\n      isNoMore = options.isNoMore,\n      _a = options.threshold,\n      threshold = _a === void 0 ? 100 : _a,\n      _b = options.reloadDeps,\n      reloadDeps = _b === void 0 ? [] : _b,\n      manual = options.manual,\n      _onBefore = options.onBefore,\n      _onSuccess = options.onSuccess,\n      _onError = options.onError,\n      _onFinally = options.onFinally;\n\n  var _c = __read(useState(), 2),\n      finalData = _c[0],\n      setFinalData = _c[1];\n\n  var _d = __read(useState(false), 2),\n      loadingMore = _d[0],\n      setLoadingMore = _d[1];\n\n  var noMore = useMemo(function () {\n    if (!isNoMore) return false;\n    return isNoMore(finalData);\n  }, [finalData]);\n\n  var _e = useRequest(function (lastData) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var currentData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , service(lastData)];\n\n          case 1:\n            currentData = _a.sent();\n\n            if (!lastData) {\n              setFinalData(currentData);\n            } else {\n              setFinalData(__assign(__assign({}, currentData), {\n                // @ts-ignore\n                list: __spread(lastData.list, currentData.list)\n              }));\n            }\n\n            return [2\n            /*return*/\n            , currentData];\n        }\n      });\n    });\n  }, {\n    manual: manual,\n    onFinally: function onFinally(_, d, e) {\n      setLoadingMore(false);\n      _onFinally === null || _onFinally === void 0 ? void 0 : _onFinally(d, e);\n    },\n    onBefore: function onBefore() {\n      return _onBefore === null || _onBefore === void 0 ? void 0 : _onBefore();\n    },\n    onSuccess: function onSuccess(d) {\n      setTimeout(function () {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        scrollMethod();\n      });\n      _onSuccess === null || _onSuccess === void 0 ? void 0 : _onSuccess(d);\n    },\n    onError: function onError(e) {\n      return _onError === null || _onError === void 0 ? void 0 : _onError(e);\n    }\n  }),\n      loading = _e.loading,\n      run = _e.run,\n      runAsync = _e.runAsync,\n      cancel = _e.cancel;\n\n  var loadMore = function loadMore() {\n    if (noMore) return;\n    setLoadingMore(true);\n    run(finalData);\n  };\n\n  var loadMoreAsync = function loadMoreAsync() {\n    if (noMore) return;\n    setLoadingMore(true);\n    return runAsync(finalData);\n  };\n\n  var reload = function reload() {\n    return run();\n  };\n\n  var reloadAsync = function reloadAsync() {\n    return runAsync();\n  };\n\n  var scrollMethod = function scrollMethod() {\n    var el = getTargetElement(target);\n\n    if (!el) {\n      return;\n    }\n\n    var scrollTop = getScrollTop(el);\n    var scrollHeight = getScrollHeight(el);\n    var clientHeight = getClientHeight(el);\n\n    if (scrollHeight - scrollTop <= clientHeight + threshold) {\n      loadMore();\n    }\n  };\n\n  useEventListener('scroll', function () {\n    if (loading || loadingMore) {\n      return;\n    }\n\n    scrollMethod();\n  }, {\n    target: target\n  });\n  useUpdateEffect(function () {\n    run();\n  }, __spread(reloadDeps));\n  return {\n    data: finalData,\n    loading: !loadingMore && loading,\n    loadingMore: loadingMore,\n    noMore: noMore,\n    loadMore: useMemoizedFn(loadMore),\n    loadMoreAsync: useMemoizedFn(loadMoreAsync),\n    reload: useMemoizedFn(reload),\n    reloadAsync: useMemoizedFn(reloadAsync),\n    mutate: setFinalData,\n    cancel: cancel\n  };\n};\n\nexport default useInfiniteScroll;","map":null,"metadata":{},"sourceType":"module"}