{"ast":null,"code":"import _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport React, { useState, useRef } from 'react';\nimport { useUnmountedRef } from 'ahooks';\nimport { withNativeProps } from '../../utils/native-props';\nimport { mergeProps } from '../../utils/with-default-props';\nimport Mask from '../mask';\nimport { useLockScroll } from '../../utils/use-lock-scroll';\nimport { renderToContainer } from '../../utils/render-to-container';\nimport { useSpring, animated } from '@react-spring/web';\nimport { useShouldRender } from '../../utils/should-render';\nimport { withStopPropagation } from '../../utils/with-stop-propagation';\nvar classPrefix = \"adm-popup\";\nvar defaultProps = {\n  position: 'bottom',\n  visible: false,\n  getContainer: function getContainer() {\n    return document.body;\n  },\n  mask: true,\n  stopPropagation: ['click']\n};\nexport var Popup = function Popup(p) {\n  var props = mergeProps(defaultProps, p);\n  var bodyCls = classNames(\"\".concat(classPrefix, \"-body\"), props.bodyClassName, \"\".concat(classPrefix, \"-body-position-\").concat(props.position));\n  var ref = useRef(null);\n\n  var _useState = useState(props.visible),\n      _useState2 = _slicedToArray(_useState, 2),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  useLockScroll(ref, active);\n  var shouldRender = useShouldRender(active, props.forceRender, props.destroyOnClose);\n  var unmountedRef = useUnmountedRef();\n\n  var _useSpring = useSpring({\n    percent: props.visible ? 0 : 100,\n    config: {\n      precision: 0.1,\n      mass: 0.4,\n      tension: 300,\n      friction: 30\n    },\n    onStart: function onStart() {\n      setActive(true);\n    },\n    onRest: function onRest() {\n      var _a, _b;\n\n      if (unmountedRef.current) return;\n      setActive(props.visible);\n\n      if (props.visible) {\n        (_a = props.afterShow) === null || _a === void 0 ? void 0 : _a.call(props);\n      } else {\n        (_b = props.afterClose) === null || _b === void 0 ? void 0 : _b.call(props);\n      }\n    }\n  }),\n      percent = _useSpring.percent;\n\n  var node = withStopPropagation(props.stopPropagation, withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix,\n    onClick: props.onClick,\n    style: {\n      display: active ? 'unset' : 'none'\n    }\n  }, props.mask && React.createElement(Mask, {\n    visible: props.visible,\n    onMaskClick: props.onMaskClick,\n    className: props.maskClassName,\n    style: props.maskStyle,\n    disableBodyScroll: false,\n    stopPropagation: props.stopPropagation\n  }), React.createElement(animated.div, {\n    className: bodyCls,\n    style: Object.assign(Object.assign({}, props.bodyStyle), {\n      transform: percent.to(function (v) {\n        if (props.position === 'bottom') {\n          return \"translate(0, \".concat(v, \"%)\");\n        }\n\n        if (props.position === 'top') {\n          return \"translate(0, -\".concat(v, \"%)\");\n        }\n\n        if (props.position === 'left') {\n          return \"translate(-\".concat(v, \"%, 0)\");\n        }\n\n        if (props.position === 'right') {\n          return \"translate(\".concat(v, \"%, 0)\");\n        }\n\n        return 'none';\n      })\n    }),\n    ref: ref\n  }, shouldRender && props.children))));\n  return renderToContainer(props.getContainer, node);\n};","map":null,"metadata":{},"sourceType":"module"}