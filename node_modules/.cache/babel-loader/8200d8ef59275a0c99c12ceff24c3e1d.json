{"ast":null,"code":"import _defineProperty from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport React, { useMemo } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { getTreeDeep } from '../../utils/tree';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nvar classPrefix = \"adm-tree-select\";\nvar defaultProps = {\n  options: [],\n  fieldNames: {},\n  defaultValue: []\n};\nexport var TreeSelect = function TreeSelect(p) {\n  var props = mergeProps(defaultProps, p);\n  var labelName = props.fieldNames.label || 'label';\n  var valueName = props.fieldNames.value || 'value';\n  var childrenName = props.fieldNames.children || 'children';\n\n  var _usePropsValue = usePropsValue({\n    value: props.value,\n    defaultValue: props.defaultValue\n  }),\n      _usePropsValue2 = _slicedToArray(_usePropsValue, 2),\n      value = _usePropsValue2[0],\n      setValue = _usePropsValue2[1];\n\n  var _useMemo = useMemo(function () {\n    var deep = getTreeDeep(props.options, childrenName);\n    var optionsMap = new Map();\n    var optionsParentMap = new Map();\n\n    function traverse(current, children) {\n      children.forEach(function (item) {\n        optionsParentMap.set(item[valueName], current);\n        optionsMap.set(item[valueName], item);\n\n        if (item[childrenName]) {\n          traverse(item, item[childrenName]);\n        }\n      });\n    }\n\n    traverse(undefined, props.options);\n    return [deep, optionsMap, optionsParentMap];\n  }, [props.options]),\n      _useMemo2 = _slicedToArray(_useMemo, 3),\n      deep = _useMemo2[0],\n      optionsMap = _useMemo2[1],\n      optionsParentMap = _useMemo2[2];\n\n  var onItemSelect = function onItemSelect(node) {\n    var _a; // 找到父级节点\n\n\n    var parentNodes = [];\n    var current = node;\n\n    while (current) {\n      parentNodes.push(current);\n      var next = optionsParentMap.get(current[valueName]);\n      current = next;\n    }\n\n    var values = parentNodes.reverse().map(function (i) {\n      return i[valueName];\n    });\n    setValue(values);\n    (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, values, {\n      options: parentNodes\n    });\n  };\n\n  var renderItems = function renderItems() {\n    var columnOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var index = arguments.length > 1 ? arguments[1] : undefined;\n    return columnOptions.map(function (item) {\n      var isActive = item[valueName] === value[index];\n      return React.createElement(\"div\", {\n        key: item[valueName],\n        className: classNames(\"\".concat(classPrefix, \"-item\"), _defineProperty({}, \"\".concat(classPrefix, \"-item-active\"), isActive)),\n        onClick: function onClick() {\n          if (!isActive) {\n            onItemSelect(item);\n          }\n        }\n      }, item[labelName]);\n    });\n  };\n\n  var renderColumns = function renderColumns() {\n    var _a;\n\n    var columns = [];\n\n    for (var i = 0; i < deep; i++) {\n      var width = \"\".concat(100 / deep, \"%\"); // 两列的第一列宽度为 33.33，两列的第二列为 66.67%\n\n      if (deep === 2 && i === 0) {\n        width = \"33.33%\";\n      }\n\n      if (deep === 2 && i === 1) {\n        width = \"66.67%\";\n      }\n\n      var column = React.createElement(\"div\", {\n        key: i,\n        className: classNames(\"\".concat(classPrefix, \"-column\")),\n        style: {\n          width: width\n        }\n      }, renderItems(i === 0 ? props.options : (_a = optionsMap.get(value[i - 1])) === null || _a === void 0 ? void 0 : _a[childrenName], i));\n      columns.push(column);\n    }\n\n    return columns;\n  };\n\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, renderColumns()));\n};","map":null,"metadata":{},"sourceType":"module"}