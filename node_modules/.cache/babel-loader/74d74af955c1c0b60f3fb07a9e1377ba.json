{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n};\n\nimport debounce from 'lodash/debounce';\nimport { useEffect, useMemo, useRef } from 'react';\n\nvar useDebouncePlugin = function useDebouncePlugin(fetchInstance, _a) {\n  var debounceWait = _a.debounceWait,\n      debounceLeading = _a.debounceLeading,\n      debounceTrailing = _a.debounceTrailing,\n      debounceMaxWait = _a.debounceMaxWait;\n  var debouncedRef = useRef();\n  var options = useMemo(function () {\n    var ret = {};\n\n    if (debounceLeading !== undefined) {\n      ret.leading = debounceLeading;\n    }\n\n    if (debounceTrailing !== undefined) {\n      ret.trailing = debounceTrailing;\n    }\n\n    if (debounceMaxWait !== undefined) {\n      ret.maxWait = debounceMaxWait;\n    }\n\n    return ret;\n  }, [debounceLeading, debounceTrailing, debounceMaxWait]);\n  useEffect(function () {\n    if (debounceWait) {\n      var _originRunAsync_1 = fetchInstance.runAsync.bind(fetchInstance);\n\n      debouncedRef.current = debounce(function (callback) {\n        callback();\n      }, debounceWait, options); // debounce runAsync should be promise\n      // https://github.com/lodash/lodash/issues/4400#issuecomment-834800398\n\n      fetchInstance.runAsync = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return new Promise(function (resolve, reject) {\n          var _a;\n\n          (_a = debouncedRef.current) === null || _a === void 0 ? void 0 : _a.call(debouncedRef, function () {\n            _originRunAsync_1.apply(void 0, __spread(args)).then(resolve)[\"catch\"](reject);\n          });\n        });\n      };\n\n      return function () {\n        var _a;\n\n        (_a = debouncedRef.current) === null || _a === void 0 ? void 0 : _a.cancel();\n        fetchInstance.runAsync = _originRunAsync_1;\n      };\n    }\n  }, [debounceWait, options]);\n\n  if (!debounceWait) {\n    return {};\n  }\n\n  return {\n    onCancel: function onCancel() {\n      var _a;\n\n      (_a = debouncedRef.current) === null || _a === void 0 ? void 0 : _a.cancel();\n    }\n  };\n};\n\nexport default useDebouncePlugin;","map":null,"metadata":{},"sourceType":"module"}