{"ast":null,"code":"import _slicedToArray from \"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { memo, useRef } from 'react';\nimport { useSpring, animated } from '@react-spring/web';\nimport { useDrag } from '@use-gesture/react';\nimport { rubberbandIfOutOfBounds } from '../../utils/rubberband';\nimport { bound } from '../../utils/bound';\nimport isEqual from 'lodash/isEqual';\nimport { useIsomorphicLayoutEffect } from 'ahooks';\nimport { measureCSSLength } from '../../utils/measure-css-length';\nvar classPrefix = \"adm-picker-view\";\nexport var Wheel = memo(function (props) {\n  var value = props.value,\n      column = props.column,\n      renderLabel = props.renderLabel;\n\n  function onSelect(val) {\n    props.onSelect(val, props.index);\n  }\n\n  var _useSpring = useSpring(function () {\n    return {\n      from: {\n        y: 0\n      },\n      config: {\n        tension: 400,\n        mass: 0.8\n      }\n    };\n  }),\n      _useSpring2 = _slicedToArray(_useSpring, 2),\n      y = _useSpring2[0].y,\n      api = _useSpring2[1];\n\n  var draggingRef = useRef(false);\n  var rootRef = useRef(null);\n  var itemHeight = useRef(34);\n  useIsomorphicLayoutEffect(function () {\n    var root = rootRef.current;\n    if (!root) return;\n    itemHeight.current = measureCSSLength(window.getComputedStyle(root).getPropertyValue('--item-height'));\n  });\n  useIsomorphicLayoutEffect(function () {\n    if (draggingRef.current) return;\n    if (!value) return;\n    var targetIndex = column.findIndex(function (item) {\n      return item.value === value;\n    });\n    if (targetIndex < 0) return;\n    var finalPosition = targetIndex * -itemHeight.current;\n    api.start({\n      y: finalPosition,\n      immediate: y.goal !== finalPosition\n    });\n  }, [value, column]);\n  useIsomorphicLayoutEffect(function () {\n    if (column.length === 0) {\n      if (value !== null) {\n        onSelect(null);\n      }\n    } else {\n      if (!column.some(function (item) {\n        return item.value === value;\n      })) {\n        var firstItem = column[0];\n        onSelect(firstItem.value);\n      }\n    }\n  }, [column, value]);\n\n  function scrollSelect(index) {\n    var finalPosition = index * -itemHeight.current;\n    api.start({\n      y: finalPosition\n    });\n    var item = column[index];\n    if (!item) return;\n    onSelect(item.value);\n  }\n\n  var bind = useDrag(function (state) {\n    draggingRef.current = true;\n    var min = -((column.length - 1) * itemHeight.current);\n    var max = 0;\n\n    if (state.last) {\n      draggingRef.current = false;\n      var position = state.offset[1] + state.velocity[1] * state.direction[1] * 50;\n      var targetIndex = min < max ? -Math.round(bound(position, min, max) / itemHeight.current) : 0;\n      scrollSelect(targetIndex);\n    } else {\n      var _position = state.offset[1];\n      api.start({\n        y: rubberbandIfOutOfBounds(_position, min, max, itemHeight.current * 50, 0.2)\n      });\n    }\n  }, {\n    axis: 'y',\n    from: function from() {\n      return [0, y.get()];\n    },\n    filterTaps: true,\n    pointer: {\n      touch: true\n    }\n  });\n  var selectedIndex = null;\n\n  function renderAccessible() {\n    if (selectedIndex === null) {\n      return null;\n    }\n\n    var current = column[selectedIndex];\n    var previousIndex = selectedIndex - 1;\n    var nextIndex = selectedIndex + 1;\n    var previous = column[previousIndex];\n    var next = column[nextIndex];\n    return React.createElement(\"div\", {\n      className: 'adm-picker-view-column-accessible'\n    }, React.createElement(\"div\", {\n      className: 'adm-picker-view-column-accessible-current',\n      role: 'button',\n      \"aria-label\": current ? \"\\u5F53\\u524D\\u9009\\u62E9\\u7684\\u662F\\uFF1A\".concat(current.label) : '当前未选择'\n    }, \"-\"), React.createElement(\"div\", null, previous && React.createElement(\"div\", {\n      className: 'adm-picker-view-column-accessible-button',\n      onClick: function onClick() {\n        scrollSelect(previousIndex);\n      },\n      role: 'button',\n      \"aria-label\": \"\\u9009\\u62E9\\u4E0A\\u4E00\\u9879\\uFF1A\".concat(previous.label)\n    }, \"-\")), React.createElement(\"div\", null, next && React.createElement(\"div\", {\n      className: 'adm-picker-view-column-accessible-button',\n      onClick: function onClick() {\n        scrollSelect(nextIndex);\n      },\n      role: 'button',\n      \"aria-label\": \"\\u9009\\u62E9\\u4E0B\\u4E00\\u9879\\uFF1A\".concat(next.label)\n    }, \"-\")));\n  }\n\n  return React.createElement(\"div\", Object.assign({\n    ref: rootRef,\n    className: \"\".concat(classPrefix, \"-column\")\n  }, bind()), React.createElement(animated.div, {\n    style: {\n      translateY: y\n    },\n    className: \"\".concat(classPrefix, \"-column-wheel\"),\n    \"aria-hidden\": true\n  }, column.map(function (item, index) {\n    var selected = props.value === item.value;\n    if (selected) selectedIndex = index;\n\n    function handleClick() {\n      draggingRef.current = false;\n      scrollSelect(index);\n    }\n\n    return React.createElement(\"div\", {\n      key: item.value,\n      \"data-selected\": item.value === value,\n      className: \"\".concat(classPrefix, \"-column-item\"),\n      onClick: handleClick,\n      \"aria-hidden\": !selected,\n      \"aria-label\": selected ? 'active' : ''\n    }, React.createElement(\"div\", {\n      className: \"\".concat(classPrefix, \"-column-item-label\")\n    }, renderLabel(item)));\n  })), renderAccessible());\n}, function (prev, next) {\n  if (prev.index !== next.index) return false;\n  if (prev.value !== next.value) return false;\n  if (prev.onSelect !== next.onSelect) return false;\n\n  if (!isEqual(prev.column, next.column)) {\n    return false;\n  }\n\n  return true;\n});\nWheel.displayName = 'Wheel';","map":null,"metadata":{},"sourceType":"module"}