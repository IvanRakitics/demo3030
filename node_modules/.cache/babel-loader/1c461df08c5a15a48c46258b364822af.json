{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:\\\\react\\\\project0330\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keyboardImplementation = keyboardImplementation;\nexports.releaseAllKeys = releaseAllKeys;\n\nvar _dom = require(\"@testing-library/dom\");\n\nvar _utils = require(\"../utils\");\n\nvar _getNextKeyDef = require(\"./getNextKeyDef\");\n\nvar plugins = _interopRequireWildcard(require(\"./plugins\"));\n\nvar _getEventProps = require(\"./getEventProps\");\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction keyboardImplementation(_x, _x2, _x3) {\n  return _keyboardImplementation.apply(this, arguments);\n}\n\nfunction _keyboardImplementation() {\n  _keyboardImplementation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(text, options, state) {\n    var _state$repeatKey, document, getCurrentElement, _ref, keyDef, consumedLength, releasePrevious, releaseSelf, repeat, replace, pressed, unpreventedDefault;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            document = options.document;\n\n            getCurrentElement = function getCurrentElement() {\n              return getActive(document);\n            };\n\n            _ref = (_state$repeatKey = state.repeatKey) != null ? _state$repeatKey : (0, _getNextKeyDef.getNextKeyDef)(text, options), keyDef = _ref.keyDef, consumedLength = _ref.consumedLength, releasePrevious = _ref.releasePrevious, releaseSelf = _ref.releaseSelf, repeat = _ref.repeat;\n            replace = applyPlugins(plugins.replaceBehavior, keyDef, getCurrentElement(), options, state);\n\n            if (!replace) {\n              pressed = state.pressed.find(function (p) {\n                return p.keyDef === keyDef;\n              }); // Release the key automatically if it was pressed before.\n              // Do not release the key on iterations on `state.repeatKey`.\n\n              if (pressed && !state.repeatKey) {\n                keyup(keyDef, getCurrentElement, options, state, pressed.unpreventedDefault);\n              }\n\n              if (!releasePrevious) {\n                unpreventedDefault = keydown(keyDef, getCurrentElement, options, state);\n\n                if (unpreventedDefault && hasKeyPress(keyDef, state)) {\n                  keypress(keyDef, getCurrentElement, options, state);\n                } // Release the key only on the last iteration on `state.repeatKey`.\n\n\n                if (releaseSelf && repeat <= 1) {\n                  keyup(keyDef, getCurrentElement, options, state, unpreventedDefault);\n                }\n              }\n            }\n\n            if (repeat > 1) {\n              state.repeatKey = {\n                // don't consume again on the next iteration\n                consumedLength: 0,\n                keyDef: keyDef,\n                releasePrevious: releasePrevious,\n                releaseSelf: releaseSelf,\n                repeat: repeat - 1\n              };\n            } else {\n              delete state.repeatKey;\n            }\n\n            if (!(text.length > consumedLength || repeat > 1)) {\n              _context.next = 11;\n              break;\n            }\n\n            if (!(options.delay > 0)) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 10;\n            return (0, _utils.wait)(options.delay);\n\n          case 10:\n            return _context.abrupt(\"return\", keyboardImplementation(text.slice(consumedLength), options, state));\n\n          case 11:\n            return _context.abrupt(\"return\", void undefined);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _keyboardImplementation.apply(this, arguments);\n}\n\nfunction getActive(document) {\n  var _getActiveElement;\n\n  return (_getActiveElement = (0, _utils.getActiveElement)(document)) != null ? _getActiveElement :\n  /* istanbul ignore next */\n  document.body;\n}\n\nfunction releaseAllKeys(options, state) {\n  var getCurrentElement = function getCurrentElement() {\n    return getActive(options.document);\n  };\n\n  var _iterator = _createForOfIteratorHelper(state.pressed),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var k = _step.value;\n      keyup(k.keyDef, getCurrentElement, options, state, k.unpreventedDefault);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction keydown(keyDef, getCurrentElement, options, state) {\n  var element = getCurrentElement(); // clear carried characters when focus is moved\n\n  if (element !== state.activeElement) {\n    state.carryValue = undefined;\n    state.carryChar = '';\n  }\n\n  state.activeElement = element;\n  applyPlugins(plugins.preKeydownBehavior, keyDef, element, options, state);\n\n  var unpreventedDefault = _dom.fireEvent.keyDown(element, (0, _getEventProps.getKeyEventProps)(keyDef, state));\n\n  state.pressed.push({\n    keyDef: keyDef,\n    unpreventedDefault: unpreventedDefault\n  });\n\n  if (unpreventedDefault) {\n    // all default behavior like keypress/submit etc is applied to the currentElement\n    applyPlugins(plugins.keydownBehavior, keyDef, getCurrentElement(), options, state);\n  }\n\n  return unpreventedDefault;\n}\n\nfunction keypress(keyDef, getCurrentElement, options, state) {\n  var element = getCurrentElement();\n\n  var unpreventedDefault = _dom.fireEvent.keyPress(element, (0, _getEventProps.getKeyEventProps)(keyDef, state));\n\n  if (unpreventedDefault) {\n    applyPlugins(plugins.keypressBehavior, keyDef, getCurrentElement(), options, state);\n  }\n}\n\nfunction keyup(keyDef, getCurrentElement, options, state, unprevented) {\n  var element = getCurrentElement();\n  applyPlugins(plugins.preKeyupBehavior, keyDef, element, options, state);\n\n  var unpreventedDefault = _dom.fireEvent.keyUp(element, (0, _getEventProps.getKeyEventProps)(keyDef, state));\n\n  if (unprevented && unpreventedDefault) {\n    applyPlugins(plugins.keyupBehavior, keyDef, getCurrentElement(), options, state);\n  }\n\n  state.pressed = state.pressed.filter(function (k) {\n    return k.keyDef !== keyDef;\n  });\n  applyPlugins(plugins.postKeyupBehavior, keyDef, element, options, state);\n}\n\nfunction applyPlugins(pluginCollection, keyDef, element, options, state) {\n  var plugin = pluginCollection.find(function (p) {\n    return p.matches(keyDef, element, options, state);\n  });\n\n  if (plugin) {\n    plugin.handle(keyDef, element, options, state);\n  }\n\n  return !!plugin;\n}\n\nfunction hasKeyPress(keyDef, state) {\n  var _keyDef$key;\n\n  return (((_keyDef$key = keyDef.key) == null ? void 0 : _keyDef$key.length) === 1 || keyDef.key === 'Enter') && !state.modifiers.ctrl && !state.modifiers.alt;\n}","map":null,"metadata":{},"sourceType":"script"}