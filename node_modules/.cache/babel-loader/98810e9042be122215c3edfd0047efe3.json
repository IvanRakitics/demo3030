{"ast":null,"code":"import React, { forwardRef, useEffect, useImperativeHandle, useRef } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { devError } from '../../utils/dev-log';\nconst classPrefix = 'adm-text-area';\nconst defaultProps = {\n  rows: 2,\n  showCount: false,\n  autoSize: false,\n  defaultValue: ''\n};\nexport const TextArea = forwardRef((p, ref) => {\n  const props = mergeProps(defaultProps, p);\n  const {\n    autoSize,\n    showCount,\n    maxLength\n  } = props;\n  const [value, setValue] = usePropsValue(Object.assign(Object.assign({}, props), {\n    value: props.value === null ? '' : props.value\n  }));\n\n  if (props.value === null) {\n    devError('TextArea', '`value` prop on `TextArea` should not be `null`. Consider using an empty string to clear the component.');\n  }\n\n  const nativeTextAreaRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    clear: () => {\n      setValue('');\n    },\n    focus: () => {\n      var _a;\n\n      (_a = nativeTextAreaRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    },\n    blur: () => {\n      var _a;\n\n      (_a = nativeTextAreaRef.current) === null || _a === void 0 ? void 0 : _a.blur();\n    }\n  }));\n  useEffect(() => {\n    if (!autoSize) return;\n    const textArea = nativeTextAreaRef.current;\n    if (!textArea) return;\n    textArea.style.height = 'auto';\n    let height = textArea.scrollHeight;\n\n    if (typeof autoSize === 'object') {\n      const computedStyle = window.getComputedStyle(textArea);\n      const lineHeight = parseFloat(computedStyle.lineHeight);\n\n      if (autoSize.minRows) {\n        height = Math.max(height, autoSize.minRows * lineHeight);\n      }\n\n      if (autoSize.maxRows) {\n        height = Math.min(height, autoSize.maxRows * lineHeight);\n      }\n    }\n\n    textArea.style.height = `${height}px`;\n  }, [value, autoSize]);\n  const compositingRef = useRef(false);\n  let count;\n  const valueLength = [...value].length;\n\n  if (typeof showCount === 'function') {\n    count = showCount(valueLength, maxLength);\n  } else if (showCount) {\n    count = React.createElement(\"div\", {\n      className: `${classPrefix}-count`\n    }, maxLength === undefined ? valueLength : valueLength + '/' + maxLength);\n  }\n\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, React.createElement(\"textarea\", {\n    ref: nativeTextAreaRef,\n    className: `${classPrefix}-element`,\n    rows: props.rows,\n    value: value,\n    placeholder: props.placeholder,\n    onChange: e => {\n      let v = e.target.value;\n\n      if (maxLength && !compositingRef.current) {\n        v = [...v].slice(0, maxLength).join('');\n      }\n\n      setValue(v);\n    },\n    id: props.id,\n    onCompositionStart: e => {\n      var _a;\n\n      compositingRef.current = true;\n      (_a = props.onCompositionStart) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    onCompositionEnd: e => {\n      var _a;\n\n      compositingRef.current = false;\n\n      if (maxLength) {\n        setValue([...value].slice(0, maxLength).join(''));\n      }\n\n      (_a = props.onCompositionEnd) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    autoComplete: props.autoComplete,\n    autoFocus: props.autoFocus,\n    disabled: props.disabled,\n    readOnly: props.readOnly,\n    onFocus: props.onFocus,\n    onBlur: props.onBlur\n  }), count));\n});\nTextArea.defaultProps = defaultProps;","map":{"version":3,"sources":["D:/react/project0330/node_modules/antd-mobile/es/components/text-area/text-area.js"],"names":["React","forwardRef","useEffect","useImperativeHandle","useRef","withNativeProps","usePropsValue","mergeProps","devError","classPrefix","defaultProps","rows","showCount","autoSize","defaultValue","TextArea","p","ref","props","maxLength","value","setValue","Object","assign","nativeTextAreaRef","clear","focus","_a","current","blur","textArea","style","height","scrollHeight","computedStyle","window","getComputedStyle","lineHeight","parseFloat","minRows","Math","max","maxRows","min","compositingRef","count","valueLength","length","createElement","className","undefined","placeholder","onChange","e","v","target","slice","join","id","onCompositionStart","call","onCompositionEnd","autoComplete","autoFocus","disabled","readOnly","onFocus","onBlur"],"mappings":"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","sourcesContent":["import React, { forwardRef, useEffect, useImperativeHandle, useRef } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { devError } from '../../utils/dev-log';\nconst classPrefix = 'adm-text-area';\nconst defaultProps = {\n  rows: 2,\n  showCount: false,\n  autoSize: false,\n  defaultValue: ''\n};\nexport const TextArea = forwardRef((p, ref) => {\n  const props = mergeProps(defaultProps, p);\n  const {\n    autoSize,\n    showCount,\n    maxLength\n  } = props;\n  const [value, setValue] = usePropsValue(Object.assign(Object.assign({}, props), {\n    value: props.value === null ? '' : props.value\n  }));\n\n  if (props.value === null) {\n    devError('TextArea', '`value` prop on `TextArea` should not be `null`. Consider using an empty string to clear the component.');\n  }\n\n  const nativeTextAreaRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    clear: () => {\n      setValue('');\n    },\n    focus: () => {\n      var _a;\n\n      (_a = nativeTextAreaRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    },\n    blur: () => {\n      var _a;\n\n      (_a = nativeTextAreaRef.current) === null || _a === void 0 ? void 0 : _a.blur();\n    }\n  }));\n  useEffect(() => {\n    if (!autoSize) return;\n    const textArea = nativeTextAreaRef.current;\n    if (!textArea) return;\n    textArea.style.height = 'auto';\n    let height = textArea.scrollHeight;\n\n    if (typeof autoSize === 'object') {\n      const computedStyle = window.getComputedStyle(textArea);\n      const lineHeight = parseFloat(computedStyle.lineHeight);\n\n      if (autoSize.minRows) {\n        height = Math.max(height, autoSize.minRows * lineHeight);\n      }\n\n      if (autoSize.maxRows) {\n        height = Math.min(height, autoSize.maxRows * lineHeight);\n      }\n    }\n\n    textArea.style.height = `${height}px`;\n  }, [value, autoSize]);\n  const compositingRef = useRef(false);\n  let count;\n  const valueLength = [...value].length;\n\n  if (typeof showCount === 'function') {\n    count = showCount(valueLength, maxLength);\n  } else if (showCount) {\n    count = React.createElement(\"div\", {\n      className: `${classPrefix}-count`\n    }, maxLength === undefined ? valueLength : valueLength + '/' + maxLength);\n  }\n\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, React.createElement(\"textarea\", {\n    ref: nativeTextAreaRef,\n    className: `${classPrefix}-element`,\n    rows: props.rows,\n    value: value,\n    placeholder: props.placeholder,\n    onChange: e => {\n      let v = e.target.value;\n\n      if (maxLength && !compositingRef.current) {\n        v = [...v].slice(0, maxLength).join('');\n      }\n\n      setValue(v);\n    },\n    id: props.id,\n    onCompositionStart: e => {\n      var _a;\n\n      compositingRef.current = true;\n      (_a = props.onCompositionStart) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    onCompositionEnd: e => {\n      var _a;\n\n      compositingRef.current = false;\n\n      if (maxLength) {\n        setValue([...value].slice(0, maxLength).join(''));\n      }\n\n      (_a = props.onCompositionEnd) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    autoComplete: props.autoComplete,\n    autoFocus: props.autoFocus,\n    disabled: props.disabled,\n    readOnly: props.readOnly,\n    onFocus: props.onFocus,\n    onBlur: props.onBlur\n  }), count));\n});\nTextArea.defaultProps = defaultProps;"]},"metadata":{},"sourceType":"module"}